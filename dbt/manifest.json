{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v10.json", "dbt_version": "1.6.5", "generated_at": "2023-11-07T22:29:03.127357Z", "invocation_id": "b0593133-dac4-4fe5-a205-91a6755a7e84", "env": {}, "project_name": "project", "project_id": "46f86faa6bbf9ac94a7e459509a20ed0", "user_id": "c288c35a-bb8a-491f-87db-97034f5317c4", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.project.fct_student_attendance": {"database": "development-323217", "schema": "dagster_dev_attendance", "name": "fct_student_attendance", "resource_type": "model", "package_name": "project", "path": "marts/attendance/fct_student_attendance.sql", "original_file_path": "models/marts/attendance/fct_student_attendance.sql", "unique_id": "model.project.fct_student_attendance", "fqn": ["project", "marts", "attendance", "fct_student_attendance"], "alias": "fct_student_attendance", "checksum": {"name": "sha256", "checksum": "b071ed36840b6821aa15a37240ded27009081b4d08be652b4568b0b714e48afe"}, "config": {"enabled": true, "alias": null, "schema": "attendance", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# Student attendance fact\n\nGrain: one row per student per school year per school per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance by day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date.", "columns": {"local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date": {"name": "date", "description": "Attendance date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_attendance_event_category_descriptor": {"name": "school_attendance_event_category_descriptor", "description": "Descriptor for student school attendance event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_duration": {"name": "event_duration", "description": "Absence event duration", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reported_as_present_at_school": {"name": "reported_as_present_at_school", "description": "1 if the student was present for the school day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reported_as_absent_from_school": {"name": "reported_as_absent_from_school", "description": "1 if the student was absent for the school day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reported_as_present_at_home_room": {"name": "reported_as_present_at_home_room", "description": "1 if the student was present during their home room class", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reported_as_absent_from_home_room": {"name": "reported_as_absent_from_home_room", "description": "1 if the student was absent during their home room class", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_chronically_absent": {"name": "is_chronically_absent", "description": "1 if the student has 15 or more absences", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_on_the_verge": {"name": "is_on_the_verge", "description": "1 if the student has an average daily attendance below 92%", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/attendance/attendance.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "attendance", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.523424, "relation_name": "`development-323217`.`dagster_dev_attendance`.`fct_student_attendance`", "raw_code": "with student_attendance as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key([\n            'schools.local_education_agency_id'\n        ]) }}                                                                                               as local_education_agency_key,\n        {{ dbt_utils.generate_surrogate_key([\n            'ssa.school_reference.school_id',\n            'ssa.school_year'\n        ]) }}                                                                                               as school_key,\n        {{ dbt_utils.generate_surrogate_key([\n            'ssa.student_reference.student_unique_id',\n            'ssa.school_year'\n        ]) }}                                                                                               as student_key,\n        ssa.school_year                                                                                     as school_year,\n        calendar_dates.date                                                                                 as date,\n        ifnull(MIN(school_attendance.attendance_event_category_descriptor), 'In Attendance')                as school_attendance_event_category_descriptor,\n        ifnull(school_attendance.event_duration, 0)                                                         as event_duration,\n        max(if(school_attendance.attendance_event_category_descriptor = 'In Attendance', 1, 0))             as reported_as_present_at_school,\n        max(if(\n            school_attendance.attendance_event_category_descriptor in ('Excused Absence', 'Unexcused Absence'), 1, 0\n        ))                                                                                                  as reported_as_absent_from_school,\n        max(if(\n            school_attendance.attendance_event_category_descriptor = 'In Attendance' \n                and student_section_associations.homeroom_indicator is true,\n            1, 0\n        ))                                                                                                  as reported_as_present_at_home_room,\n        max(if(\n            school_attendance.attendance_event_category_descriptor in ('Excused Absence', 'Unexcused Absence') \n                and student_section_associations.homeroom_indicator is true,\n            1, 0\n        ))                                                                                                  as reported_as_absent_from_home_room,\n        COUNT(1) over(\n            partition by ssa.school_year, ssa.student_reference.student_unique_id\n            order by ssa.school_year, ssa.student_reference.student_unique_id, calendar_dates.date \n            rows between unbounded preceding and current row\n        )                                                                                                   as number_days_enrolled_thus_far,\n        SUM(school_attendance.event_duration) over(\n            partition by ssa.school_year, ssa.student_reference.student_unique_id\n            order by ssa.school_year, ssa.student_reference.student_unique_id, calendar_dates.date \n            rows between unbounded preceding and current row\n        )                                                                                                   as sum_event_duration_thus_far\n    from {{ ref('stg_edfi_student_school_associations') }} ssa\n    left join {{ ref('stg_edfi_schools') }} schools\n        on ssa.school_reference.school_id = schools.school_id\n        and ssa.school_year = schools.school_year\n    left join {{ ref('stg_edfi_students') }} students\n        on ssa.school_year = students.school_year\n        and ssa.student_reference.student_unique_id = students.student_unique_id\n    left join {{ ref('stg_edfi_calendar_dates') }} calendar_dates\n        on ssa.school_year = calendar_dates.school_year\n        and ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n        and ssa.entry_date <= calendar_dates.date\n        and (\n            ssa.exit_withdraw_date is null\n            or ssa.exit_withdraw_date >= calendar_dates.date\n        )\n    cross join unnest(calendar_dates.calendar_events) as calendar_events\n    -- school attendance\n    left join {{ ref('stg_edfi_student_school_attendance_events') }} school_attendance\n        on ssa.school_year = school_attendance.school_year\n        and school_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n        and school_attendance.school_reference.school_id = ssa.school_reference.school_id\n        and (\n            ssa.school_year is null\n            or \n            school_attendance.session_reference.school_year = ssa.school_year\n        )\n        and school_attendance.event_date = calendar_dates.date\n    -- section attendance\n    left join{{ ref('stg_edfi_student_section_attendance_events') }} section_attendance\n        on ssa.school_year = section_attendance.school_year\n        and section_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n        and section_attendance.section_reference.school_id = ssa.school_reference.school_id\n        and section_attendance.event_date = calendar_dates.date\n        and (\n            ssa.school_year is null\n            or \n            section_attendance.section_reference.school_year = ssa.school_year\n        )\n    left join {{ ref('stg_edfi_student_section_associations') }} student_section_associations\n        on section_attendance.school_year = student_section_associations.school_year\n        and student_section_associations.student_reference.student_unique_id = section_attendance.student_reference.student_unique_id\n        and student_section_associations.section_reference.local_course_code = section_attendance.section_reference.local_course_code\n        and student_section_associations.section_reference.school_id = section_attendance.section_reference.school_id\n        and student_section_associations.section_reference.school_year = section_attendance.section_reference.school_year\n        and student_section_associations.section_reference.section_identifier = section_attendance.section_reference.section_identifier\n        and student_section_associations.section_reference.session_name = section_attendance.section_reference.session_name\n    where\n        calendar_dates.date < current_date\n        and calendar_events.calendar_event_descriptor in ('Instructional day', 'Student late arrival/early dismissal')\n    group by\n        ssa.student_reference.student_unique_id,\n        schools.local_education_agency_id,\n        ssa.school_reference.school_id,\n        ssa.school_year,\n        calendar_dates.date,\n        school_attendance.event_duration\n\n\n)\n\nselect\n    local_education_agency_key,\n    school_key,\n    student_key,\n    school_year,\n    date,\n    school_attendance_event_category_descriptor,\n    event_duration,\n    reported_as_present_at_school,\n    reported_as_absent_from_school,\n    reported_as_present_at_home_room,\n    reported_as_absent_from_home_room,\n    if(sum_event_duration_thus_far >= 15, 1, 0)                                                                    as is_chronically_absent,\n    if((number_days_enrolled_thus_far - sum_event_duration_thus_far) / number_days_enrolled_thus_far < 0.92, 1, 0) as is_on_the_verge -- early warning indicator\nfrom student_attendance", "language": "sql", "refs": [{"name": "stg_edfi_student_school_associations", "package": null, "version": null}, {"name": "stg_edfi_schools", "package": null, "version": null}, {"name": "stg_edfi_students", "package": null, "version": null}, {"name": "stg_edfi_calendar_dates", "package": null, "version": null}, {"name": "stg_edfi_student_school_attendance_events", "package": null, "version": null}, {"name": "stg_edfi_student_section_attendance_events", "package": null, "version": null}, {"name": "stg_edfi_student_section_associations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_schools", "model.project.stg_edfi_students", "model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_student_school_attendance_events", "model.project.stg_edfi_student_section_attendance_events", "model.project.stg_edfi_student_section_associations"]}, "compiled_path": "target/compiled/project/models/marts/attendance/fct_student_attendance.sql", "compiled": true, "compiled_code": "with student_attendance as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(schools.local_education_agency_id as STRING), '') as STRING)))                                                                                               as local_education_agency_key,\n        to_hex(md5(cast(coalesce(cast(ssa.school_reference.school_id as STRING), '') || '-' || coalesce(cast(ssa.school_year as STRING), '') as STRING)))                                                                                               as school_key,\n        to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as STRING), '') || '-' || coalesce(cast(ssa.school_year as STRING), '') as STRING)))                                                                                               as student_key,\n        ssa.school_year                                                                                     as school_year,\n        calendar_dates.date                                                                                 as date,\n        ifnull(MIN(school_attendance.attendance_event_category_descriptor), 'In Attendance')                as school_attendance_event_category_descriptor,\n        ifnull(school_attendance.event_duration, 0)                                                         as event_duration,\n        max(if(school_attendance.attendance_event_category_descriptor = 'In Attendance', 1, 0))             as reported_as_present_at_school,\n        max(if(\n            school_attendance.attendance_event_category_descriptor in ('Excused Absence', 'Unexcused Absence'), 1, 0\n        ))                                                                                                  as reported_as_absent_from_school,\n        max(if(\n            school_attendance.attendance_event_category_descriptor = 'In Attendance' \n                and student_section_associations.homeroom_indicator is true,\n            1, 0\n        ))                                                                                                  as reported_as_present_at_home_room,\n        max(if(\n            school_attendance.attendance_event_category_descriptor in ('Excused Absence', 'Unexcused Absence') \n                and student_section_associations.homeroom_indicator is true,\n            1, 0\n        ))                                                                                                  as reported_as_absent_from_home_room,\n        COUNT(1) over(\n            partition by ssa.school_year, ssa.student_reference.student_unique_id\n            order by ssa.school_year, ssa.student_reference.student_unique_id, calendar_dates.date \n            rows between unbounded preceding and current row\n        )                                                                                                   as number_days_enrolled_thus_far,\n        SUM(school_attendance.event_duration) over(\n            partition by ssa.school_year, ssa.student_reference.student_unique_id\n            order by ssa.school_year, ssa.student_reference.student_unique_id, calendar_dates.date \n            rows between unbounded preceding and current row\n        )                                                                                                   as sum_event_duration_thus_far\n    from `development-323217`.`dagster_dev_staging`.`stg_edfi_student_school_associations` ssa\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_schools` schools\n        on ssa.school_reference.school_id = schools.school_id\n        and ssa.school_year = schools.school_year\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_students` students\n        on ssa.school_year = students.school_year\n        and ssa.student_reference.student_unique_id = students.student_unique_id\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_calendar_dates` calendar_dates\n        on ssa.school_year = calendar_dates.school_year\n        and ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n        and ssa.entry_date <= calendar_dates.date\n        and (\n            ssa.exit_withdraw_date is null\n            or ssa.exit_withdraw_date >= calendar_dates.date\n        )\n    cross join unnest(calendar_dates.calendar_events) as calendar_events\n    -- school attendance\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_student_school_attendance_events` school_attendance\n        on ssa.school_year = school_attendance.school_year\n        and school_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n        and school_attendance.school_reference.school_id = ssa.school_reference.school_id\n        and (\n            ssa.school_year is null\n            or \n            school_attendance.session_reference.school_year = ssa.school_year\n        )\n        and school_attendance.event_date = calendar_dates.date\n    -- section attendance\n    left join`development-323217`.`dagster_dev_staging`.`stg_edfi_student_section_attendance_events` section_attendance\n        on ssa.school_year = section_attendance.school_year\n        and section_attendance.student_reference.student_unique_id = ssa.student_reference.student_unique_id\n        and section_attendance.section_reference.school_id = ssa.school_reference.school_id\n        and section_attendance.event_date = calendar_dates.date\n        and (\n            ssa.school_year is null\n            or \n            section_attendance.section_reference.school_year = ssa.school_year\n        )\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_student_section_associations` student_section_associations\n        on section_attendance.school_year = student_section_associations.school_year\n        and student_section_associations.student_reference.student_unique_id = section_attendance.student_reference.student_unique_id\n        and student_section_associations.section_reference.local_course_code = section_attendance.section_reference.local_course_code\n        and student_section_associations.section_reference.school_id = section_attendance.section_reference.school_id\n        and student_section_associations.section_reference.school_year = section_attendance.section_reference.school_year\n        and student_section_associations.section_reference.section_identifier = section_attendance.section_reference.section_identifier\n        and student_section_associations.section_reference.session_name = section_attendance.section_reference.session_name\n    where\n        calendar_dates.date < current_date\n        and calendar_events.calendar_event_descriptor in ('Instructional day', 'Student late arrival/early dismissal')\n    group by\n        ssa.student_reference.student_unique_id,\n        schools.local_education_agency_id,\n        ssa.school_reference.school_id,\n        ssa.school_year,\n        calendar_dates.date,\n        school_attendance.event_duration\n\n\n)\n\nselect\n    local_education_agency_key,\n    school_key,\n    student_key,\n    school_year,\n    date,\n    school_attendance_event_category_descriptor,\n    event_duration,\n    reported_as_present_at_school,\n    reported_as_absent_from_school,\n    reported_as_present_at_home_room,\n    reported_as_absent_from_home_room,\n    if(sum_event_duration_thus_far >= 15, 1, 0)                                                                    as is_chronically_absent,\n    if((number_days_enrolled_thus_far - sum_event_duration_thus_far) / number_days_enrolled_thus_far < 0.92, 1, 0) as is_on_the_verge -- early warning indicator\nfrom student_attendance", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.rpt_student_attendance": {"database": "development-323217", "schema": "dagster_dev_attendance", "name": "rpt_student_attendance", "resource_type": "model", "package_name": "project", "path": "marts/attendance/rpt_student_attendance.sql", "original_file_path": "models/marts/attendance/rpt_student_attendance.sql", "unique_id": "model.project.rpt_student_attendance", "fqn": ["project", "marts", "attendance", "rpt_student_attendance"], "alias": "rpt_student_attendance", "checksum": {"name": "sha256", "checksum": "e8a5678b6647a3f3e31727dd8fa9794c23719f3ea34582f7b9c07f9ebca35a53"}, "config": {"enabled": true, "alias": null, "schema": "attendance", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "cluster_by": ["school_name", "grade_level", "student_display_name"], "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# Report student attendance\n\nGrain: one row per student per school year per school per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance by day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date.", "columns": {"is_latest_date_avaliable": {"name": "is_latest_date_avaliable", "description": "true/false if the date record is the lastest date available for the respective school year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/attendance/attendance.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "attendance", "tags": "edfi", "group": "edfi_amt", "cluster_by": ["school_name", "grade_level", "student_display_name"]}, "created_at": 1699396144.5266192, "relation_name": "`development-323217`.`dagster_dev_attendance`.`rpt_student_attendance`", "raw_code": "with max_school_year_dates as (\n\n    select\n        school_year,\n        max(date) as latest_date\n    from {{ ref('fct_student_attendance') }}\n    group by 1\n\n)\n\nselect\n    fct_student_attendance.school_year                                     as school_year,\n    dim_school.local_education_agency_name                                 as local_education_agency_name,\n    dim_school.school_id                                                   as school_id,\n    dim_school.school_name                                                 as school_name,\n    dim_student.student_unique_id                                          as student_unique_id,\n    dim_student.student_display_name                                       as student_display_name,\n    dim_student.student_last_surname                                       as student_last_surname,\n    dim_student.student_first_name                                         as student_first_name,\n    dim_student.is_actively_enrolled_in_school                             as is_actively_enrolled_in_school,\n    dim_student.grade_level                                                as grade_level,\n    dim_student.grade_level_id                                             as grade_level_id,\n    dim_student.gender                                                     as gender,\n    dim_student.limited_english_proficiency                                as limited_english_proficiency,\n    dim_student.is_english_language_learner                                as is_english_language_learner,\n    dim_student.in_special_education_program                               as in_special_education_program,\n    dim_student.is_hispanic                                                as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                                 as race_and_ethnicity_roll_up,\n    dim_date.date                                                          as date,\n    dim_date.month_name                                                    as month_name,\n    dim_date.month_sort_order                                              as month_sort_order,\n    fct_student_attendance.school_attendance_event_category_descriptor     as school_attendance_event_category_descriptor,\n    fct_student_attendance.event_duration                                  as event_duration,\n    fct_student_attendance.reported_as_present_at_school                   as reported_as_present_at_school,\n    fct_student_attendance.reported_as_absent_from_school                  as reported_as_absent_from_school,\n    fct_student_attendance.reported_as_present_at_home_room                as reported_as_present_at_home_room,\n    fct_student_attendance.reported_as_absent_from_home_room               as reported_as_absent_from_home_room,\n    fct_student_attendance.is_on_the_verge                                 as is_on_the_verge,\n    fct_student_attendance.is_chronically_absent                           as is_chronically_absent,\n    if(\n        dim_date.date = max_school_year_dates.latest_date, true, false\n    )                                                                      as is_latest_date_avaliable,\n    rls_user_student_data_authorization.authorized_emails\nfrom {{ ref('fct_student_attendance') }} fct_student_attendance\nleft join {{ ref('dim_student') }} dim_student\n    on fct_student_attendance.student_key = dim_student.student_key\nleft join {{ ref('dim_date') }} dim_date\n    on fct_student_attendance.date = dim_date.date\nleft join {{ ref('dim_school') }} dim_school\n    on fct_student_attendance.school_key = dim_school.school_key\nleft join {{ ref('rls_user_student_data_authorization') }} rls_user_student_data_authorization\n    on fct_student_attendance.student_key = rls_user_student_data_authorization.student_key\nleft join max_school_year_dates on fct_student_attendance.school_year = max_school_year_dates.school_year", "language": "sql", "refs": [{"name": "fct_student_attendance", "package": null, "version": null}, {"name": "fct_student_attendance", "package": null, "version": null}, {"name": "dim_student", "package": null, "version": null}, {"name": "dim_date", "package": null, "version": null}, {"name": "dim_school", "package": null, "version": null}, {"name": "rls_user_student_data_authorization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.project.fct_student_attendance", "model.project.dim_student", "model.project.dim_date", "model.project.dim_school", "model.project.rls_user_student_data_authorization"]}, "compiled_path": "target/compiled/project/models/marts/attendance/rpt_student_attendance.sql", "compiled": true, "compiled_code": "with max_school_year_dates as (\n\n    select\n        school_year,\n        max(date) as latest_date\n    from `development-323217`.`dagster_dev_attendance`.`fct_student_attendance`\n    group by 1\n\n)\n\nselect\n    fct_student_attendance.school_year                                     as school_year,\n    dim_school.local_education_agency_name                                 as local_education_agency_name,\n    dim_school.school_id                                                   as school_id,\n    dim_school.school_name                                                 as school_name,\n    dim_student.student_unique_id                                          as student_unique_id,\n    dim_student.student_display_name                                       as student_display_name,\n    dim_student.student_last_surname                                       as student_last_surname,\n    dim_student.student_first_name                                         as student_first_name,\n    dim_student.is_actively_enrolled_in_school                             as is_actively_enrolled_in_school,\n    dim_student.grade_level                                                as grade_level,\n    dim_student.grade_level_id                                             as grade_level_id,\n    dim_student.gender                                                     as gender,\n    dim_student.limited_english_proficiency                                as limited_english_proficiency,\n    dim_student.is_english_language_learner                                as is_english_language_learner,\n    dim_student.in_special_education_program                               as in_special_education_program,\n    dim_student.is_hispanic                                                as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                                 as race_and_ethnicity_roll_up,\n    dim_date.date                                                          as date,\n    dim_date.month_name                                                    as month_name,\n    dim_date.month_sort_order                                              as month_sort_order,\n    fct_student_attendance.school_attendance_event_category_descriptor     as school_attendance_event_category_descriptor,\n    fct_student_attendance.event_duration                                  as event_duration,\n    fct_student_attendance.reported_as_present_at_school                   as reported_as_present_at_school,\n    fct_student_attendance.reported_as_absent_from_school                  as reported_as_absent_from_school,\n    fct_student_attendance.reported_as_present_at_home_room                as reported_as_present_at_home_room,\n    fct_student_attendance.reported_as_absent_from_home_room               as reported_as_absent_from_home_room,\n    fct_student_attendance.is_on_the_verge                                 as is_on_the_verge,\n    fct_student_attendance.is_chronically_absent                           as is_chronically_absent,\n    if(\n        dim_date.date = max_school_year_dates.latest_date, true, false\n    )                                                                      as is_latest_date_avaliable,\n    rls_user_student_data_authorization.authorized_emails\nfrom `development-323217`.`dagster_dev_attendance`.`fct_student_attendance` fct_student_attendance\nleft join `development-323217`.`dagster_dev_core`.`dim_student` dim_student\n    on fct_student_attendance.student_key = dim_student.student_key\nleft join `development-323217`.`dagster_dev_core`.`dim_date` dim_date\n    on fct_student_attendance.date = dim_date.date\nleft join `development-323217`.`dagster_dev_core`.`dim_school` dim_school\n    on fct_student_attendance.school_key = dim_school.school_key\nleft join `development-323217`.`dagster_dev_row_level_security`.`rls_user_student_data_authorization` rls_user_student_data_authorization\n    on fct_student_attendance.student_key = rls_user_student_data_authorization.student_key\nleft join max_school_year_dates on fct_student_attendance.school_year = max_school_year_dates.school_year", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.rls_user_student_data_authorization": {"database": "development-323217", "schema": "dagster_dev_row_level_security", "name": "rls_user_student_data_authorization", "resource_type": "model", "package_name": "project", "path": "marts/row_level_security/rls_user_student_data_authorization.sql", "original_file_path": "models/marts/row_level_security/rls_user_student_data_authorization.sql", "unique_id": "model.project.rls_user_student_data_authorization", "fqn": ["project", "marts", "row_level_security", "rls_user_student_data_authorization"], "alias": "rls_user_student_data_authorization", "checksum": {"name": "sha256", "checksum": "20743250512de12d0f0873cfd8f035a5092371afa7045fbbfe85b255ccadd888"}, "config": {"enabled": true, "alias": null, "schema": "row_level_security", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# User student data authorization\n\nThis row-level security (RLS) table has a grain size of one row per student key. `authorized_emails` is a repeated field containing all user emails who are allowed access to the respective student's data.\n\nIf a staff member is actively assigned to a school with a classification of Superintendent, School Administrator, or Principal, they are given access.\n\nIf a staff member is actively assigned to a class section where the student has an association, they are given access.\n\nFinally, each student will have their email included for their respective `student_key` record.", "columns": {"student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "authorized_emails": {"name": "authorized_emails", "description": "Repeated field containing all user emails who should have access to the respective student's data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/row_level_security/row_level_security.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "row_level_security", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.5698652, "relation_name": "`development-323217`.`dagster_dev_row_level_security`.`rls_user_student_data_authorization`", "raw_code": "with associations as (\n\n    -- if staff and actively assigned to school with\n    -- staff classification of Superintendent, School Administrator, or Principal,\n    -- associate staff with all students with any enrollment at school\n    select distinct\n        fct_staff_school.school_year    as school_year,\n        dim_staff.email                 as user_email,\n        dim_student.student_unique_id   as student_unique_id\n    from {{ ref('fct_staff_school') }} fct_staff_school\n    left join {{ ref('dim_staff') }} dim_staff\n        on fct_staff_school.staff_key = dim_staff.staff_key\n    left join {{ ref('fct_student_school') }} fct_student_school\n        on fct_staff_school.school_key = fct_student_school.school_key\n    left join {{ ref('dim_student') }} dim_student\n        on fct_student_school.student_key = dim_student.student_key\n    where\n        fct_staff_school.is_actively_assigned_to_school = 1\n        and fct_staff_school.staff_classification in (\n            'Superintendent',\n            'School Administrator',\n            'Principal')\n\n\n    union all\n\n\n    select  \n        fct_student_section.school_year     as school_year,\n        dim_staff.email                     as user_email,\n        dim_student.student_unique_id       as student_unique_id\n    from {{ ref('fct_student_section') }} fct_student_section\n    left join {{ ref('dim_student') }} dim_student\n        on fct_student_section.student_key = dim_student.student_key\n    left join {{ ref('bridge_staff_group') }} bridge_staff_group\n        on fct_student_section.staff_group_key = bridge_staff_group.staff_group_key\n    left join {{ ref('dim_staff') }} dim_staff\n        on bridge_staff_group.staff_key = dim_staff.staff_key\n\n\n    union all\n\n\n    select\n        school_year         as school_year,\n        email               as user_email,\n        student_unique_id   as student_unique_id\n    from {{ ref('dim_student') }} dim_student\n\n),\n\ndistinct_values as (\n\n    select distinct\n        school_year,\n        student_unique_id,\n        user_email,\n    from associations\n    where user_email is not null\n\n)\n\n\nselect\n    {{ dbt_utils.generate_surrogate_key([\n            'student_unique_id',\n            'school_year'\n    ]) }}                                   as student_key,\n    ARRAY_AGG(user_email)                   as authorized_emails\nfrom distinct_values\ngroup by 1", "language": "sql", "refs": [{"name": "fct_staff_school", "package": null, "version": null}, {"name": "dim_staff", "package": null, "version": null}, {"name": "fct_student_school", "package": null, "version": null}, {"name": "dim_student", "package": null, "version": null}, {"name": "fct_student_section", "package": null, "version": null}, {"name": "dim_student", "package": null, "version": null}, {"name": "bridge_staff_group", "package": null, "version": null}, {"name": "dim_staff", "package": null, "version": null}, {"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.fct_staff_school", "model.project.dim_staff", "model.project.fct_student_school", "model.project.dim_student", "model.project.fct_student_section", "model.project.bridge_staff_group"]}, "compiled_path": "target/compiled/project/models/marts/row_level_security/rls_user_student_data_authorization.sql", "compiled": true, "compiled_code": "with associations as (\n\n    -- if staff and actively assigned to school with\n    -- staff classification of Superintendent, School Administrator, or Principal,\n    -- associate staff with all students with any enrollment at school\n    select distinct\n        fct_staff_school.school_year    as school_year,\n        dim_staff.email                 as user_email,\n        dim_student.student_unique_id   as student_unique_id\n    from `development-323217`.`dagster_dev_core`.`fct_staff_school` fct_staff_school\n    left join `development-323217`.`dagster_dev_core`.`dim_staff` dim_staff\n        on fct_staff_school.staff_key = dim_staff.staff_key\n    left join `development-323217`.`dagster_dev_core`.`fct_student_school` fct_student_school\n        on fct_staff_school.school_key = fct_student_school.school_key\n    left join `development-323217`.`dagster_dev_core`.`dim_student` dim_student\n        on fct_student_school.student_key = dim_student.student_key\n    where\n        fct_staff_school.is_actively_assigned_to_school = 1\n        and fct_staff_school.staff_classification in (\n            'Superintendent',\n            'School Administrator',\n            'Principal')\n\n\n    union all\n\n\n    select  \n        fct_student_section.school_year     as school_year,\n        dim_staff.email                     as user_email,\n        dim_student.student_unique_id       as student_unique_id\n    from `development-323217`.`dagster_dev_core`.`fct_student_section` fct_student_section\n    left join `development-323217`.`dagster_dev_core`.`dim_student` dim_student\n        on fct_student_section.student_key = dim_student.student_key\n    left join `development-323217`.`dagster_dev_core`.`bridge_staff_group` bridge_staff_group\n        on fct_student_section.staff_group_key = bridge_staff_group.staff_group_key\n    left join `development-323217`.`dagster_dev_core`.`dim_staff` dim_staff\n        on bridge_staff_group.staff_key = dim_staff.staff_key\n\n\n    union all\n\n\n    select\n        school_year         as school_year,\n        email               as user_email,\n        student_unique_id   as student_unique_id\n    from `development-323217`.`dagster_dev_core`.`dim_student` dim_student\n\n),\n\ndistinct_values as (\n\n    select distinct\n        school_year,\n        student_unique_id,\n        user_email,\n    from associations\n    where user_email is not null\n\n)\n\n\nselect\n    to_hex(md5(cast(coalesce(cast(student_unique_id as STRING), '') || '-' || coalesce(cast(school_year as STRING), '') as STRING)))                                   as student_key,\n    ARRAY_AGG(user_email)                   as authorized_emails\nfrom distinct_values\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.dim_student": {"database": "development-323217", "schema": "dagster_dev_core", "name": "dim_student", "resource_type": "model", "package_name": "project", "path": "marts/core/dim_student.sql", "original_file_path": "models/marts/core/dim_student.sql", "unique_id": "model.project.dim_student", "fqn": ["project", "marts", "core", "dim_student"], "alias": "dim_student", "checksum": {"name": "sha256", "checksum": "c2c3434c9e851c4422ce30b6126a8e930fb40b899c16ca277b6e9f0662f5feff"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# Student dim\n\nGrain: one record per student per school year\n\nEd-Fi's Analytics Middle Tier provides two student dims related to the student's LEA association and the student's school association. This dim combines those two dims to provide one student dim that can be used downstream. If a student has multiple school enrollments, only their most recent will show in this dim.", "columns": {"student_key": {"name": "student_key", "description": "Primary key for dimension table. This surrogate key is based on the student's unique id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_unique_id": {"name": "student_unique_id", "description": "Student unique identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_first_name": {"name": "student_first_name", "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_middle_name": {"name": "student_middle_name", "description": "Student middle name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_last_surname": {"name": "student_last_surname", "description": "The name borne in common by members of a family.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_display_name": {"name": "student_display_name", "description": "Concatenation of student's last name, first name, and first letter of middle name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "Student email", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_actively_enrolled_in_school": {"name": "is_actively_enrolled_in_school", "description": "Yes/No depending on whether student holds an active enrollment in a school", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grade_level": {"name": "grade_level", "description": "Grade level label", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grade_level_id": {"name": "grade_level_id", "description": "Grade level id useful for sorting dropdowns in bi tools", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "limited_english_proficiency": {"name": "limited_english_proficiency", "description": "An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_english_language_learner": {"name": "is_english_language_learner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "in_special_education_program": {"name": "in_special_education_program", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_hispanic": {"name": "is_hispanic", "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race, as last reported to the education organization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "race_and_ethnicity_roll_up": {"name": "race_and_ethnicity_roll_up", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The student's gender as last reported to the education organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.5949543, "relation_name": "`development-323217`.`dagster_dev_core`.`dim_student`", "raw_code": "with school_year_end_dates as (\n\n    select\n        school_year,\n        school_reference.school_id,\n        max(end_date) as school_year_end_date\n    from {{ ref('stg_edfi_sessions') }}\n    group by 1, 2\n\n\n),\n\nactive_enrollments as (\n\n    select distinct\n        student_school_associations.student_reference.student_unique_id            as student_unique_id,\n        student_school_associations.school_year         as school_year,\n        'Yes'                                                                      as is_actively_enrolled_in_school\n    from {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    left join school_year_end_dates\n        on student_school_associations.school_year = school_year_end_dates.school_year\n        and student_school_associations.school_reference.school_id = school_year_end_dates.school_id\n    where\n        student_school_associations.exit_withdraw_date is null\n        or (\n            -- active enrollment for current year\n            current_date >= student_school_associations.entry_date\n            and current_date < student_school_associations.exit_withdraw_date\n        )\n        -- if student exited a previous year on the final day of the session\n        -- replace school_year_end_dates.school_year_end_date with DATE 'YYYY-MM-DD' if max session end date does\n        -- not represent school year end date\n        or student_school_associations.exit_withdraw_date >= school_year_end_dates.school_year_end_date\n\n),\n\nstudent_grade_level_ranked as (\n\n    select\n       school_year,\n        student_reference.student_unique_id,\n        school_reference.school_id,\n        {{ convert_grade_level_to_short_label('entry_grade_level_descriptor') }}     as grade_level,\n        {{ convert_grade_level_to_id('entry_grade_level_descriptor') }}              as grade_level_id,\n        row_number() over (\n            partition by\n                student_reference.student_unique_id,\n                school_year\n            order by\n                school_year DESC,\n                student_reference.student_unique_id,\n                entry_date DESC\n        ) as rank,\n    from {{ ref('stg_edfi_student_school_associations') }}\n\n),\n\nstudent_grade_level as (\n\n    select * from student_grade_level_ranked where rank = 1\n\n),\n\nstudents as (\n\n    select distinct\n        {{ dbt_utils.generate_surrogate_key([\n                'students.student_unique_id',\n                'students.school_year'\n        ]) }}                                                           as student_key,\n        students.school_year                                            as school_year,\n        students.student_unique_id                                      as student_unique_id,\n        students.first_name                                             as student_first_name,\n        students.middle_name                                            as student_middle_name,\n        students.last_surname                                           as student_last_surname,\n        concat(\n            students.last_surname, ', ',\n            students.first_name, ' ',\n            coalesce(LEFT(students.middle_name, 1), '')\n        )                                                               as student_display_name,\n        seoa.electronic_mail[SAFE_OFFSET(0)].address                    as email,\n        ifnull(active_enrollments.is_actively_enrolled_in_school, 'No')           as is_actively_enrolled_in_school,\n        student_grade_level.grade_level                                 as grade_level,\n        student_grade_level.grade_level_id                              as grade_level_id,\n        coalesce(\n            seoa.limited_english_proficiency_descriptor,\n            'Not applicable'\n        )                                                               as limited_english_proficiency,\n        if(\n            seoa.limited_english_proficiency_descriptor = \"Limited\",\n            \"Yes\",\n            \"No\"\n        )                                                               as is_english_language_learner,\n        if (\n            edfi_programs.program_name is not null,\n            \"Yes\",\n            \"No\"\n        )                                                               as in_special_education_program,\n        if(seoa.hispanic_latino_ethnicity is true, 'Yes', 'No')         as is_hispanic,\n        case\n            when seoa.hispanic_latino_ethnicity is true then 'Hispanic or Latino'\n            when ARRAY_LENGTH(seoa.races) > 1 then 'Two or more races'\n            when ARRAY_LENGTH(seoa.races) = 0 then 'Unknown'\n            else seoa.races[OFFSET(0)].race_descriptor\n        end                                                             as race_and_ethnicity_roll_up,\n        seoa.sex_descriptor                                             as gender,\n        students.birth_date                                             as birth_date\n    from {{ ref('stg_edfi_students') }} students\n    left join {{ ref('stg_edfi_student_education_organization_associations') }} seoa \n        on students.student_unique_id = seoa.student_reference.student_unique_id\n        and students.school_year = seoa.school_year\n    left join {{ ref('stg_edfi_student_special_education_program_associations') }} edfi_student_sped_associations\n        on students.school_year = edfi_student_sped_associations.school_year\n        and seoa.education_organization_reference.education_organization_id = edfi_student_sped_associations.program_reference.education_organization_id\n        and students.student_unique_id = edfi_student_sped_associations.student_reference.student_unique_id\n    left join {{ ref('stg_edfi_programs') }} edfi_programs\n        on edfi_student_sped_associations.school_year = edfi_programs.school_year\n        and edfi_student_sped_associations.program_reference.program_type_descriptor = edfi_programs.program_type_descriptor\n        and edfi_student_sped_associations.program_reference.education_organization_id = edfi_programs.education_organization_reference.education_organization_id\n        and edfi_programs.program_name = \"Special Education\"\n    left join active_enrollments\n        on students.student_unique_id = active_enrollments.student_unique_id\n        and students.school_year = active_enrollments.school_year\n    left join student_grade_level\n        on students.student_unique_id = student_grade_level.student_unique_id\n        and students.school_year = student_grade_level.school_year\n\n)\n\n\nselect\n    student_key,\n    school_year,\n    student_unique_id,\n    student_first_name,\n    student_middle_name,\n    student_last_surname,\n    student_display_name,\n    email,\n    is_actively_enrolled_in_school,\n    grade_level,\n    grade_level_id,\n    ifnull(race_and_ethnicity_roll_up, 'Unknown') as race_and_ethnicity_roll_up,\n    gender,\n    birth_date,\n    MIN(limited_english_proficiency)    as limited_english_proficiency,\n    max(is_english_language_learner)    as is_english_language_learner,\n    max(in_special_education_program)   as in_special_education_program,\n    max(is_hispanic)                    as is_hispanic\nfrom students\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14", "language": "sql", "refs": [{"name": "stg_edfi_sessions", "package": null, "version": null}, {"name": "stg_edfi_student_school_associations", "package": null, "version": null}, {"name": "stg_edfi_student_school_associations", "package": null, "version": null}, {"name": "stg_edfi_students", "package": null, "version": null}, {"name": "stg_edfi_student_education_organization_associations", "package": null, "version": null}, {"name": "stg_edfi_student_special_education_program_associations", "package": null, "version": null}, {"name": "stg_edfi_programs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.project.convert_grade_level_to_short_label", "macro.project.convert_grade_level_to_id", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_sessions", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_students", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_programs"]}, "compiled_path": "target/compiled/project/models/marts/core/dim_student.sql", "compiled": true, "compiled_code": "with school_year_end_dates as (\n\n    select\n        school_year,\n        school_reference.school_id,\n        max(end_date) as school_year_end_date\n    from `development-323217`.`dagster_dev_staging`.`stg_edfi_sessions`\n    group by 1, 2\n\n\n),\n\nactive_enrollments as (\n\n    select distinct\n        student_school_associations.student_reference.student_unique_id            as student_unique_id,\n        student_school_associations.school_year         as school_year,\n        'Yes'                                                                      as is_actively_enrolled_in_school\n    from `development-323217`.`dagster_dev_staging`.`stg_edfi_student_school_associations` student_school_associations\n    left join school_year_end_dates\n        on student_school_associations.school_year = school_year_end_dates.school_year\n        and student_school_associations.school_reference.school_id = school_year_end_dates.school_id\n    where\n        student_school_associations.exit_withdraw_date is null\n        or (\n            -- active enrollment for current year\n            current_date >= student_school_associations.entry_date\n            and current_date < student_school_associations.exit_withdraw_date\n        )\n        -- if student exited a previous year on the final day of the session\n        -- replace school_year_end_dates.school_year_end_date with DATE 'YYYY-MM-DD' if max session end date does\n        -- not represent school year end date\n        or student_school_associations.exit_withdraw_date >= school_year_end_dates.school_year_end_date\n\n),\n\nstudent_grade_level_ranked as (\n\n    select\n       school_year,\n        student_reference.student_unique_id,\n        school_reference.school_id,\n        \n    case entry_grade_level_descriptor\n        when 'Infant/toddler'            then 'Infant'\n        when 'Preschool/Prekindergarten' then 'PreK'\n        when 'Transitional Kindergarten' then 'TK'\n        when 'Kindergarten'              then 'K'\n        when 'First grade'               then '1'\n        when 'Second grade'              then '2'\n        when 'Third grade'               then '3'\n        when 'Fourth grade'              then '4'\n        when 'Fifth grade'               then '5'\n        when 'Sixth grade'               then '6'\n        when 'Seventh grade'             then '7'\n        when 'Eighth grade'              then '8'\n        when 'Ninth grade'               then '9'\n        when 'Tenth grade'               then '10'\n        when 'Eleventh grade'            then '11'\n        when 'Twelfth grade'             then '12'\n        else '999999999'\n    end\n     as grade_level,\n        \n    case entry_grade_level_descriptor\n        when 'Infant/toddler'            then -3\n        when 'Preschool/Prekindergarten' then -2\n        when 'Transitional Kindergarten' then -1\n        when 'Kindergarten'              then 0\n        when 'First grade'               then 1\n        when 'Second grade'              then 2\n        when 'Third grade'               then 3\n        when 'Fourth grade'              then 4\n        when 'Fifth grade'               then 5\n        when 'Sixth grade'               then 6\n        when 'Seventh grade'             then 7\n        when 'Eighth grade'              then 8\n        when 'Ninth grade'               then 9\n        when 'Tenth grade'               then 10\n        when 'Eleventh grade'            then 11\n        when 'Twelfth grade'             then 12\n        else 999999999\n    end\n              as grade_level_id,\n        row_number() over (\n            partition by\n                student_reference.student_unique_id,\n                school_year\n            order by\n                school_year DESC,\n                student_reference.student_unique_id,\n                entry_date DESC\n        ) as rank,\n    from `development-323217`.`dagster_dev_staging`.`stg_edfi_student_school_associations`\n\n),\n\nstudent_grade_level as (\n\n    select * from student_grade_level_ranked where rank = 1\n\n),\n\nstudents as (\n\n    select distinct\n        to_hex(md5(cast(coalesce(cast(students.student_unique_id as STRING), '') || '-' || coalesce(cast(students.school_year as STRING), '') as STRING)))                                                           as student_key,\n        students.school_year                                            as school_year,\n        students.student_unique_id                                      as student_unique_id,\n        students.first_name                                             as student_first_name,\n        students.middle_name                                            as student_middle_name,\n        students.last_surname                                           as student_last_surname,\n        concat(\n            students.last_surname, ', ',\n            students.first_name, ' ',\n            coalesce(LEFT(students.middle_name, 1), '')\n        )                                                               as student_display_name,\n        seoa.electronic_mail[SAFE_OFFSET(0)].address                    as email,\n        ifnull(active_enrollments.is_actively_enrolled_in_school, 'No')           as is_actively_enrolled_in_school,\n        student_grade_level.grade_level                                 as grade_level,\n        student_grade_level.grade_level_id                              as grade_level_id,\n        coalesce(\n            seoa.limited_english_proficiency_descriptor,\n            'Not applicable'\n        )                                                               as limited_english_proficiency,\n        if(\n            seoa.limited_english_proficiency_descriptor = \"Limited\",\n            \"Yes\",\n            \"No\"\n        )                                                               as is_english_language_learner,\n        if (\n            edfi_programs.program_name is not null,\n            \"Yes\",\n            \"No\"\n        )                                                               as in_special_education_program,\n        if(seoa.hispanic_latino_ethnicity is true, 'Yes', 'No')         as is_hispanic,\n        case\n            when seoa.hispanic_latino_ethnicity is true then 'Hispanic or Latino'\n            when ARRAY_LENGTH(seoa.races) > 1 then 'Two or more races'\n            when ARRAY_LENGTH(seoa.races) = 0 then 'Unknown'\n            else seoa.races[OFFSET(0)].race_descriptor\n        end                                                             as race_and_ethnicity_roll_up,\n        seoa.sex_descriptor                                             as gender,\n        students.birth_date                                             as birth_date\n    from `development-323217`.`dagster_dev_staging`.`stg_edfi_students` students\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_student_education_organization_associations` seoa \n        on students.student_unique_id = seoa.student_reference.student_unique_id\n        and students.school_year = seoa.school_year\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_student_special_education_program_associations` edfi_student_sped_associations\n        on students.school_year = edfi_student_sped_associations.school_year\n        and seoa.education_organization_reference.education_organization_id = edfi_student_sped_associations.program_reference.education_organization_id\n        and students.student_unique_id = edfi_student_sped_associations.student_reference.student_unique_id\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_programs` edfi_programs\n        on edfi_student_sped_associations.school_year = edfi_programs.school_year\n        and edfi_student_sped_associations.program_reference.program_type_descriptor = edfi_programs.program_type_descriptor\n        and edfi_student_sped_associations.program_reference.education_organization_id = edfi_programs.education_organization_reference.education_organization_id\n        and edfi_programs.program_name = \"Special Education\"\n    left join active_enrollments\n        on students.student_unique_id = active_enrollments.student_unique_id\n        and students.school_year = active_enrollments.school_year\n    left join student_grade_level\n        on students.student_unique_id = student_grade_level.student_unique_id\n        and students.school_year = student_grade_level.school_year\n\n)\n\n\nselect\n    student_key,\n    school_year,\n    student_unique_id,\n    student_first_name,\n    student_middle_name,\n    student_last_surname,\n    student_display_name,\n    email,\n    is_actively_enrolled_in_school,\n    grade_level,\n    grade_level_id,\n    ifnull(race_and_ethnicity_roll_up, 'Unknown') as race_and_ethnicity_roll_up,\n    gender,\n    birth_date,\n    MIN(limited_english_proficiency)    as limited_english_proficiency,\n    max(is_english_language_learner)    as is_english_language_learner,\n    max(in_special_education_program)   as in_special_education_program,\n    max(is_hispanic)                    as is_hispanic\nfrom students\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.dim_local_education_agency": {"database": "development-323217", "schema": "dagster_dev_core", "name": "dim_local_education_agency", "resource_type": "model", "package_name": "project", "path": "marts/core/dim_local_education_agency.sql", "original_file_path": "models/marts/core/dim_local_education_agency.sql", "unique_id": "model.project.dim_local_education_agency", "fqn": ["project", "marts", "core", "dim_local_education_agency"], "alias": "dim_local_education_agency", "checksum": {"name": "sha256", "checksum": "d79c2ba576cad7e82193481b871b6e763c0cc8a2606375e473230cc7892e3d35"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# Local education agency dim\n\nGrain: one row per local education agency", "columns": {"local_education_agency_key": {"name": "local_education_agency_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_education_agency_id": {"name": "local_education_agency_id", "description": "Unique identifier for local education agency", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_education_agency_name": {"name": "local_education_agency_name", "description": "The name assigned to a local education agency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.581856, "relation_name": "`development-323217`.`dagster_dev_core`.`dim_local_education_agency`", "raw_code": "select\n    {{ dbt_utils.generate_surrogate_key([\n        'local_education_agency_id',\n    ]) }}                               as local_education_agency_key,\n    local_education_agency_id           as local_education_agency_id,\n    name_of_institution                 as local_education_agency_name\nfrom {{ ref('stg_edfi_local_education_agencies') }}\nqualify rank() over (\n    partition by local_education_agency_key\n    order by school_year desc) = 1", "language": "sql", "refs": [{"name": "stg_edfi_local_education_agencies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_local_education_agencies"]}, "compiled_path": "target/compiled/project/models/marts/core/dim_local_education_agency.sql", "compiled": true, "compiled_code": "select\n    to_hex(md5(cast(coalesce(cast(local_education_agency_id as STRING), '') as STRING)))                               as local_education_agency_key,\n    local_education_agency_id           as local_education_agency_id,\n    name_of_institution                 as local_education_agency_name\nfrom `development-323217`.`dagster_dev_staging`.`stg_edfi_local_education_agencies`\nqualify rank() over (\n    partition by local_education_agency_key\n    order by school_year desc) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.fct_staff_school": {"database": "development-323217", "schema": "dagster_dev_core", "name": "fct_staff_school", "resource_type": "model", "package_name": "project", "path": "marts/core/fct_staff_school.sql", "original_file_path": "models/marts/core/fct_staff_school.sql", "unique_id": "model.project.fct_staff_school", "fqn": ["project", "marts", "core", "fct_staff_school"], "alias": "fct_staff_school", "checksum": {"name": "sha256", "checksum": "3ac35c7bbd7af0df0caa7b6341984b93b1eb3cef0b2135e1ac32554f7e01f862"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.1823642, "relation_name": "`development-323217`.`dagster_dev_core`.`fct_staff_school`", "raw_code": "select\n    {{ dbt_utils.generate_surrogate_key([\n            'seoa.staff_reference.staff_unique_id',\n            'seoa.school_year'\n    ]) }}                                               as staff_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'seoa.education_organization_reference.education_organization_id',\n        'seoa.school_year'\n    ]) }}                                               as school_key,\n    seoa.school_year                                    as school_year,\n    seoa.staff_classification_descriptor                as staff_classification,\n    ssa.academic_subjects                               as academic_subjects,\n    ssa.grade_levels                                    as grade_levels,\n    seoa.begin_date                                     as begin_date,\n    seoa.end_date                                       as end_date,\n    if(current_date between seoa.begin_date and seoa.end_date, 1, 0) as is_actively_assigned_to_school\nfrom {{ ref('stg_edfi_staff_education_organization_assignment_associations') }} seoa\nleft join {{ ref('stg_edfi_staff_school_associations') }} ssa\n    on seoa.school_year = ssa.school_year\n    and seoa.staff_reference.staff_unique_id = ssa.staff_reference.staff_unique_id\n    and seoa.education_organization_reference.education_organization_id = ssa.school_reference.school_id\nwhere seoa.education_organization_reference.education_organization_id in (\n\n    select school_id from {{ ref('stg_edfi_schools') }}\n\n)", "language": "sql", "refs": [{"name": "stg_edfi_staff_education_organization_assignment_associations", "package": null, "version": null}, {"name": "stg_edfi_staff_school_associations", "package": null, "version": null}, {"name": "stg_edfi_schools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_school_associations", "model.project.stg_edfi_schools"]}, "compiled_path": "target/compiled/project/models/marts/core/fct_staff_school.sql", "compiled": true, "compiled_code": "select\n    to_hex(md5(cast(coalesce(cast(seoa.staff_reference.staff_unique_id as STRING), '') || '-' || coalesce(cast(seoa.school_year as STRING), '') as STRING)))                                               as staff_key,\n    to_hex(md5(cast(coalesce(cast(seoa.education_organization_reference.education_organization_id as STRING), '') || '-' || coalesce(cast(seoa.school_year as STRING), '') as STRING)))                                               as school_key,\n    seoa.school_year                                    as school_year,\n    seoa.staff_classification_descriptor                as staff_classification,\n    ssa.academic_subjects                               as academic_subjects,\n    ssa.grade_levels                                    as grade_levels,\n    seoa.begin_date                                     as begin_date,\n    seoa.end_date                                       as end_date,\n    if(current_date between seoa.begin_date and seoa.end_date, 1, 0) as is_actively_assigned_to_school\nfrom `development-323217`.`dagster_dev_staging`.`stg_edfi_staff_education_organization_assignment_associations` seoa\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_staff_school_associations` ssa\n    on seoa.school_year = ssa.school_year\n    and seoa.staff_reference.staff_unique_id = ssa.staff_reference.staff_unique_id\n    and seoa.education_organization_reference.education_organization_id = ssa.school_reference.school_id\nwhere seoa.education_organization_reference.education_organization_id in (\n\n    select school_id from `development-323217`.`dagster_dev_staging`.`stg_edfi_schools`\n\n)", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.dim_staff": {"database": "development-323217", "schema": "dagster_dev_core", "name": "dim_staff", "resource_type": "model", "package_name": "project", "path": "marts/core/dim_staff.sql", "original_file_path": "models/marts/core/dim_staff.sql", "unique_id": "model.project.dim_staff", "fqn": ["project", "marts", "core", "dim_staff"], "alias": "dim_staff", "checksum": {"name": "sha256", "checksum": "206090bb9d7b06dde0e082d109c0f55e44658c767dff886ea1ec880197e235f7"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# Staff dim\n\nGrain: one row per staff member per school year", "columns": {"staff_key": {"name": "staff_key", "description": "Primary key for dimension table. This surrogate key is based on the staff's unique id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.5896115, "relation_name": "`development-323217`.`dagster_dev_core`.`dim_staff`", "raw_code": "select\n    {{ dbt_utils.generate_surrogate_key([\n            'staff_unique_id',\n            'school_year'\n    ]) }}                               as staff_key,\n    school_year                         as school_year,\n    staff_unique_id                     as staff_unique_id,\n    last_surname                        as staff_last_surname,\n    middle_name                         as staff_middle_name,\n    first_name                          as staff_first_name,\n    concat(\n        last_surname, ', ',\n        first_name, ' ',\n        coalesce(LEFT(middle_name, 1), '')\n    )                                          as staff_display_name,\n    if(\n        hispanic_latino_ethnicity is true,\n        'Yes',\n        'No')                                  as is_hispanic,\n    LOWER(email.electronic_mail_address)       as email\nfrom {{ ref('stg_edfi_staffs') }}\nleft join unnest(electronic_mails) email\n    on email.electronic_mail_type_descriptor = 'Work'", "language": "sql", "refs": [{"name": "stg_edfi_staffs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_staffs"]}, "compiled_path": "target/compiled/project/models/marts/core/dim_staff.sql", "compiled": true, "compiled_code": "select\n    to_hex(md5(cast(coalesce(cast(staff_unique_id as STRING), '') || '-' || coalesce(cast(school_year as STRING), '') as STRING)))                               as staff_key,\n    school_year                         as school_year,\n    staff_unique_id                     as staff_unique_id,\n    last_surname                        as staff_last_surname,\n    middle_name                         as staff_middle_name,\n    first_name                          as staff_first_name,\n    concat(\n        last_surname, ', ',\n        first_name, ' ',\n        coalesce(LEFT(middle_name, 1), '')\n    )                                          as staff_display_name,\n    if(\n        hispanic_latino_ethnicity is true,\n        'Yes',\n        'No')                                  as is_hispanic,\n    LOWER(email.electronic_mail_address)       as email\nfrom `development-323217`.`dagster_dev_staging`.`stg_edfi_staffs`\nleft join unnest(electronic_mails) email\n    on email.electronic_mail_type_descriptor = 'Work'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.fct_student_school": {"database": "development-323217", "schema": "dagster_dev_core", "name": "fct_student_school", "resource_type": "model", "package_name": "project", "path": "marts/core/fct_student_school.sql", "original_file_path": "models/marts/core/fct_student_school.sql", "unique_id": "model.project.fct_student_school", "fqn": ["project", "marts", "core", "fct_student_school"], "alias": "fct_student_school", "checksum": {"name": "sha256", "checksum": "d709d3a15dde07424285acf433ff9a9c658c39002271795c1f830818e8b0644a"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {"student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.595878, "relation_name": "`development-323217`.`dagster_dev_core`.`fct_student_school`", "raw_code": "select\n    {{ dbt_utils.generate_surrogate_key([\n            'ssa.student_reference.student_unique_id',\n            'ssa.school_year'\n    ]) }}                                                           as student_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'schools.local_education_agency_id'\n    ]) }}                                                           as local_education_agency_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'ssa.school_reference.school_id',\n        'ssa.school_year'\n    ]) }}                                                           as school_key,\n    ssa.school_year                                                 as school_year,\n    {{ convert_grade_level_to_short_label('ssa.entry_grade_level_descriptor') }}     as grade_level,\n    {{ convert_grade_level_to_id('ssa.entry_grade_level_descriptor') }}              as grade_level_id,\n    ssa.entry_date                                                  as enrollment_date,\n    ssa.entry_type_descriptor                                       as enrollment_type,\n    ssa.exit_withdraw_date                                          as exit_date,\n    ssa.exit_withdraw_type_descriptor                               as exit_type,\n    ssa.primary_school                                              as is_primary_school,\n    COUNT(calendar_dates.date)                                      as count_days_enrolled,\n    if(\n        ssa.exit_withdraw_date is null\n        or (\n            current_date >= ssa.entry_date\n            and current_date < ssa.exit_withdraw_date\n        ),\n        1, 0)                                                       as is_actively_enrolled_in_school\nfrom {{ ref('stg_edfi_student_school_associations') }} ssa\nleft join {{ ref('stg_edfi_schools') }} schools\n    on ssa.school_reference.school_id = schools.school_id\n    and ssa.school_year = schools.school_year\nleft join {{ ref('stg_edfi_calendar_dates') }} calendar_dates\n    on ssa.school_year = calendar_dates.school_year\n    and ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n    and ssa.entry_date <= calendar_dates.date\n    and (\n        ssa.exit_withdraw_date is null\n        or ssa.exit_withdraw_date > calendar_dates.date\n    )\ncross join unnest(calendar_dates.calendar_events) as calendar_events\nwhere\n    calendar_dates.date < current_date\n    and calendar_events.calendar_event_descriptor = 'Instructional day'\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11", "language": "sql", "refs": [{"name": "stg_edfi_student_school_associations", "package": null, "version": null}, {"name": "stg_edfi_schools", "package": null, "version": null}, {"name": "stg_edfi_calendar_dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.project.convert_grade_level_to_short_label", "macro.project.convert_grade_level_to_id"], "nodes": ["model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_schools", "model.project.stg_edfi_calendar_dates"]}, "compiled_path": "target/compiled/project/models/marts/core/fct_student_school.sql", "compiled": true, "compiled_code": "select\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as STRING), '') || '-' || coalesce(cast(ssa.school_year as STRING), '') as STRING)))                                                           as student_key,\n    to_hex(md5(cast(coalesce(cast(schools.local_education_agency_id as STRING), '') as STRING)))                                                           as local_education_agency_key,\n    to_hex(md5(cast(coalesce(cast(ssa.school_reference.school_id as STRING), '') || '-' || coalesce(cast(ssa.school_year as STRING), '') as STRING)))                                                           as school_key,\n    ssa.school_year                                                 as school_year,\n    \n    case ssa.entry_grade_level_descriptor\n        when 'Infant/toddler'            then 'Infant'\n        when 'Preschool/Prekindergarten' then 'PreK'\n        when 'Transitional Kindergarten' then 'TK'\n        when 'Kindergarten'              then 'K'\n        when 'First grade'               then '1'\n        when 'Second grade'              then '2'\n        when 'Third grade'               then '3'\n        when 'Fourth grade'              then '4'\n        when 'Fifth grade'               then '5'\n        when 'Sixth grade'               then '6'\n        when 'Seventh grade'             then '7'\n        when 'Eighth grade'              then '8'\n        when 'Ninth grade'               then '9'\n        when 'Tenth grade'               then '10'\n        when 'Eleventh grade'            then '11'\n        when 'Twelfth grade'             then '12'\n        else '999999999'\n    end\n     as grade_level,\n    \n    case ssa.entry_grade_level_descriptor\n        when 'Infant/toddler'            then -3\n        when 'Preschool/Prekindergarten' then -2\n        when 'Transitional Kindergarten' then -1\n        when 'Kindergarten'              then 0\n        when 'First grade'               then 1\n        when 'Second grade'              then 2\n        when 'Third grade'               then 3\n        when 'Fourth grade'              then 4\n        when 'Fifth grade'               then 5\n        when 'Sixth grade'               then 6\n        when 'Seventh grade'             then 7\n        when 'Eighth grade'              then 8\n        when 'Ninth grade'               then 9\n        when 'Tenth grade'               then 10\n        when 'Eleventh grade'            then 11\n        when 'Twelfth grade'             then 12\n        else 999999999\n    end\n              as grade_level_id,\n    ssa.entry_date                                                  as enrollment_date,\n    ssa.entry_type_descriptor                                       as enrollment_type,\n    ssa.exit_withdraw_date                                          as exit_date,\n    ssa.exit_withdraw_type_descriptor                               as exit_type,\n    ssa.primary_school                                              as is_primary_school,\n    COUNT(calendar_dates.date)                                      as count_days_enrolled,\n    if(\n        ssa.exit_withdraw_date is null\n        or (\n            current_date >= ssa.entry_date\n            and current_date < ssa.exit_withdraw_date\n        ),\n        1, 0)                                                       as is_actively_enrolled_in_school\nfrom `development-323217`.`dagster_dev_staging`.`stg_edfi_student_school_associations` ssa\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_schools` schools\n    on ssa.school_reference.school_id = schools.school_id\n    and ssa.school_year = schools.school_year\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_calendar_dates` calendar_dates\n    on ssa.school_year = calendar_dates.school_year\n    and ssa.school_reference.school_id = calendar_dates.calendar_reference.school_id\n    and ssa.entry_date <= calendar_dates.date\n    and (\n        ssa.exit_withdraw_date is null\n        or ssa.exit_withdraw_date > calendar_dates.date\n    )\ncross join unnest(calendar_dates.calendar_events) as calendar_events\nwhere\n    calendar_dates.date < current_date\n    and calendar_events.calendar_event_descriptor = 'Instructional day'\ngroup by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.dim_session": {"database": "development-323217", "schema": "dagster_dev_core", "name": "dim_session", "resource_type": "model", "package_name": "project", "path": "marts/core/dim_session.sql", "original_file_path": "models/marts/core/dim_session.sql", "unique_id": "model.project.dim_session", "fqn": ["project", "marts", "core", "dim_session"], "alias": "dim_session", "checksum": {"name": "sha256", "checksum": "b8a660479b3a2ea6d77fe1fe11d1c0306fadccf6b55b5f933bba5c21ddb1a4fd"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# Session dim\n\nGrain: one row per school per session", "columns": {"session_key": {"name": "session_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "Four-digit school year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year_name": {"name": "school_year_name", "description": "School year name (ie. 2021-2022)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_name": {"name": "session_name", "description": "Session name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_name": {"name": "term_name", "description": "Ed-Fi term descriptor", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_instructional_days": {"name": "total_instructional_days", "description": "Number of instructional days for the sesssion", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_begin_date": {"name": "session_begin_date", "description": "Session begin date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_end_date": {"name": "session_end_date", "description": "Session end date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.588672, "relation_name": "`development-323217`.`dagster_dev_core`.`dim_session`", "raw_code": "select\n    {{ dbt_utils.generate_surrogate_key([\n        'sessions.school_reference.school_id',\n        'sessions.school_year_type_reference.school_year',\n        'sessions.session_name'\n    ]) }}                                                                                   as session_key,\n    sessions.school_year_type_reference.school_year                                         as school_year,\n    school_year_types.school_year_description                                               as school_year_name,\n    sessions.session_name                                                                   as session_name,\n    sessions.term_descriptor                                                                as term_name,\n    sessions.total_instructional_days                                                       as total_instructional_days,\n    sessions.begin_date                                                                     as session_begin_date,\n    sessions.end_date                                                                       as session_end_date\nfrom {{ ref('stg_edfi_sessions') }} sessions\nleft join {{ ref('stg_edfi_school_year_types') }} school_year_types\n    on sessions.school_year_type_reference.school_year = school_year_types.school_year", "language": "sql", "refs": [{"name": "stg_edfi_sessions", "package": null, "version": null}, {"name": "stg_edfi_school_year_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_sessions", "model.project.stg_edfi_school_year_types"]}, "compiled_path": "target/compiled/project/models/marts/core/dim_session.sql", "compiled": true, "compiled_code": "select\n    to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as STRING), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as STRING), '') || '-' || coalesce(cast(sessions.session_name as STRING), '') as STRING)))                                                                                   as session_key,\n    sessions.school_year_type_reference.school_year                                         as school_year,\n    school_year_types.school_year_description                                               as school_year_name,\n    sessions.session_name                                                                   as session_name,\n    sessions.term_descriptor                                                                as term_name,\n    sessions.total_instructional_days                                                       as total_instructional_days,\n    sessions.begin_date                                                                     as session_begin_date,\n    sessions.end_date                                                                       as session_end_date\nfrom `development-323217`.`dagster_dev_staging`.`stg_edfi_sessions` sessions\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_school_year_types` school_year_types\n    on sessions.school_year_type_reference.school_year = school_year_types.school_year", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.dim_grading_period": {"database": "development-323217", "schema": "dagster_dev_core", "name": "dim_grading_period", "resource_type": "model", "package_name": "project", "path": "marts/core/dim_grading_period.sql", "original_file_path": "models/marts/core/dim_grading_period.sql", "unique_id": "model.project.dim_grading_period", "fqn": ["project", "marts", "core", "dim_grading_period"], "alias": "dim_grading_period", "checksum": {"name": "sha256", "checksum": "4672868fa0778689ec60c224219c5d80e67e7951e8c54a52a4e388cde27729de"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# Grading period dim\n\nGrain: one row per school per grading period", "columns": {"grading_period_key": {"name": "grading_period_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grading_period_description": {"name": "grading_period_description", "description": "Grading period descriptor code value", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_sequence": {"name": "period_sequence", "description": "The sequential order of this period relative to other periods", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grading_period_begin_date_key": {"name": "grading_period_begin_date_key", "description": "Month, day, and year of the first day of the grading period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "grading_period_end_date_key": {"name": "grading_period_end_date_key", "description": "Month, day, and year of the last day of the grading period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_days": {"name": "number_of_days", "description": "Total days available for educational instruction during the grading period", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.5806105, "relation_name": "`development-323217`.`dagster_dev_core`.`dim_grading_period`", "raw_code": "with unique_records as (\n\n    select distinct\n        student_section_association_reference.session_name,\n        grading_period_reference.school_id,\n        grading_period_reference.school_year,\n        grading_period_reference.grading_period_name,\n        grading_period_reference.period_sequence\n    from {{ ref('stg_edfi_grades') }} grades\n\n),\n\ngrades_grading_periods_unioned as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key([\n            'unique_records.school_id',\n            'unique_records.school_year',\n            'unique_records.session_name',\n            'unique_records.grading_period_name',\n            'unique_records.period_sequence'\n        ]) }}                                               as grading_period_key,\n        {{ dbt_utils.generate_surrogate_key([\n            'unique_records.school_id',\n            'unique_records.school_year'\n        ]) }}                                               as school_key,\n        unique_records.session_name                         as session_name,\n        sessions.term_descriptor                            as term_name,\n        unique_records.school_year                          as school_year,\n        grading_periods.grading_period_name                 as grading_period_name,\n        grading_periods.period_sequence                     as period_sequence,\n        grading_periods.begin_date                          as grading_period_begin_date,\n        grading_periods.end_date                            as grading_period_end_date,\n        grading_periods.total_instructional_days            as total_instructional_days\n    from unique_records\n    left join {{ ref('stg_edfi_grading_periods') }} grading_periods\n        on unique_records.school_id = grading_periods.school_reference.school_id\n        and unique_records.school_year = grading_periods.school_year_type_reference.school_year\n        and unique_records.grading_period_name = grading_periods.grading_period_name\n        and unique_records.period_sequence = grading_periods.period_sequence\n    left join {{ ref('stg_edfi_sessions') }} sessions\n        on unique_records.school_id = sessions.school_reference.school_id\n        and unique_records.school_year = sessions.school_year_type_reference.school_year\n        and unique_records.session_name = sessions.session_name\n\n\n    union all\n\n\n    select\n        {{ dbt_utils.generate_surrogate_key([\n            'grading_periods.school_reference.school_id',\n            'grading_periods.school_year_type_reference.school_year',\n            'sessions.session_name',\n            'grading_periods.grading_period_name',\n            'grading_periods.period_sequence'\n        ]) }}                                                                                   as grading_period_key,\n        {{ dbt_utils.generate_surrogate_key([\n            'sessions.school_reference.school_id',\n            'sessions.school_year_type_reference.school_year'\n        ]) }}                                                                                   as school_key,\n        sessions.session_name                                                                   as session_name,\n        sessions.term_descriptor                                                                as term_name,\n        sessions.school_year_type_reference.school_year                                         as school_year,\n        grading_periods.grading_period_name                                                     as grading_period_name,\n        grading_periods.period_sequence                                                         as period_sequence,\n        grading_periods.begin_date                                                              as grading_period_begin_date,\n        grading_periods.end_date                                                                as grading_period_end_date,\n        grading_periods.total_instructional_days                                                as total_instructional_day,\n    from {{ ref('stg_edfi_sessions') }} sessions\n    left join unnest(sessions.grading_periods) sessions_grading_periods\n    left join {{ ref('stg_edfi_school_year_types') }} school_year_types\n        on sessions.school_year_type_reference.school_year = school_year_types.school_year\n    left join {{ ref('stg_edfi_grading_periods') }} grading_periods\n        on sessions.school_year_type_reference.school_year = grading_periods.school_year\n        and sessions_grading_periods.grading_period_reference.grading_period_name = grading_periods.grading_period_name\n        and sessions_grading_periods.grading_period_reference.period_sequence = grading_periods.period_sequence\n        and sessions_grading_periods.grading_period_reference.school_id = grading_periods.school_reference.school_id\n    where sessions_grading_periods.grading_period_reference.grading_period_name != ''\n\n)\n\nselect distinct\n    grading_period_key,\n    school_key,\n    school_year,\n    session_name,\n    term_name,\n    grading_period_name,\n    period_sequence,\n    grading_period_begin_date,\n    grading_period_end_date,\n    total_instructional_days,\n    if(\n        current_date between grading_period_begin_date and grading_period_end_date,\n        true,\n        false\n    )                                                                 as is_current_grading_period\nfrom grades_grading_periods_unioned", "language": "sql", "refs": [{"name": "stg_edfi_grades", "package": null, "version": null}, {"name": "stg_edfi_grading_periods", "package": null, "version": null}, {"name": "stg_edfi_sessions", "package": null, "version": null}, {"name": "stg_edfi_sessions", "package": null, "version": null}, {"name": "stg_edfi_school_year_types", "package": null, "version": null}, {"name": "stg_edfi_grading_periods", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_grades", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_sessions", "model.project.stg_edfi_school_year_types"]}, "compiled_path": "target/compiled/project/models/marts/core/dim_grading_period.sql", "compiled": true, "compiled_code": "with unique_records as (\n\n    select distinct\n        student_section_association_reference.session_name,\n        grading_period_reference.school_id,\n        grading_period_reference.school_year,\n        grading_period_reference.grading_period_name,\n        grading_period_reference.period_sequence\n    from `development-323217`.`dagster_dev_staging`.`stg_edfi_grades` grades\n\n),\n\ngrades_grading_periods_unioned as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(unique_records.school_id as STRING), '') || '-' || coalesce(cast(unique_records.school_year as STRING), '') || '-' || coalesce(cast(unique_records.session_name as STRING), '') || '-' || coalesce(cast(unique_records.grading_period_name as STRING), '') || '-' || coalesce(cast(unique_records.period_sequence as STRING), '') as STRING)))                                               as grading_period_key,\n        to_hex(md5(cast(coalesce(cast(unique_records.school_id as STRING), '') || '-' || coalesce(cast(unique_records.school_year as STRING), '') as STRING)))                                               as school_key,\n        unique_records.session_name                         as session_name,\n        sessions.term_descriptor                            as term_name,\n        unique_records.school_year                          as school_year,\n        grading_periods.grading_period_name                 as grading_period_name,\n        grading_periods.period_sequence                     as period_sequence,\n        grading_periods.begin_date                          as grading_period_begin_date,\n        grading_periods.end_date                            as grading_period_end_date,\n        grading_periods.total_instructional_days            as total_instructional_days\n    from unique_records\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_grading_periods` grading_periods\n        on unique_records.school_id = grading_periods.school_reference.school_id\n        and unique_records.school_year = grading_periods.school_year_type_reference.school_year\n        and unique_records.grading_period_name = grading_periods.grading_period_name\n        and unique_records.period_sequence = grading_periods.period_sequence\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_sessions` sessions\n        on unique_records.school_id = sessions.school_reference.school_id\n        and unique_records.school_year = sessions.school_year_type_reference.school_year\n        and unique_records.session_name = sessions.session_name\n\n\n    union all\n\n\n    select\n        to_hex(md5(cast(coalesce(cast(grading_periods.school_reference.school_id as STRING), '') || '-' || coalesce(cast(grading_periods.school_year_type_reference.school_year as STRING), '') || '-' || coalesce(cast(sessions.session_name as STRING), '') || '-' || coalesce(cast(grading_periods.grading_period_name as STRING), '') || '-' || coalesce(cast(grading_periods.period_sequence as STRING), '') as STRING)))                                                                                   as grading_period_key,\n        to_hex(md5(cast(coalesce(cast(sessions.school_reference.school_id as STRING), '') || '-' || coalesce(cast(sessions.school_year_type_reference.school_year as STRING), '') as STRING)))                                                                                   as school_key,\n        sessions.session_name                                                                   as session_name,\n        sessions.term_descriptor                                                                as term_name,\n        sessions.school_year_type_reference.school_year                                         as school_year,\n        grading_periods.grading_period_name                                                     as grading_period_name,\n        grading_periods.period_sequence                                                         as period_sequence,\n        grading_periods.begin_date                                                              as grading_period_begin_date,\n        grading_periods.end_date                                                                as grading_period_end_date,\n        grading_periods.total_instructional_days                                                as total_instructional_day,\n    from `development-323217`.`dagster_dev_staging`.`stg_edfi_sessions` sessions\n    left join unnest(sessions.grading_periods) sessions_grading_periods\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_school_year_types` school_year_types\n        on sessions.school_year_type_reference.school_year = school_year_types.school_year\n    left join `development-323217`.`dagster_dev_staging`.`stg_edfi_grading_periods` grading_periods\n        on sessions.school_year_type_reference.school_year = grading_periods.school_year\n        and sessions_grading_periods.grading_period_reference.grading_period_name = grading_periods.grading_period_name\n        and sessions_grading_periods.grading_period_reference.period_sequence = grading_periods.period_sequence\n        and sessions_grading_periods.grading_period_reference.school_id = grading_periods.school_reference.school_id\n    where sessions_grading_periods.grading_period_reference.grading_period_name != ''\n\n)\n\nselect distinct\n    grading_period_key,\n    school_key,\n    school_year,\n    session_name,\n    term_name,\n    grading_period_name,\n    period_sequence,\n    grading_period_begin_date,\n    grading_period_end_date,\n    total_instructional_days,\n    if(\n        current_date between grading_period_begin_date and grading_period_end_date,\n        true,\n        false\n    )                                                                 as is_current_grading_period\nfrom grades_grading_periods_unioned", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.dim_section": {"database": "development-323217", "schema": "dagster_dev_core", "name": "dim_section", "resource_type": "model", "package_name": "project", "path": "marts/core/dim_section.sql", "original_file_path": "models/marts/core/dim_section.sql", "unique_id": "model.project.dim_section", "fqn": ["project", "marts", "core", "dim_section"], "alias": "dim_section", "checksum": {"name": "sha256", "checksum": "d2b78d637a4f977eb4b3a0ca435563abeb5e49b66c32e316512623228efae29b"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# Section dim\n\nGrain: one row per section per school", "columns": {"section_key": {"name": "section_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "section_identifier": {"name": "section_identifier", "description": "Section unique identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "section_name": {"name": "section_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_name": {"name": "session_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_course_code": {"name": "local_course_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "course_title": {"name": "course_title", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.586049, "relation_name": "`development-323217`.`dagster_dev_core`.`dim_section`", "raw_code": "select distinct\n    {{ dbt_utils.generate_surrogate_key([\n        'sections.course_offering_reference.school_id',\n        'sections.course_offering_reference.school_year',\n        'sections.course_offering_reference.session_name',\n        'sections.course_offering_reference.local_course_code',\n        'sections.section_identifier'\n    ]) }}                                                       as section_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'schools.school_id',\n        'schools.school_year'\n    ]) }}                                                       as school_key,\n    sections.section_identifier                                 as section_identifier,\n    coalesce(\n        sections.section_name,\n        concat(\n            course_offering_reference.local_course_code, '-',\n            sessions.session_name\n        )\n    )                                                           as section_name,\n    sessions.session_name                                       as session_name,\n    course_offering_reference.local_course_code                 as local_course_code,\n    courses.course_title                                        as course_title,\n    course_offerings.session_reference.school_year              as school_year,\nfrom {{ ref('stg_edfi_sections') }} sections\nleft join unnest(sections.class_periods) as class_period\nleft join {{ ref('stg_edfi_schools') }} schools\n    on sections.course_offering_reference.school_id = schools.school_id\n    and sections.course_offering_reference.school_year =  schools.school_year\nleft join {{ ref('stg_edfi_course_offerings') }} course_offerings\n    on sections.school_year = course_offerings.school_year\n    and course_offerings.local_course_code = sections.course_offering_reference.local_course_code\n    and course_offerings.school_reference.school_id = sections.course_offering_reference.school_id\n    and course_offerings.session_reference.school_year = sections.course_offering_reference.school_year\n    and course_offerings.session_reference.session_name = sections.course_offering_reference.session_name\nleft join {{ ref('stg_edfi_courses') }} courses\n    on course_offerings.school_year = courses.school_year\n    and courses.course_code = course_offerings.course_reference.course_code\n    and courses.education_organization_reference.education_organization_id = course_offerings.course_reference.education_organization_id\nleft join {{ ref('stg_edfi_sessions') }} sessions\n    on course_offerings.session_reference.school_id = sessions.school_reference.school_id\n    and course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    and course_offerings.session_reference.session_name = sessions.session_name", "language": "sql", "refs": [{"name": "stg_edfi_sections", "package": null, "version": null}, {"name": "stg_edfi_schools", "package": null, "version": null}, {"name": "stg_edfi_course_offerings", "package": null, "version": null}, {"name": "stg_edfi_courses", "package": null, "version": null}, {"name": "stg_edfi_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_sections", "model.project.stg_edfi_schools", "model.project.stg_edfi_course_offerings", "model.project.stg_edfi_courses", "model.project.stg_edfi_sessions"]}, "compiled_path": "target/compiled/project/models/marts/core/dim_section.sql", "compiled": true, "compiled_code": "select distinct\n    to_hex(md5(cast(coalesce(cast(sections.course_offering_reference.school_id as STRING), '') || '-' || coalesce(cast(sections.course_offering_reference.school_year as STRING), '') || '-' || coalesce(cast(sections.course_offering_reference.session_name as STRING), '') || '-' || coalesce(cast(sections.course_offering_reference.local_course_code as STRING), '') || '-' || coalesce(cast(sections.section_identifier as STRING), '') as STRING)))                                                       as section_key,\n    to_hex(md5(cast(coalesce(cast(schools.school_id as STRING), '') || '-' || coalesce(cast(schools.school_year as STRING), '') as STRING)))                                                       as school_key,\n    sections.section_identifier                                 as section_identifier,\n    coalesce(\n        sections.section_name,\n        concat(\n            course_offering_reference.local_course_code, '-',\n            sessions.session_name\n        )\n    )                                                           as section_name,\n    sessions.session_name                                       as session_name,\n    course_offering_reference.local_course_code                 as local_course_code,\n    courses.course_title                                        as course_title,\n    course_offerings.session_reference.school_year              as school_year,\nfrom `development-323217`.`dagster_dev_staging`.`stg_edfi_sections` sections\nleft join unnest(sections.class_periods) as class_period\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_schools` schools\n    on sections.course_offering_reference.school_id = schools.school_id\n    and sections.course_offering_reference.school_year =  schools.school_year\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_course_offerings` course_offerings\n    on sections.school_year = course_offerings.school_year\n    and course_offerings.local_course_code = sections.course_offering_reference.local_course_code\n    and course_offerings.school_reference.school_id = sections.course_offering_reference.school_id\n    and course_offerings.session_reference.school_year = sections.course_offering_reference.school_year\n    and course_offerings.session_reference.session_name = sections.course_offering_reference.session_name\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_courses` courses\n    on course_offerings.school_year = courses.school_year\n    and courses.course_code = course_offerings.course_reference.course_code\n    and courses.education_organization_reference.education_organization_id = course_offerings.course_reference.education_organization_id\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_sessions` sessions\n    on course_offerings.session_reference.school_id = sessions.school_reference.school_id\n    and course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    and course_offerings.session_reference.session_name = sessions.session_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.bridge_staff_group": {"database": "development-323217", "schema": "dagster_dev_core", "name": "bridge_staff_group", "resource_type": "model", "package_name": "project", "path": "marts/core/bridge_staff_group.sql", "original_file_path": "models/marts/core/bridge_staff_group.sql", "unique_id": "model.project.bridge_staff_group", "fqn": ["project", "marts", "core", "bridge_staff_group"], "alias": "bridge_staff_group", "checksum": {"name": "sha256", "checksum": "ae0537c4fe7dd087124cd73f796f52012eef6603922b27d0a506c6cb67a1684e"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "Bridge table connecting teachers to student section fact tables", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.574786, "relation_name": "`development-323217`.`dagster_dev_core`.`bridge_staff_group`", "raw_code": "select\n    {{ dbt_utils.generate_surrogate_key([\n        'staff_section_associations.section_reference.school_id',\n        'staff_section_associations.section_reference.school_year',\n        'staff_section_associations.section_reference.session_name',\n        'staff_section_associations.section_reference.local_course_code',\n        'staff_section_associations.section_reference.section_identifier'\n    ]) }}                                                                       as staff_group_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'staff_section_associations.staff_reference.staff_unique_id',\n        'staff_section_associations.section_reference.school_year'\n    ]) }}                                                                       as staff_key,\n    staff_section_associations.classroom_position_descriptor                    as classroom_position,\n    staff_section_associations.highly_qualified_teacher                         as highly_qualified_teacher,\n    staff_section_associations.percentage_contribution                          as percentage_contribution\nfrom {{ ref('stg_edfi_staff_section_associations') }} staff_section_associations\nleft join {{ ref('stg_edfi_sections') }} sections\n    on staff_section_associations.section_reference.local_course_code = sections.course_offering_reference.local_course_code\n    and staff_section_associations.section_reference.school_id = sections.course_offering_reference.school_id\n    and staff_section_associations.section_reference.school_year = sections.course_offering_reference.school_year\n    and staff_section_associations.section_reference.section_identifier = sections.section_identifier\n    and staff_section_associations.section_reference.session_name = sections.course_offering_reference.session_name\nleft join {{ ref('stg_edfi_course_offerings') }} course_offerings\n    on sections.course_offering_reference.local_course_code = course_offerings.local_course_code\n    and sections.course_offering_reference.school_id = course_offerings.school_reference.school_id\n    and sections.course_offering_reference.school_year = course_offerings.session_reference.school_year\n    and sections.course_offering_reference.session_name = course_offerings.session_reference.session_name\nleft join {{ ref('stg_edfi_sessions') }} sessions\n    on course_offerings.school_reference.school_id = sessions.school_reference.school_id\n    and course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    and course_offerings.session_reference.session_name = sessions.session_name\nwhere\n    current_date between staff_section_associations.begin_date and staff_section_associations.end_date\n    or staff_section_associations.end_date = sessions.end_date", "language": "sql", "refs": [{"name": "stg_edfi_staff_section_associations", "package": null, "version": null}, {"name": "stg_edfi_sections", "package": null, "version": null}, {"name": "stg_edfi_course_offerings", "package": null, "version": null}, {"name": "stg_edfi_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_sections", "model.project.stg_edfi_course_offerings", "model.project.stg_edfi_sessions"]}, "compiled_path": "target/compiled/project/models/marts/core/bridge_staff_group.sql", "compiled": true, "compiled_code": "select\n    to_hex(md5(cast(coalesce(cast(staff_section_associations.section_reference.school_id as STRING), '') || '-' || coalesce(cast(staff_section_associations.section_reference.school_year as STRING), '') || '-' || coalesce(cast(staff_section_associations.section_reference.session_name as STRING), '') || '-' || coalesce(cast(staff_section_associations.section_reference.local_course_code as STRING), '') || '-' || coalesce(cast(staff_section_associations.section_reference.section_identifier as STRING), '') as STRING)))                                                                       as staff_group_key,\n    to_hex(md5(cast(coalesce(cast(staff_section_associations.staff_reference.staff_unique_id as STRING), '') || '-' || coalesce(cast(staff_section_associations.section_reference.school_year as STRING), '') as STRING)))                                                                       as staff_key,\n    staff_section_associations.classroom_position_descriptor                    as classroom_position,\n    staff_section_associations.highly_qualified_teacher                         as highly_qualified_teacher,\n    staff_section_associations.percentage_contribution                          as percentage_contribution\nfrom `development-323217`.`dagster_dev_staging`.`stg_edfi_staff_section_associations` staff_section_associations\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_sections` sections\n    on staff_section_associations.section_reference.local_course_code = sections.course_offering_reference.local_course_code\n    and staff_section_associations.section_reference.school_id = sections.course_offering_reference.school_id\n    and staff_section_associations.section_reference.school_year = sections.course_offering_reference.school_year\n    and staff_section_associations.section_reference.section_identifier = sections.section_identifier\n    and staff_section_associations.section_reference.session_name = sections.course_offering_reference.session_name\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_course_offerings` course_offerings\n    on sections.course_offering_reference.local_course_code = course_offerings.local_course_code\n    and sections.course_offering_reference.school_id = course_offerings.school_reference.school_id\n    and sections.course_offering_reference.school_year = course_offerings.session_reference.school_year\n    and sections.course_offering_reference.session_name = course_offerings.session_reference.session_name\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_sessions` sessions\n    on course_offerings.school_reference.school_id = sessions.school_reference.school_id\n    and course_offerings.session_reference.school_year = sessions.school_year_type_reference.school_year\n    and course_offerings.session_reference.session_name = sessions.session_name\nwhere\n    current_date between staff_section_associations.begin_date and staff_section_associations.end_date\n    or staff_section_associations.end_date = sessions.end_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.dim_school": {"database": "development-323217", "schema": "dagster_dev_core", "name": "dim_school", "resource_type": "model", "package_name": "project", "path": "marts/core/dim_school.sql", "original_file_path": "models/marts/core/dim_school.sql", "unique_id": "model.project.dim_school", "fqn": ["project", "marts", "core", "dim_school"], "alias": "dim_school", "checksum": {"name": "sha256", "checksum": "f2fa56732b8f37687bf0db1d34658a4fbc9bc437b6517fb28cd7ccfb4b57f855"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# School dim\n\nGrain: one row per school per school year", "columns": {"school_key": {"name": "school_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_education_agency_key": {"name": "local_education_agency_key", "description": "Foreign key to `dim_local_education_agency`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_id": {"name": "school_id", "description": "School unique identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_name": {"name": "school_name", "description": "The name assigned to a school.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_type": {"name": "school_type", "description": "The type of education institution as classified by its primary focus.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "local_education_agency_name": {"name": "local_education_agency_name", "description": "The name assigned to a local education agency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.5834432, "relation_name": "`development-323217`.`dagster_dev_core`.`dim_school`", "raw_code": "select\n    {{ dbt_utils.generate_surrogate_key([\n        'schools.school_id',\n        'schools.school_year'\n    ]) }}                                   as school_key,\n    schools.school_id                       as school_id,\n    leas.name_of_institution                as local_education_agency_name,\n    schools.name_of_institution             as school_name,\n    schools.school_type_descriptor          as school_type\nfrom {{ ref('stg_edfi_schools') }} schools\nleft join {{ ref('stg_edfi_local_education_agencies') }} leas\n    on schools.school_year = leas.school_year\n    and leas.local_education_agency_id = schools.local_education_agency_id\nqualify rank() over (\n    partition by school_key\n    order by schools.school_year desc) = 1", "language": "sql", "refs": [{"name": "stg_edfi_schools", "package": null, "version": null}, {"name": "stg_edfi_local_education_agencies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_schools", "model.project.stg_edfi_local_education_agencies"]}, "compiled_path": "target/compiled/project/models/marts/core/dim_school.sql", "compiled": true, "compiled_code": "select\n    to_hex(md5(cast(coalesce(cast(schools.school_id as STRING), '') || '-' || coalesce(cast(schools.school_year as STRING), '') as STRING)))                                   as school_key,\n    schools.school_id                       as school_id,\n    leas.name_of_institution                as local_education_agency_name,\n    schools.name_of_institution             as school_name,\n    schools.school_type_descriptor          as school_type\nfrom `development-323217`.`dagster_dev_staging`.`stg_edfi_schools` schools\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_local_education_agencies` leas\n    on schools.school_year = leas.school_year\n    and leas.local_education_agency_id = schools.local_education_agency_id\nqualify rank() over (\n    partition by school_key\n    order by schools.school_year desc) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.fct_student_section": {"database": "development-323217", "schema": "dagster_dev_core", "name": "fct_student_section", "resource_type": "model", "package_name": "project", "path": "marts/core/fct_student_section.sql", "original_file_path": "models/marts/core/fct_student_section.sql", "unique_id": "model.project.fct_student_section", "fqn": ["project", "marts", "core", "fct_student_section"], "alias": "fct_student_section", "checksum": {"name": "sha256", "checksum": "b08403f2c42db8c6b10710147020fab6761d51116399b62de171c19ec10391a1"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.2550004, "relation_name": "`development-323217`.`dagster_dev_core`.`fct_student_section`", "raw_code": "select\n    {{ dbt_utils.generate_surrogate_key([\n        'ssa.section_reference.school_id',\n        'ssa.section_reference.school_year'\n    ]) }}                                               as school_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'course_offerings.session_reference.school_id',\n        'course_offerings.session_reference.school_year',\n        'course_offerings.session_reference.session_name'\n    ]) }}                                               as session_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'ssa.section_reference.school_id',\n        'ssa.section_reference.school_year',\n        'ssa.section_reference.session_name',\n        'ssa.section_reference.local_course_code',\n        'ssa.section_reference.section_identifier'\n    ]) }}                                               as section_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'ssa.section_reference.school_id',\n        'ssa.section_reference.school_year',\n        'ssa.section_reference.session_name',\n        'ssa.section_reference.local_course_code',\n        'ssa.section_reference.section_identifier'\n    ]) }}                                               as staff_group_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'ssa.student_reference.student_unique_id',\n        'ssa.section_reference.school_year'\n     ]) }}                                              as student_key,\n    section_reference.school_year                       as school_year,\n    ssa.homeroom_indicator                              as homeroom_indicator,\n    ssa.begin_date                                      as start_date,\n    ssa.end_date                                        as end_date,\n    if(\n        ssa.begin_date is null\n        or (\n            current_date >= ssa.begin_date\n            and current_date < ssa.end_date\n        ),\n        1, 0)                                           as is_actively_enrolled_in_section\nfrom {{ ref('stg_edfi_student_section_associations') }} ssa\nleft join {{ ref('stg_edfi_course_offerings') }} course_offerings\n    on ssa.school_year = course_offerings.school_year\n    and course_offerings.local_course_code = ssa.section_reference.local_course_code\n    and course_offerings.school_reference.school_id = ssa.section_reference.school_id\n    and course_offerings.session_reference.school_year = ssa.section_reference.school_year\n    and course_offerings.session_reference.session_name = ssa.section_reference.session_name", "language": "sql", "refs": [{"name": "stg_edfi_student_section_associations", "package": null, "version": null}, {"name": "stg_edfi_course_offerings", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_course_offerings"]}, "compiled_path": "target/compiled/project/models/marts/core/fct_student_section.sql", "compiled": true, "compiled_code": "select\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as STRING), '') || '-' || coalesce(cast(ssa.section_reference.school_year as STRING), '') as STRING)))                                               as school_key,\n    to_hex(md5(cast(coalesce(cast(course_offerings.session_reference.school_id as STRING), '') || '-' || coalesce(cast(course_offerings.session_reference.school_year as STRING), '') || '-' || coalesce(cast(course_offerings.session_reference.session_name as STRING), '') as STRING)))                                               as session_key,\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as STRING), '') || '-' || coalesce(cast(ssa.section_reference.school_year as STRING), '') || '-' || coalesce(cast(ssa.section_reference.session_name as STRING), '') || '-' || coalesce(cast(ssa.section_reference.local_course_code as STRING), '') || '-' || coalesce(cast(ssa.section_reference.section_identifier as STRING), '') as STRING)))                                               as section_key,\n    to_hex(md5(cast(coalesce(cast(ssa.section_reference.school_id as STRING), '') || '-' || coalesce(cast(ssa.section_reference.school_year as STRING), '') || '-' || coalesce(cast(ssa.section_reference.session_name as STRING), '') || '-' || coalesce(cast(ssa.section_reference.local_course_code as STRING), '') || '-' || coalesce(cast(ssa.section_reference.section_identifier as STRING), '') as STRING)))                                               as staff_group_key,\n    to_hex(md5(cast(coalesce(cast(ssa.student_reference.student_unique_id as STRING), '') || '-' || coalesce(cast(ssa.section_reference.school_year as STRING), '') as STRING)))                                              as student_key,\n    section_reference.school_year                       as school_year,\n    ssa.homeroom_indicator                              as homeroom_indicator,\n    ssa.begin_date                                      as start_date,\n    ssa.end_date                                        as end_date,\n    if(\n        ssa.begin_date is null\n        or (\n            current_date >= ssa.begin_date\n            and current_date < ssa.end_date\n        ),\n        1, 0)                                           as is_actively_enrolled_in_section\nfrom `development-323217`.`dagster_dev_staging`.`stg_edfi_student_section_associations` ssa\nleft join `development-323217`.`dagster_dev_staging`.`stg_edfi_course_offerings` course_offerings\n    on ssa.school_year = course_offerings.school_year\n    and course_offerings.local_course_code = ssa.section_reference.local_course_code\n    and course_offerings.school_reference.school_id = ssa.section_reference.school_id\n    and course_offerings.session_reference.school_year = ssa.section_reference.school_year\n    and course_offerings.session_reference.session_name = ssa.section_reference.session_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.dim_date": {"database": "development-323217", "schema": "dagster_dev_core", "name": "dim_date", "resource_type": "model", "package_name": "project", "path": "marts/core/dim_date.sql", "original_file_path": "models/marts/core/dim_date.sql", "unique_id": "model.project.dim_date", "fqn": ["project", "marts", "core", "dim_date"], "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "61b94cadb993d417a2e2ebacf928ecc7edb1cb6537a2cd35cfa6f0643f85d5ee"}, "config": {"enabled": true, "alias": null, "schema": "core", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_amt", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "# Date dim\n\nA date dimension table can be found in almost every dimensional model and allows the analytics engineer to look at student performance across different time periods. An explicit date dimension table can also help store date attributes that are not supported by a SQL date function (ie. month sort order in the context of a school year).\n\nThis dimension table notably lacks the date key found in Ed-Fi's Analytics Middle Tier. This is also counter to what Kimball tells us to do. Instead, fact tables found in the marts that include a date, use the DATE type. Kimball argues that if a fact table does this, it will cause folks to use SQL functions on that date to extract items like month name and avoid the join to the date dimension when they need to retrieve such information. You should use the date if you need the date and join on the date dimension if you need more.", "columns": {"date": {"name": "date", "description": "Calendar date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "day": {"name": "day", "description": "Day number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month": {"name": "month", "description": "Month number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_name": {"name": "month_name", "description": "Month name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_quarter": {"name": "calendar_quarter", "description": "Based on 1: Jan-Mar, 2: Apr-Jun, 3: Jul-Sep, 4: Oct-Dec", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_quarter_name": {"name": "calendar_quarter_name", "description": "Calendar quarter name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calendar_year": {"name": "calendar_year", "description": "Full four digit year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "month_sort_order": {"name": "month_sort_order", "description": "Looks at school year as July - June", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/core/core.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "core", "tags": "edfi", "group": "edfi_amt"}, "created_at": 1699396144.5779138, "relation_name": "`development-323217`.`dagster_dev_core`.`dim_date`", "raw_code": "with dates as (\n    select distinct\n        date,\n        calendar_reference.school_year\n    from  {{ ref('stg_edfi_calendar_dates') }}\n)\n\n\nselect\n    date                                                    as date,\n    EXTRACT(DAY from date)                                  as day,\n    EXTRACT(MONTH from date)                                as month,\n    FORMAT_DATETIME('%B', date)                             as month_name,\n    EXTRACT(QUARTER from date)                              as calendar_quarter,\n    case\n        when EXTRACT(QUARTER from date) = 1 then 'First'\n        when EXTRACT(QUARTER from date) = 2 then 'Second'\n        when EXTRACT(QUARTER from date) = 3 then 'Third'\n        when EXTRACT(QUARTER from date) = 4 then 'Fourth'\n    end                                                     as calendar_quarter_name,\n    cast(school_year as int64)                              as calendar_year,\n    if(\n        EXTRACT(MONTH from date) >= 7, \n        EXTRACT(MONTH from date) - 6,\n        EXTRACT(MONTH from date) + 6\n    )                                                       as month_sort_order -- note in core amt\nfrom dates", "language": "sql", "refs": [{"name": "stg_edfi_calendar_dates", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.project.stg_edfi_calendar_dates"]}, "compiled_path": "target/compiled/project/models/marts/core/dim_date.sql", "compiled": true, "compiled_code": "with dates as (\n    select distinct\n        date,\n        calendar_reference.school_year\n    from  `development-323217`.`dagster_dev_staging`.`stg_edfi_calendar_dates`\n)\n\n\nselect\n    date                                                    as date,\n    EXTRACT(DAY from date)                                  as day,\n    EXTRACT(MONTH from date)                                as month,\n    FORMAT_DATETIME('%B', date)                             as month_name,\n    EXTRACT(QUARTER from date)                              as calendar_quarter,\n    case\n        when EXTRACT(QUARTER from date) = 1 then 'First'\n        when EXTRACT(QUARTER from date) = 2 then 'Second'\n        when EXTRACT(QUARTER from date) = 3 then 'Third'\n        when EXTRACT(QUARTER from date) = 4 then 'Fourth'\n    end                                                     as calendar_quarter_name,\n    cast(school_year as int64)                              as calendar_year,\n    if(\n        EXTRACT(MONTH from date) >= 7, \n        EXTRACT(MONTH from date) - 6,\n        EXTRACT(MONTH from date) + 6\n    )                                                       as month_sort_order -- note in core amt\nfrom dates", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_programs": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_programs", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_programs.sql", "original_file_path": "models/staging/edfi/stg_edfi_programs.sql", "unique_id": "model.project.stg_edfi_programs", "fqn": ["project", "staging", "edfi", "stg_edfi_programs"], "alias": "stg_edfi_programs", "checksum": {"name": "sha256", "checksum": "36fc7d509ddcfdcacf0e9969ef922a1bc7f624c688be3e42944a35004dd6a412"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3138964, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_programs`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_programs') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.programName') as program_name,\n    json_value(data, '$.programId') as program_id,\n    split(json_value(data, '$.programTypeDescriptor'), '#')[OFFSET(1)] as program_type_descriptor,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] as service_descriptor,\n        from unnest(json_query_array(data, \"$.services\")) services \n    ) as services,\n    array(\n        select as struct \n            split(json_value(sponsors, \"$.programSponsorDescriptor\"), '#')[OFFSET(1)] as program_sponsor_descriptor,\n        from unnest(json_query_array(data, \"$.sponsors\")) sponsors \n    ) as sponsors,\n    array(\n        select as struct \n            split(json_value(characteristics, \"$.programCharacteristicDescriptor\"), '#')[OFFSET(1)] as program_characteristic_descriptor,\n        from unnest(json_query_array(data, \"$.characteristics\")) characteristics \n    ) as characteristics,\n    array(\n        select as struct\n            struct(\n                json_value(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') as learning_objective_id,\n                json_value(learning_objectives, '$.learningObjectiveReference.namespace') as namespace\n            ) as learning_objective_reference\n        from unnest(json_query_array(data, \"$.learningObjectives\")) learning_objectives \n    ) as learning_objectives,\n    array(\n            select as struct\n                struct(\n                    json_value(learning_standards, '$.learningStandardReference.learningStandardId') as learning_standard_id\n                ) as learning_standard_reference\n            from unnest(json_query_array(data, \"$.learningStandards\")) learning_standards\n    ) as learning_standards,\n    json_value(data, '$.schoolId') as school_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution,\n    split(json_value(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] as school_type_descriptor,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_programs"], ["staging", "base_edfi_programs"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_programs"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_programs.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_programs`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_programs` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.programName') as program_name,\n    json_value(data, '$.programId') as program_id,\n    split(json_value(data, '$.programTypeDescriptor'), '#')[OFFSET(1)] as program_type_descriptor,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] as service_descriptor,\n        from unnest(json_query_array(data, \"$.services\")) services \n    ) as services,\n    array(\n        select as struct \n            split(json_value(sponsors, \"$.programSponsorDescriptor\"), '#')[OFFSET(1)] as program_sponsor_descriptor,\n        from unnest(json_query_array(data, \"$.sponsors\")) sponsors \n    ) as sponsors,\n    array(\n        select as struct \n            split(json_value(characteristics, \"$.programCharacteristicDescriptor\"), '#')[OFFSET(1)] as program_characteristic_descriptor,\n        from unnest(json_query_array(data, \"$.characteristics\")) characteristics \n    ) as characteristics,\n    array(\n        select as struct\n            struct(\n                json_value(learning_objectives, '$.learningObjectiveReference.learningObjectiveId') as learning_objective_id,\n                json_value(learning_objectives, '$.learningObjectiveReference.namespace') as namespace\n            ) as learning_objective_reference\n        from unnest(json_query_array(data, \"$.learningObjectives\")) learning_objectives \n    ) as learning_objectives,\n    array(\n            select as struct\n                struct(\n                    json_value(learning_standards, '$.learningStandardReference.learningStandardId') as learning_standard_id\n                ) as learning_standard_reference\n            from unnest(json_query_array(data, \"$.learningStandards\")) learning_standards\n    ) as learning_standards,\n    json_value(data, '$.schoolId') as school_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution,\n    split(json_value(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] as school_type_descriptor,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_staff_education_organization_assignment_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_staff_education_organization_assignment_associations", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_staff_education_organization_assignment_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_staff_education_organization_assignment_associations.sql", "unique_id": "model.project.stg_edfi_staff_education_organization_assignment_associations", "fqn": ["project", "staging", "edfi", "stg_edfi_staff_education_organization_assignment_associations"], "alias": "stg_edfi_staff_education_organization_assignment_associations", "checksum": {"name": "sha256", "checksum": "edfc35c5ecd6f585084d6ca89d5cad6c30d3b8656fadcc52a8174a11025e1271"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3203442, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_staff_education_organization_assignment_associations`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_staff_education_organization_assignment_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    split(json_value(data, \"$.staffClassificationDescriptor\"), '#')[OFFSET(1)] as staff_classification_descriptor,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.beginDate')) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, '$.endDate')) as end_date\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_staff_education_organization_assignment_associations"], ["staging", "base_edfi_staff_education_organization_assignment_associations"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_staff_education_organization_assignment_associations"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staff_education_organization_assignment_associations.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_staff_education_organization_assignment_associations`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_staff_education_organization_assignment_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    split(json_value(data, \"$.staffClassificationDescriptor\"), '#')[OFFSET(1)] as staff_classification_descriptor,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.beginDate')) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, '$.endDate')) as end_date\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_course_offerings": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_course_offerings", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_course_offerings.sql", "original_file_path": "models/staging/edfi/stg_edfi_course_offerings.sql", "unique_id": "model.project.stg_edfi_course_offerings", "fqn": ["project", "staging", "edfi", "stg_edfi_course_offerings"], "alias": "stg_edfi_course_offerings", "checksum": {"name": "sha256", "checksum": "961c9b1b5d0b0508c9e234b8f0670af367cc171cd347d6bfb8c95229eb050993"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "This entity represents an entry in the course catalog of available courses offered by the school during a session.", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.731446, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_course_offerings`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_course_offerings') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    json_value(data, '$.id') as id,\n    json_value(data, '$.localCourseCode') as local_course_code,\n    json_value(data, '$.localCourseTitle') as local_course_title,\n    struct(\n        json_value(data, '$.courseReference.courseCode') as course_code,\n        json_value(data, '$.courseReference.educationOrganizationId') as education_organization_id\n    ) as course_reference,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.sessionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sessionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sessionReference.sessionName') as session_name\n    ) as session_reference,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_course_offerings"], ["staging", "base_edfi_course_offerings"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_course_offerings"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_course_offerings.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_course_offerings`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_course_offerings` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    json_value(data, '$.id') as id,\n    json_value(data, '$.localCourseCode') as local_course_code,\n    json_value(data, '$.localCourseTitle') as local_course_title,\n    struct(\n        json_value(data, '$.courseReference.courseCode') as course_code,\n        json_value(data, '$.courseReference.educationOrganizationId') as education_organization_id\n    ) as course_reference,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.sessionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sessionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sessionReference.sessionName') as session_name\n    ) as session_reference,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_student_program_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_student_program_associations", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_student_program_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_program_associations.sql", "unique_id": "model.project.stg_edfi_student_program_associations", "fqn": ["project", "staging", "edfi", "stg_edfi_student_program_associations"], "alias": "stg_edfi_student_program_associations", "checksum": {"name": "sha256", "checksum": "76357b4f0f1f92f87a41562936ea09a68cb3ac46d06298eb230e7fb91cc011ca"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3302226, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_student_program_associations`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_program_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    split(json_value(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] as reason_exited_descriptor,\n    cast(json_value(data, '$.servedOutsideOfRegularSession') as BOOL) served_outside_of_regular_session,\n    struct(\n        json_value(data, '$.programReference.educationOrganizationId') as education_organization_id,\n        json_value(data, '$.programReference.programName') as program_name,\n        split(json_value(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] as program_type_descriptor\n    ) as program_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        split(json_value(data, \"$.participationStatus.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n        json_value(data, '$.participationStatus.designatedBy') as designated_by,\n        parse_date('%Y-%m-%d', json_value(data, \"$.participationStatus.statusBeginDate\")) as status_begin_date,\n        parse_date('%Y-%m-%d', json_value(data, \"$.participationStatus.statusEndDate\")) as status_end_date\n    ) as participation_status,\n    array(\n        select as struct \n            split(json_value(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n            json_value(statuses, '$.designatedBy') as designated_by,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.programParticipationStatuses\")) statuses \n    ) as program_participation_statuses,\n    array(\n        select as struct \n            split(json_value(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] as service_descriptor,\n            cast(json_value(services, '$.primaryIndicator') as BOOL) primary_indicator,\n            parse_date('%Y-%m-%d', json_value(services, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(services, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.services\")) services \n    ) as services\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_student_program_associations"], ["staging", "base_edfi_student_program_associations"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_program_associations"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_program_associations.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_program_associations`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_program_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    split(json_value(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] as reason_exited_descriptor,\n    cast(json_value(data, '$.servedOutsideOfRegularSession') as BOOL) served_outside_of_regular_session,\n    struct(\n        json_value(data, '$.programReference.educationOrganizationId') as education_organization_id,\n        json_value(data, '$.programReference.programName') as program_name,\n        split(json_value(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] as program_type_descriptor\n    ) as program_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        split(json_value(data, \"$.participationStatus.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n        json_value(data, '$.participationStatus.designatedBy') as designated_by,\n        parse_date('%Y-%m-%d', json_value(data, \"$.participationStatus.statusBeginDate\")) as status_begin_date,\n        parse_date('%Y-%m-%d', json_value(data, \"$.participationStatus.statusEndDate\")) as status_end_date\n    ) as participation_status,\n    array(\n        select as struct \n            split(json_value(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n            json_value(statuses, '$.designatedBy') as designated_by,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.programParticipationStatuses\")) statuses \n    ) as program_participation_statuses,\n    array(\n        select as struct \n            split(json_value(services, \"$.serviceDescriptor\"), '#')[OFFSET(1)] as service_descriptor,\n            cast(json_value(services, '$.primaryIndicator') as BOOL) primary_indicator,\n            parse_date('%Y-%m-%d', json_value(services, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(services, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.services\")) services \n    ) as services\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_school_year_types": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_school_year_types", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_school_year_types.sql", "original_file_path": "models/staging/edfi/stg_edfi_school_year_types.sql", "unique_id": "model.project.stg_edfi_school_year_types", "fqn": ["project", "staging", "edfi", "stg_edfi_school_year_types"], "alias": "stg_edfi_school_year_types", "checksum": {"name": "sha256", "checksum": "f2837c88da6c433568188b3a61571b05cd5903866c541647e06f11d008100de4"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3350725, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_school_year_types`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_school_year_types') }}\n\nselect distinct\n    date_extracted                                  as date_extracted,\n    cast(json_value(data, '$.schoolYear') as int64) as school_year,\n    id                                      as id,\n    json_value(data, '$.schoolYearDescription')     as school_year_description\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_school_year_types"], ["staging", "base_edfi_school_year_types"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_school_year_types"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_school_year_types.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_school_year_types`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_school_year_types` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect distinct\n    date_extracted                                  as date_extracted,\n    cast(json_value(data, '$.schoolYear') as int64) as school_year,\n    id                                      as id,\n    json_value(data, '$.schoolYearDescription')     as school_year_description\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_grading_periods": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_grading_periods", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_grading_periods.sql", "original_file_path": "models/staging/edfi/stg_edfi_grading_periods.sql", "unique_id": "model.project.stg_edfi_grading_periods", "fqn": ["project", "staging", "edfi", "stg_edfi_grading_periods"], "alias": "stg_edfi_grading_periods", "checksum": {"name": "sha256", "checksum": "4a9ba6cfc9d015a26a087bb5e6545aadb513346f12add7ce679aaf66614323eb"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3405101, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_grading_periods`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_grading_periods') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    split(json_value(data, \"$.gradingPeriodDescriptor\"), '#')[OFFSET(1)] as grading_period_name,\n    cast(json_value(data, \"$.periodSequence\") as int64) as period_sequence,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    cast(json_value(data, \"$.totalInstructionalDays\") as int64) as total_instructional_days\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_grading_periods"], ["staging", "base_edfi_grading_periods"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_grading_periods"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_grading_periods.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_grading_periods`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_grading_periods` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    split(json_value(data, \"$.gradingPeriodDescriptor\"), '#')[OFFSET(1)] as grading_period_name,\n    cast(json_value(data, \"$.periodSequence\") as int64) as period_sequence,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    cast(json_value(data, \"$.totalInstructionalDays\") as int64) as total_instructional_days\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_student_special_education_program_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_student_special_education_program_associations", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_student_special_education_program_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_special_education_program_associations.sql", "unique_id": "model.project.stg_edfi_student_special_education_program_associations", "fqn": ["project", "staging", "edfi", "stg_edfi_student_special_education_program_associations"], "alias": "stg_edfi_student_special_education_program_associations", "checksum": {"name": "sha256", "checksum": "c1a28f5719f180011751aff9ed8438ae543496ad4a5fac2ea07100da5e0c04f2"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3456566, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_student_special_education_program_associations`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_special_education_program_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepBeginDate\")) as iep_begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepEndDate\")) as iep_end_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepReviewDate\")) as iep_review_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.lastEvaluationDate\")) as last_evaluation_date,\n    cast(json_value(data, '$.ideaEligibility') as BOOL) idea_eligibility,\n    cast(json_value(data, '$.medicallyFragile') as BOOL) medically_fragile,\n    cast(json_value(data, '$.multiplyDisabled') as BOOL) multiply_disabled,\n    cast(json_value(data, '$.servedOutsideOfRegularSession') as BOOL) served_outside_of_regular_session,\n    split(json_value(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] as reason_exited_descriptor,\n    split(json_value(data, \"$.specialEducationSettingDescriptor\"), '#')[OFFSET(1)] as special_education_setting_descriptor,\n    cast(json_value(data, '$.schoolHoursPerWeek') as float64) as school_hours_per_week,\n    cast(json_value(data, '$.specialEducationHoursPerWeek') as float64) as special_education_hours_per_week,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    struct(\n        json_value(data, '$.programReference.educationOrganizationId') as education_organization_id,\n        json_value(data, '$.programReference.programName') as program_name,\n        split(json_value(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] as program_type_descriptor\n    ) as program_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            split(json_value(disabilities, \"$.disabilityDescriptor\"), '#')[OFFSET(1)] as disability_descriptor,\n            split(json_value(disabilities, \"$.disabilityDeterminationSourceTypeDescriptor\"), '#')[OFFSET(1)] as disability_determination_source_type_descriptor,\n            json_value(disabilities, '$.disabilityDiagnosis') as disability_diagnosis,\n            cast(json_value(disabilities, '$.orderOfDisability') as int64) as order_of_disability\n            -- designations array\n        from unnest(json_query_array(data, \"$.disabilities\")) disabilities \n    ) as disabilities,\n    struct(\n        split(json_value(data, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n        json_value(data, '$.designatedBy') as designated_by,\n        parse_date('%Y-%m-%d', json_value(data, \"$.statusBeginDate\")) as status_begin_date,\n        parse_date('%Y-%m-%d', json_value(data, \"$.statusEndDate\")) as status_end_date\n    ) as participation_status,\n    array(\n        select as struct \n            split(json_value(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n            json_value(statuses, '$.designatedBy') as designated_by,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.programParticipationStatuses\")) statuses \n    ) as program_participation_statuses,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_student_special_education_program_associations"], ["staging", "base_edfi_student_special_education_program_associations"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_special_education_program_associations"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_special_education_program_associations.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_special_education_program_associations`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_special_education_program_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepBeginDate\")) as iep_begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepEndDate\")) as iep_end_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.iepReviewDate\")) as iep_review_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.lastEvaluationDate\")) as last_evaluation_date,\n    cast(json_value(data, '$.ideaEligibility') as BOOL) idea_eligibility,\n    cast(json_value(data, '$.medicallyFragile') as BOOL) medically_fragile,\n    cast(json_value(data, '$.multiplyDisabled') as BOOL) multiply_disabled,\n    cast(json_value(data, '$.servedOutsideOfRegularSession') as BOOL) served_outside_of_regular_session,\n    split(json_value(data, \"$.reasonExitedDescriptor\"), '#')[OFFSET(1)] as reason_exited_descriptor,\n    split(json_value(data, \"$.specialEducationSettingDescriptor\"), '#')[OFFSET(1)] as special_education_setting_descriptor,\n    cast(json_value(data, '$.schoolHoursPerWeek') as float64) as school_hours_per_week,\n    cast(json_value(data, '$.specialEducationHoursPerWeek') as float64) as special_education_hours_per_week,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    struct(\n        json_value(data, '$.programReference.educationOrganizationId') as education_organization_id,\n        json_value(data, '$.programReference.programName') as program_name,\n        split(json_value(data, \"$.programReference.programTypeDescriptor\"), '#')[OFFSET(1)] as program_type_descriptor\n    ) as program_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            split(json_value(disabilities, \"$.disabilityDescriptor\"), '#')[OFFSET(1)] as disability_descriptor,\n            split(json_value(disabilities, \"$.disabilityDeterminationSourceTypeDescriptor\"), '#')[OFFSET(1)] as disability_determination_source_type_descriptor,\n            json_value(disabilities, '$.disabilityDiagnosis') as disability_diagnosis,\n            cast(json_value(disabilities, '$.orderOfDisability') as int64) as order_of_disability\n            -- designations array\n        from unnest(json_query_array(data, \"$.disabilities\")) disabilities \n    ) as disabilities,\n    struct(\n        split(json_value(data, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n        json_value(data, '$.designatedBy') as designated_by,\n        parse_date('%Y-%m-%d', json_value(data, \"$.statusBeginDate\")) as status_begin_date,\n        parse_date('%Y-%m-%d', json_value(data, \"$.statusEndDate\")) as status_end_date\n    ) as participation_status,\n    array(\n        select as struct \n            split(json_value(statuses, \"$.participationStatusDescriptor\"), '#')[OFFSET(1)] as participation_status_descriptor,\n            json_value(statuses, '$.designatedBy') as designated_by,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusBeginDate\")) as status_begin_date,\n            parse_date('%Y-%m-%d', json_value(statuses, \"$.statusEndDate\")) as status_end_date\n        from unnest(json_query_array(data, \"$.programParticipationStatuses\")) statuses \n    ) as program_participation_statuses,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_students": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_students", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_students.sql", "original_file_path": "models/staging/edfi/stg_edfi_students.sql", "unique_id": "model.project.stg_edfi_students", "fqn": ["project", "staging", "edfi", "stg_edfi_students"], "alias": "stg_edfi_students", "checksum": {"name": "sha256", "checksum": "2009b21164efba7478880f368bdfb5c9d8d8fa83e0dc693f0863b9c5fd93713f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "This entity represents an individual for whom instruction, services, and/or care are provided in an early childhood, elementary, or secondary educational program under the jurisdiction of a school, education agency or other institution or program. A student is a person who has been enrolled in a school or other educational institution.", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.7332263, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_students`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_students') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.studentUniqueId') as student_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    parse_date('%Y-%m-%d', json_value(data, '$.birthDate')) as birth_date,\n    json_value(data, '$.birthCity') as birth_city,\n    split(json_value(data, \"$.birthCountryDescriptor\"), '#')[OFFSET(1)] as birth_country_descriptor,\n    json_value(data, '$.birthInternationalProvince') as birth_international_province,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_students"], ["staging", "base_edfi_students"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_students"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_students.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_students`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_students` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.studentUniqueId') as student_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    parse_date('%Y-%m-%d', json_value(data, '$.birthDate')) as birth_date,\n    json_value(data, '$.birthCity') as birth_city,\n    split(json_value(data, \"$.birthCountryDescriptor\"), '#')[OFFSET(1)] as birth_country_descriptor,\n    json_value(data, '$.birthInternationalProvince') as birth_international_province,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_staffs": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_staffs", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_staffs.sql", "original_file_path": "models/staging/edfi/stg_edfi_staffs.sql", "unique_id": "model.project.stg_edfi_staffs", "fqn": ["project", "staging", "edfi", "stg_edfi_staffs"], "alias": "stg_edfi_staffs", "checksum": {"name": "sha256", "checksum": "9f3b12d468c8eca609f5acebbfd212392f9ce8a6a7c0b1dc445cd9c1b7109318"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3553684, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_staffs`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_staffs') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.staffUniqueId') as staff_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    json_value(data, '$.loginId') as login_id,\n    parse_date('%Y-%m-%d', json_value(data, '$.birthDate')) as birth_date,\n    split(json_value(data, \"$.citizenshipStatusDescriptor\"), '#')[OFFSET(1)] as citizenship_status_descriptor,\n    split(json_value(data, \"$.highestCompletedLevelOfEducationDescriptor\"), '#')[OFFSET(1)] as highest_completed_level_of_education_descriptor,\n    cast(json_value(data, \"$.highlyQualifiedTeacher\") as BOOL) as highly_qualified_teacher,\n    cast(json_value(data, \"$.hispanicLatinoEthnicity\") as BOOL) as hispanic_latino_ethnicity,\n    array(\n        select as struct \n            split(json_value(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] as electronic_mail_type_descriptor,\n            json_value(electronic_mails, \"$.electronicMailAddress\") as electronic_mail_address,\n            cast(json_value(electronic_mails, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator\n        from unnest(json_query_array(data, \"$.electronicMails\")) electronic_mails \n    ) as electronic_mails,\n    array(\n        select as struct \n            split(json_value(codes, '$.staffIdentificationSystemDescriptor'), '#')[OFFSET(1)] as staff_identification_system_descriptor,\n            json_value(codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes,\n    array(\n        select as struct \n            split(json_value(descriptors, '$.ancestryEthnicOriginDescriptor'), '#')[OFFSET(1)] as ancestry_ethnic_origin_descriptor,\n        from unnest(json_query_array(data, \"$.ancestry_ethnic_origins\")) descriptors \n    ) as ancestry_ethnic_origins,\n    array(\n        select as struct \n            split(json_value(races, '$.raceDescriptor'), '#')[OFFSET(1)] as race_descriptor,\n        from unnest(json_query_array(data, \"$.races\")) races \n    ) as races\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_staffs"], ["staging", "base_edfi_staffs"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_staffs"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staffs.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_staffs`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_staffs` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.staffUniqueId') as staff_unique_id,\n    json_value(data, '$.lastSurname') as last_surname,\n    json_value(data, '$.middleName') as middle_name,\n    json_value(data, '$.firstName') as first_name,\n    struct(\n        json_value(data, '$.personReference.personId') as person_id,\n        split(json_value(data, \"$.personReference.sourceSystemDescriptor\"), '#')[OFFSET(1)] as source_system_descriptor\n    ) as person_reference,\n    json_value(data, '$.generationCodeSuffix') as generation_code_suffix,\n    json_value(data, '$.loginId') as login_id,\n    parse_date('%Y-%m-%d', json_value(data, '$.birthDate')) as birth_date,\n    split(json_value(data, \"$.citizenshipStatusDescriptor\"), '#')[OFFSET(1)] as citizenship_status_descriptor,\n    split(json_value(data, \"$.highestCompletedLevelOfEducationDescriptor\"), '#')[OFFSET(1)] as highest_completed_level_of_education_descriptor,\n    cast(json_value(data, \"$.highlyQualifiedTeacher\") as BOOL) as highly_qualified_teacher,\n    cast(json_value(data, \"$.hispanicLatinoEthnicity\") as BOOL) as hispanic_latino_ethnicity,\n    array(\n        select as struct \n            split(json_value(electronic_mails, '$.electronicMailTypeDescriptor'), '#')[OFFSET(1)] as electronic_mail_type_descriptor,\n            json_value(electronic_mails, \"$.electronicMailAddress\") as electronic_mail_address,\n            cast(json_value(electronic_mails, \"$.doNotPublishIndicator\") as BOOL) as do_not_publish_indicator\n        from unnest(json_query_array(data, \"$.electronicMails\")) electronic_mails \n    ) as electronic_mails,\n    array(\n        select as struct \n            split(json_value(codes, '$.staffIdentificationSystemDescriptor'), '#')[OFFSET(1)] as staff_identification_system_descriptor,\n            json_value(codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes,\n    array(\n        select as struct \n            split(json_value(descriptors, '$.ancestryEthnicOriginDescriptor'), '#')[OFFSET(1)] as ancestry_ethnic_origin_descriptor,\n        from unnest(json_query_array(data, \"$.ancestry_ethnic_origins\")) descriptors \n    ) as ancestry_ethnic_origins,\n    array(\n        select as struct \n            split(json_value(races, '$.raceDescriptor'), '#')[OFFSET(1)] as race_descriptor,\n        from unnest(json_query_array(data, \"$.races\")) races \n    ) as races\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_calendar_dates": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_calendar_dates", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_calendar_dates.sql", "original_file_path": "models/staging/edfi/stg_edfi_calendar_dates.sql", "unique_id": "model.project.stg_edfi_calendar_dates", "fqn": ["project", "staging", "edfi", "stg_edfi_calendar_dates"], "alias": "stg_edfi_calendar_dates", "checksum": {"name": "sha256", "checksum": "655fd94a357f9bff1a9106ff7acd5670479cf1adaa6674d083c0c346334346f6"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "The type of scheduled or unscheduled event for the day.", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.7310739, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_calendar_dates`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_calendar_dates') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, '$.date')) as date,\n    array(\n        select as struct \n            split(json_value(calendar_events, \"$.calendarEventDescriptor\"), '#')[OFFSET(1)] as calendar_event_descriptor\n        from unnest(json_query_array(data, \"$.calendarEvents\")) calendar_events \n    ) as calendar_events,\n    struct(\n        json_value(data, '$.calendarReference.calendarCode') as calendar_code,\n        json_value(data, '$.calendarReference.schoolId') as school_id,\n        cast(json_value(data, '$.calendarReference.schoolYear') as int64) as school_year\n    ) as calendar_reference\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_calendar_dates"], ["staging", "base_edfi_calendar_dates"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_calendar_dates"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_calendar_dates.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_calendar_dates`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_calendar_dates` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    parse_date('%Y-%m-%d', json_value(data, '$.date')) as date,\n    array(\n        select as struct \n            split(json_value(calendar_events, \"$.calendarEventDescriptor\"), '#')[OFFSET(1)] as calendar_event_descriptor\n        from unnest(json_query_array(data, \"$.calendarEvents\")) calendar_events \n    ) as calendar_events,\n    struct(\n        json_value(data, '$.calendarReference.calendarCode') as calendar_code,\n        json_value(data, '$.calendarReference.schoolId') as school_id,\n        cast(json_value(data, '$.calendarReference.schoolYear') as int64) as school_year\n    ) as calendar_reference\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_staff_school_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_staff_school_associations", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_staff_school_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_staff_school_associations.sql", "unique_id": "model.project.stg_edfi_staff_school_associations", "fqn": ["project", "staging", "edfi", "stg_edfi_staff_school_associations"], "alias": "stg_edfi_staff_school_associations", "checksum": {"name": "sha256", "checksum": "bf088b01841e0d9c0d9636393e338bb27bd3a50b842541f66da09ea23db44cd4"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3654315, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_staff_school_associations`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_staff_school_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    struct(\n        json_value(data, '$.calendarReference.calendarCode') as calendar_code,\n        json_value(data, '$.calendarReference.schoolId') as school_id,\n        cast(json_value(data, '$.calendarReference.schoolYear') as int64) as school_year\n    ) as calendar_reference,\n    split(json_value(data, \"$.programAssignmentDescriptor\"), '#')[OFFSET(1)] as program_assignment_descriptor,\n    array(\n        select as struct \n            split(json_value(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n        from unnest(json_query_array(data, \"$.academicSubjects\")) academic_subjects \n    ) as academic_subjects,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor,\n        from unnest(json_query_array(data, \"$.gradeLevels\")) grade_levels \n    ) as grade_levels,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_staff_school_associations"], ["staging", "base_edfi_staff_school_associations"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_staff_school_associations"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staff_school_associations.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_staff_school_associations`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_staff_school_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    struct(\n        json_value(data, '$.calendarReference.calendarCode') as calendar_code,\n        json_value(data, '$.calendarReference.schoolId') as school_id,\n        cast(json_value(data, '$.calendarReference.schoolYear') as int64) as school_year\n    ) as calendar_reference,\n    split(json_value(data, \"$.programAssignmentDescriptor\"), '#')[OFFSET(1)] as program_assignment_descriptor,\n    array(\n        select as struct \n            split(json_value(academic_subjects, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n        from unnest(json_query_array(data, \"$.academicSubjects\")) academic_subjects \n    ) as academic_subjects,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor,\n        from unnest(json_query_array(data, \"$.gradeLevels\")) grade_levels \n    ) as grade_levels,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_calendars": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_calendars", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_calendars.sql", "original_file_path": "models/staging/edfi/stg_edfi_calendars.sql", "unique_id": "model.project.stg_edfi_calendars", "fqn": ["project", "staging", "edfi", "stg_edfi_calendars"], "alias": "stg_edfi_calendars", "checksum": {"name": "sha256", "checksum": "527746251815e72084abf2937bac620a3ea06a31619c09e08debccdb0417468d"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.370503, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_calendars`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_calendars') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.calendarCode') as calendar_code,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, \"$.calendarTypeDescriptor\"), '#')[OFFSET(1)] as calendar_type_descriptor,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor\n        from unnest(json_query_array(data, \"$.gradeLevels\")) grade_levels \n    ) as grade_levels\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_calendars"], ["staging", "base_edfi_calendars"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_calendars"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_calendars.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_calendars`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_calendars` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.calendarCode') as calendar_code,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, \"$.calendarTypeDescriptor\"), '#')[OFFSET(1)] as calendar_type_descriptor,\n    array(\n        select as struct \n            split(json_value(grade_levels, \"$.gradeLevelDescriptor\"), '#')[OFFSET(1)] as grade_level_descriptor\n        from unnest(json_query_array(data, \"$.gradeLevels\")) grade_levels \n    ) as grade_levels\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_sessions": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_sessions", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_sessions.sql", "original_file_path": "models/staging/edfi/stg_edfi_sessions.sql", "unique_id": "model.project.stg_edfi_sessions", "fqn": ["project", "staging", "edfi", "stg_edfi_sessions"], "alias": "stg_edfi_sessions", "checksum": {"name": "sha256", "checksum": "ac58554bdf3b5bafd80e38c6f921f6694d96eb3fa12d3789be131f194d071648"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.375619, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_sessions`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_sessions') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.sessionName') as session_name,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, \"$.termDescriptor\"), '#')[OFFSET(1)] as term_descriptor,\n    cast(json_value(data, \"$.totalInstructionalDays\") as int64) as total_instructional_days,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    array(\n        select as struct\n            struct(\n                split(json_value(grading_periods, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] as grading_period_name,\n                cast(json_value(grading_periods, \"$.gradingPeriodReference.periodSequence\") as int64) as period_sequence,\n                json_value(grading_periods, \"$.gradingPeriodReference.schoolId\") as school_id,\n                json_value(grading_periods, \"$.gradingPeriodReference.schoolYear\") as school_year\n            ) as grading_period_reference\n        from unnest(json_query_array(data, \"$.gradingPeriods\")) grading_periods \n    ) as grading_periods\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_sessions"], ["staging", "base_edfi_sessions"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_sessions"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_sessions.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_sessions`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_sessions` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.sessionName') as session_name,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, \"$.termDescriptor\"), '#')[OFFSET(1)] as term_descriptor,\n    cast(json_value(data, \"$.totalInstructionalDays\") as int64) as total_instructional_days,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    array(\n        select as struct\n            struct(\n                split(json_value(grading_periods, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] as grading_period_name,\n                cast(json_value(grading_periods, \"$.gradingPeriodReference.periodSequence\") as int64) as period_sequence,\n                json_value(grading_periods, \"$.gradingPeriodReference.schoolId\") as school_id,\n                json_value(grading_periods, \"$.gradingPeriodReference.schoolYear\") as school_year\n            ) as grading_period_reference\n        from unnest(json_query_array(data, \"$.gradingPeriods\")) grading_periods \n    ) as grading_periods\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_staff_section_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_staff_section_associations", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_staff_section_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_staff_section_associations.sql", "unique_id": "model.project.stg_edfi_staff_section_associations", "fqn": ["project", "staging", "edfi", "stg_edfi_staff_section_associations"], "alias": "stg_edfi_staff_section_associations", "checksum": {"name": "sha256", "checksum": "da7d3a12f16e7e8f2f1918d1be050bce1c17557e20db325b01580491cd87cec3"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3804264, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_staff_section_associations`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_staff_section_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    split(json_value(data, \"$.classroomPositionDescriptor\"), '#')[OFFSET(1)] as classroom_position_descriptor,\n    cast(json_value(data, '$.highlyQualifiedTeacher') as BOOL) as highly_qualified_teacher,\n    json_value(data, '$.percentageContribution') as percentage_contribution\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_staff_section_associations"], ["staging", "base_edfi_staff_section_associations"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_staff_section_associations"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_staff_section_associations.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_staff_section_associations`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_staff_section_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.staffReference.staffUniqueId') as staff_unique_id\n    ) as staff_reference,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    split(json_value(data, \"$.classroomPositionDescriptor\"), '#')[OFFSET(1)] as classroom_position_descriptor,\n    cast(json_value(data, '$.highlyQualifiedTeacher') as BOOL) as highly_qualified_teacher,\n    json_value(data, '$.percentageContribution') as percentage_contribution\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_student_section_attendance_events": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_student_section_attendance_events", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_student_section_attendance_events.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_section_attendance_events.sql", "unique_id": "model.project.stg_edfi_student_section_attendance_events", "fqn": ["project", "staging", "edfi", "stg_edfi_student_section_attendance_events"], "alias": "stg_edfi_student_section_attendance_events", "checksum": {"name": "sha256", "checksum": "5d216d06f7cded64453dc7a54c46b839a1b9812a6dc283e46d87e55c1d437be5"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.3867953, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_student_section_attendance_events`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_section_attendance_events') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.eventDate')) as event_date,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    array(\n        select as struct \n            struct(\n                json_value(class_periods, \"$.classPeriodReference.classPeriodName\") as class_period_name,\n                json_value(class_periods, '$.classPeriodReference.schoolId') as school_id\n            ) as class_period_reference\n        from unnest(json_query_array(data, \"$.classPeriods\")) class_periods \n    ) as class_periods,\n    json_value(data, '$.arrivalTime') as arrival_time,\n    json_value(data, '$.departureTime') as departure_time,\n    json_value(data, '$.attendanceEventReason') as attendance_event_reason,\n    cast(json_value(data, '$.eventDuration') as float64) as event_duration,\n    cast(json_value(data, '$.sectionAttendanceDuration') as float64) as section_attendance_duration,\n    split(json_value(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] as attendance_event_category_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_student_section_attendance_events"], ["staging", "base_edfi_student_section_attendance_events"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_section_attendance_events"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_section_attendance_events.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_section_attendance_events`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_section_attendance_events` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.eventDate')) as event_date,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    array(\n        select as struct \n            struct(\n                json_value(class_periods, \"$.classPeriodReference.classPeriodName\") as class_period_name,\n                json_value(class_periods, '$.classPeriodReference.schoolId') as school_id\n            ) as class_period_reference\n        from unnest(json_query_array(data, \"$.classPeriods\")) class_periods \n    ) as class_periods,\n    json_value(data, '$.arrivalTime') as arrival_time,\n    json_value(data, '$.departureTime') as departure_time,\n    json_value(data, '$.attendanceEventReason') as attendance_event_reason,\n    cast(json_value(data, '$.eventDuration') as float64) as event_duration,\n    cast(json_value(data, '$.sectionAttendanceDuration') as float64) as section_attendance_duration,\n    split(json_value(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] as attendance_event_category_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_local_education_agencies": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_local_education_agencies", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_local_education_agencies.sql", "original_file_path": "models/staging/edfi/stg_edfi_local_education_agencies.sql", "unique_id": "model.project.stg_edfi_local_education_agencies", "fqn": ["project", "staging", "edfi", "stg_edfi_local_education_agencies"], "alias": "stg_edfi_local_education_agencies", "checksum": {"name": "sha256", "checksum": "566c3a94d7b6d957647c2f8b029b3e46175b488c51f903c815712a54143b1f06"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.7323241, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_local_education_agencies`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_local_education_agencies') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.localEducationAgencyId') as local_education_agency_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_local_education_agencies"], ["staging", "base_edfi_local_education_agencies"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_local_education_agencies"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_local_education_agencies.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_local_education_agencies`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_local_education_agencies` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.localEducationAgencyId') as local_education_agency_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_sections": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_sections", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_sections.sql", "original_file_path": "models/staging/edfi/stg_edfi_sections.sql", "unique_id": "model.project.stg_edfi_sections", "fqn": ["project", "staging", "edfi", "stg_edfi_sections"], "alias": "stg_edfi_sections", "checksum": {"name": "sha256", "checksum": "bf40ddbc4b8481bc49f09e7d369c6927cdd3ac89777f16dc64e0261611394e03"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.39664, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_sections`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_sections') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.sectionIdentifier') as section_identifier,\n    json_value(data, '$.sectionName') as section_name,\n    struct(\n        json_value(data, '$.courseOfferingReference.localCourseCode') as local_course_code,\n        json_value(data, '$.courseOfferingReference.schoolId') as school_id,\n        cast(json_value(data, '$.courseOfferingReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.courseOfferingReference.sessionName') as session_name\n    ) as course_offering_reference,\n    cast(json_value(data, '$.availableCreditConversion') as float64) as available_credit_conversion,\n    cast(json_value(data, '$.availableCredits') as float64) as available_credits,\n    split(json_value(data, '$.availableCreditTypeDescriptor'), '#')[OFFSET(1)] as available_credit_type_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\n    struct(\n        json_value(data, '$.locationReference.classroomIdentificationCode') as classroom_identification_code,\n        json_value(data, '$.locationReference.schoolId') as school_id\n    ) as location_reference,\n    struct(\n        json_value(data, '$.locationSchoolReference.schoolId') as school_id\n    ) as location_school_reference,\n    array(\n        select as struct \n            struct(\n                json_value(class_periods, \"$.classPeriodReference.classPeriodName\") as class_period_name,\n                json_value(class_periods, '$.classPeriodReference.schoolId') as school_id\n            ) as class_period_reference\n        from unnest(json_query_array(data, \"$.classPeriods\")) class_periods \n    ) as class_periods,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_sections"], ["staging", "base_edfi_sections"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_sections"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_sections.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_sections`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_sections` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.sectionIdentifier') as section_identifier,\n    json_value(data, '$.sectionName') as section_name,\n    struct(\n        json_value(data, '$.courseOfferingReference.localCourseCode') as local_course_code,\n        json_value(data, '$.courseOfferingReference.schoolId') as school_id,\n        cast(json_value(data, '$.courseOfferingReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.courseOfferingReference.sessionName') as session_name\n    ) as course_offering_reference,\n    cast(json_value(data, '$.availableCreditConversion') as float64) as available_credit_conversion,\n    cast(json_value(data, '$.availableCredits') as float64) as available_credits,\n    split(json_value(data, '$.availableCreditTypeDescriptor'), '#')[OFFSET(1)] as available_credit_type_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\n    struct(\n        json_value(data, '$.locationReference.classroomIdentificationCode') as classroom_identification_code,\n        json_value(data, '$.locationReference.schoolId') as school_id\n    ) as location_reference,\n    struct(\n        json_value(data, '$.locationSchoolReference.schoolId') as school_id\n    ) as location_school_reference,\n    array(\n        select as struct \n            struct(\n                json_value(class_periods, \"$.classPeriodReference.classPeriodName\") as class_period_name,\n                json_value(class_periods, '$.classPeriodReference.schoolId') as school_id\n            ) as class_period_reference\n        from unnest(json_query_array(data, \"$.classPeriods\")) class_periods \n    ) as class_periods,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_student_education_organization_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_student_education_organization_associations", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_student_education_organization_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_education_organization_associations.sql", "unique_id": "model.project.stg_edfi_student_education_organization_associations", "fqn": ["project", "staging", "edfi", "stg_edfi_student_education_organization_associations"], "alias": "stg_edfi_student_education_organization_associations", "checksum": {"name": "sha256", "checksum": "c0fc672d7256f286974fb9b10b8f8c8158ddb0a53ba182c7d7ec369fde76f037"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.401396, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_student_education_organization_associations`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_education_organization_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            LOWER(json_value(email, \"$.electronicMailAddress\")) as address,\n            split(json_value(email, \"$.electronicMailTypeDescriptor\"), '#')[OFFSET(1)] as type_descriptor,\n        from unnest(json_query_array(data, \"$.electronicMails\")) email \n    ) as electronic_mail,\n    split(json_value(data, '$.limitedEnglishProficiencyDescriptor'), '#')[OFFSET(1)] as limited_english_proficiency_descriptor,\n    cast(json_value(data, '$.hispanicLatinoEthnicity') as BOOL) as hispanic_latino_ethnicity,\n    split(json_value(data, '$.sexDescriptor'), '#')[OFFSET(1)] as sex_descriptor,\n    array(\n        select as struct \n            json_value(student_indicators, \"$.indicatorName\") as name,\n            json_value(student_indicators, \"$.designatedBy\") as designated_by,\n            json_value(student_indicators, \"$.indicator\") as indicator,\n            json_value(student_indicators, \"$.indicatorGroup\") as indicator_group,\n        from unnest(json_query_array(data, \"$.studentIndicators\")) student_indicators \n    ) as student_indicators,\n    array(\n        select as struct \n            split(json_value(cohort_years, '$.cohortYearTypeDescriptor'), '#')[OFFSET(1)] as cohort_type_descriptor,\n            split(json_value(cohort_years, '$.termDescriptor'), '#')[OFFSET(1)] as term_descriptor,\n            json_value(cohort_years, \"$.schoolYearTypeReference.schoolYear\") as school_year,\n        from unnest(json_query_array(data, \"$.cohortYears\")) cohort_years \n    ) as cohort_years,\n    array(\n        select as struct \n            split(json_value(disabilities, '$.disabilityDescriptor'), '#')[OFFSET(1)] as disability_descriptor,\n            split(json_value(disabilities, '$.disabilityDeterminationSourceTypeDescriptor'), '#')[OFFSET(1)] as disability_determination_source_type_descriptor,\n            json_value(disabilities, \"$.disabilityDiagnosis\") as disability_diagnosis,\n        from unnest(json_query_array(data, \"$.disabilities\")) disabilities \n    ) as disabilities,\n    array(\n        select as struct \n            split(json_value(languages, '$.languageDescriptor'), '#')[OFFSET(1)] as language_descriptor,\n            array(\n                select as struct \n                    split(json_value(uses, '$.languageUseDescriptor'), '#')[OFFSET(1)] as language_use_descriptor\n                from unnest(json_query_array(languages, '$.uses')) as uses\n            ) as uses\n        from unnest(json_query_array(data, \"$.languages\")) languages \n    ) as languages,\n    array(\n        select as struct \n            split(json_value(races, \"$.raceDescriptor\"), '#')[OFFSET(1)] as race_descriptor\n        from unnest(json_query_array(data, \"$.races\")) races \n    ) as races,\n    array(\n        select as struct\n            json_value(student_identification_codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(student_identification_codes, \"$.identificationCode\") as identification_code,\n            split(json_value(student_identification_codes, \"$.studentIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as student_identification_system_descriptor\n        from unnest(json_query_array(data, \"$.studentIdentificationCodes\")) student_identification_codes \n    ) as student_identification_codes\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_student_education_organization_associations"], ["staging", "base_edfi_student_education_organization_associations"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_education_organization_associations"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_education_organization_associations.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_education_organization_associations`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_education_organization_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    array(\n        select as struct \n            LOWER(json_value(email, \"$.electronicMailAddress\")) as address,\n            split(json_value(email, \"$.electronicMailTypeDescriptor\"), '#')[OFFSET(1)] as type_descriptor,\n        from unnest(json_query_array(data, \"$.electronicMails\")) email \n    ) as electronic_mail,\n    split(json_value(data, '$.limitedEnglishProficiencyDescriptor'), '#')[OFFSET(1)] as limited_english_proficiency_descriptor,\n    cast(json_value(data, '$.hispanicLatinoEthnicity') as BOOL) as hispanic_latino_ethnicity,\n    split(json_value(data, '$.sexDescriptor'), '#')[OFFSET(1)] as sex_descriptor,\n    array(\n        select as struct \n            json_value(student_indicators, \"$.indicatorName\") as name,\n            json_value(student_indicators, \"$.designatedBy\") as designated_by,\n            json_value(student_indicators, \"$.indicator\") as indicator,\n            json_value(student_indicators, \"$.indicatorGroup\") as indicator_group,\n        from unnest(json_query_array(data, \"$.studentIndicators\")) student_indicators \n    ) as student_indicators,\n    array(\n        select as struct \n            split(json_value(cohort_years, '$.cohortYearTypeDescriptor'), '#')[OFFSET(1)] as cohort_type_descriptor,\n            split(json_value(cohort_years, '$.termDescriptor'), '#')[OFFSET(1)] as term_descriptor,\n            json_value(cohort_years, \"$.schoolYearTypeReference.schoolYear\") as school_year,\n        from unnest(json_query_array(data, \"$.cohortYears\")) cohort_years \n    ) as cohort_years,\n    array(\n        select as struct \n            split(json_value(disabilities, '$.disabilityDescriptor'), '#')[OFFSET(1)] as disability_descriptor,\n            split(json_value(disabilities, '$.disabilityDeterminationSourceTypeDescriptor'), '#')[OFFSET(1)] as disability_determination_source_type_descriptor,\n            json_value(disabilities, \"$.disabilityDiagnosis\") as disability_diagnosis,\n        from unnest(json_query_array(data, \"$.disabilities\")) disabilities \n    ) as disabilities,\n    array(\n        select as struct \n            split(json_value(languages, '$.languageDescriptor'), '#')[OFFSET(1)] as language_descriptor,\n            array(\n                select as struct \n                    split(json_value(uses, '$.languageUseDescriptor'), '#')[OFFSET(1)] as language_use_descriptor\n                from unnest(json_query_array(languages, '$.uses')) as uses\n            ) as uses\n        from unnest(json_query_array(data, \"$.languages\")) languages \n    ) as languages,\n    array(\n        select as struct \n            split(json_value(races, \"$.raceDescriptor\"), '#')[OFFSET(1)] as race_descriptor\n        from unnest(json_query_array(data, \"$.races\")) races \n    ) as races,\n    array(\n        select as struct\n            json_value(student_identification_codes, \"$.assigningOrganizationIdentificationCode\") as assigning_organization_identification_code,\n            json_value(student_identification_codes, \"$.identificationCode\") as identification_code,\n            split(json_value(student_identification_codes, \"$.studentIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as student_identification_system_descriptor\n        from unnest(json_query_array(data, \"$.studentIdentificationCodes\")) student_identification_codes \n    ) as student_identification_codes\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_student_school_attendance_events": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_student_school_attendance_events", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_student_school_attendance_events.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_school_attendance_events.sql", "unique_id": "model.project.stg_edfi_student_school_attendance_events", "fqn": ["project", "staging", "edfi", "stg_edfi_student_school_attendance_events"], "alias": "stg_edfi_student_school_attendance_events", "checksum": {"name": "sha256", "checksum": "6c88b8543ad4b3e9359ab29a2e8c02b7470d984a5b83d1f48630a9260087505a"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.40672, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_student_school_attendance_events`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_school_attendance_events') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.eventDate')) as event_date,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.sessionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sessionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sessionReference.sessionName') as session_name\n    ) as session_reference,\n    json_value(data, '$.arrivalTime') as arrival_time,\n    json_value(data, '$.attendanceEventReason') as attendance_event_reason,\n    json_value(data, '$.departureTime') as departure_time,\n    cast(json_value(data, '$.eventDuration') as float64) as event_duration,\n    cast(json_value(data, '$.schoolAttendanceDuration') as float64) as school_attendance_duration,\n    split(json_value(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] as attendance_event_category_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_student_school_attendance_events"], ["staging", "base_edfi_student_school_attendance_events"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_school_attendance_events"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_school_attendance_events.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_school_attendance_events`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_school_attendance_events` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    parse_date('%Y-%m-%d', json_value(data, '$.eventDate')) as event_date,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.sessionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sessionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sessionReference.sessionName') as session_name\n    ) as session_reference,\n    json_value(data, '$.arrivalTime') as arrival_time,\n    json_value(data, '$.attendanceEventReason') as attendance_event_reason,\n    json_value(data, '$.departureTime') as departure_time,\n    cast(json_value(data, '$.eventDuration') as float64) as event_duration,\n    cast(json_value(data, '$.schoolAttendanceDuration') as float64) as school_attendance_duration,\n    split(json_value(data, '$.attendanceEventCategoryDescriptor'), '#')[OFFSET(1)] as attendance_event_category_descriptor,\n    split(json_value(data, '$.educationalEnvironmentDescriptor'), '#')[OFFSET(1)] as educational_environment_descriptor,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_student_school_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_student_school_associations", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_student_school_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_school_associations.sql", "unique_id": "model.project.stg_edfi_student_school_associations", "fqn": ["project", "staging", "edfi", "stg_edfi_student_school_associations"], "alias": "stg_edfi_student_school_associations", "checksum": {"name": "sha256", "checksum": "d04dbcea6dae7dc2f47ae077db5ca066cb208bcfcd143083e76a6b37dad9d613"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.4116125, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_student_school_associations`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_school_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    json_value(data, '$.id') as id,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, '$.entryTypeDescriptor'), '#')[OFFSET(1)] as entry_type_descriptor,\n    split(json_value(data, '$.entryGradeLevelDescriptor'), '#')[OFFSET(1)] as entry_grade_level_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, '$.entryDate')) as entry_date,\n    parse_date('%Y-%m-%d', json_value(data, '$.exitWithdrawDate')) as exit_withdraw_date,\n    split(json_value(data, '$.exitWithdrawTypeDescriptor'), '#')[OFFSET(1)] as exit_withdraw_type_descriptor,\n    cast(json_value(data, '$.fullTimeEquivalency') as float64) as full_time_equivalency,\n    cast(json_value(data, '$.primarySchool') as BOOL) as primary_school,\n    cast(json_value(data, '$.repeatGradeIndicator') as BOOL) as repeat_grade_indicator,\n    cast(json_value(data, '$.schoolChoiceTransfer') as BOOL) as school_choice_transfer,\n    cast(json_value(data, '$.termCompletionIndicator') as BOOL) as term_completion_indicator\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_student_school_associations"], ["staging", "base_edfi_student_school_associations"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_school_associations"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_school_associations.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_school_associations`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_school_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    json_value(data, '$.id') as id,\n    struct(\n        json_value(data, '$.schoolReference.schoolId') as school_id\n    ) as school_reference,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        cast(json_value(data, '$.schoolYearTypeReference.schoolYear') as int64) as school_year\n    ) as school_year_type_reference,\n    split(json_value(data, '$.entryTypeDescriptor'), '#')[OFFSET(1)] as entry_type_descriptor,\n    split(json_value(data, '$.entryGradeLevelDescriptor'), '#')[OFFSET(1)] as entry_grade_level_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, '$.entryDate')) as entry_date,\n    parse_date('%Y-%m-%d', json_value(data, '$.exitWithdrawDate')) as exit_withdraw_date,\n    split(json_value(data, '$.exitWithdrawTypeDescriptor'), '#')[OFFSET(1)] as exit_withdraw_type_descriptor,\n    cast(json_value(data, '$.fullTimeEquivalency') as float64) as full_time_equivalency,\n    cast(json_value(data, '$.primarySchool') as BOOL) as primary_school,\n    cast(json_value(data, '$.repeatGradeIndicator') as BOOL) as repeat_grade_indicator,\n    cast(json_value(data, '$.schoolChoiceTransfer') as BOOL) as school_choice_transfer,\n    cast(json_value(data, '$.termCompletionIndicator') as BOOL) as term_completion_indicator\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_schools": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_schools", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_schools.sql", "original_file_path": "models/staging/edfi/stg_edfi_schools.sql", "unique_id": "model.project.stg_edfi_schools", "fqn": ["project", "staging", "edfi", "stg_edfi_schools"], "alias": "stg_edfi_schools", "checksum": {"name": "sha256", "checksum": "3220bf77b9ac024cff48ffc17f549c964d7f82ee281d7410ce099fed3e644661"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {"school_id": {"name": "school_id", "description": "Unique school identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.7328184, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_schools`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_schools') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.localEducationAgencyReference.localEducationAgencyId') as local_education_agency_id,\n    json_value(data, '$.schoolId')          as school_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution,\n    split(json_value(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] as school_type_descriptor,\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_schools"], ["staging", "base_edfi_schools"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_schools"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_schools.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_schools`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_schools` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.localEducationAgencyReference.localEducationAgencyId') as local_education_agency_id,\n    json_value(data, '$.schoolId')          as school_id,\n    json_value(data, '$.nameOfInstitution') as name_of_institution,\n    split(json_value(data, '$.schoolTypeDescriptor'), '#')[OFFSET(1)] as school_type_descriptor,\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_student_section_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_student_section_associations", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_student_section_associations.sql", "original_file_path": "models/staging/edfi/stg_edfi_student_section_associations.sql", "unique_id": "model.project.stg_edfi_student_section_associations", "fqn": ["project", "staging", "edfi", "stg_edfi_student_section_associations"], "alias": "stg_edfi_student_section_associations", "checksum": {"name": "sha256", "checksum": "732011f4acfa77cb35c6af7bf4c3be508be04cce8234830a90861125906761bc"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.421676, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_student_section_associations`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_student_section_associations') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    split(json_value(data, \"$.attemptStatusDescriptor\"), '#')[OFFSET(1)] as attempt_status_descriptor,\n    cast(json_value(data, '$.homeroomIndicator') as BOOL) as homeroom_indicator,\n    split(json_value(data, \"$.repeatIdentifierDescriptor\"), '#')[OFFSET(1)] as repeat_identifier_descriptor,\n    cast(json_value(data, '$.teacherStudentDataLinkExclusion') as BOOL) as teacher_student_data_link_exclusion\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_student_section_associations"], ["staging", "base_edfi_student_section_associations"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_student_section_associations"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_student_section_associations.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_section_associations`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_student_section_associations` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    struct(\n        json_value(data, '$.studentReference.studentUniqueId') as student_unique_id\n    ) as student_reference,\n    struct(\n        json_value(data, '$.sectionReference.localCourseCode') as local_course_code,\n        json_value(data, '$.sectionReference.schoolId') as school_id,\n        cast(json_value(data, '$.sectionReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.sectionReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.sectionReference.sessionName') as session_name\n    ) as section_reference,\n    parse_date('%Y-%m-%d', json_value(data, \"$.beginDate\")) as begin_date,\n    parse_date('%Y-%m-%d', json_value(data, \"$.endDate\")) as end_date,\n    split(json_value(data, \"$.attemptStatusDescriptor\"), '#')[OFFSET(1)] as attempt_status_descriptor,\n    cast(json_value(data, '$.homeroomIndicator') as BOOL) as homeroom_indicator,\n    split(json_value(data, \"$.repeatIdentifierDescriptor\"), '#')[OFFSET(1)] as repeat_identifier_descriptor,\n    cast(json_value(data, '$.teacherStudentDataLinkExclusion') as BOOL) as teacher_student_data_link_exclusion\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_courses": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_courses", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_courses.sql", "original_file_path": "models/staging/edfi/stg_edfi_courses.sql", "unique_id": "model.project.stg_edfi_courses", "fqn": ["project", "staging", "edfi", "stg_edfi_courses"], "alias": "stg_edfi_courses", "checksum": {"name": "sha256", "checksum": "a1b0bc2e9217cdfced6c7c4a53c2a1e7b847663f25d620d570153a6ca02a1e02"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "This educational entity represents the organization of subject matter and related learning experiences provided for the instruction of students on a regular or systematic basis.", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": "project://models/staging/edfi/stg_edfi.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.7319129, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_courses`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_courses') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.courseCode') as course_code,\n    json_value(data, '$.courseTitle') as course_title,\n    json_value(data, '$.courseDescription') as course_description,\n    split(json_value(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n    split(json_value(data, \"$.careerPathwayDescriptor\"), '#')[OFFSET(1)] as career_pathway_descriptor,\n    split(json_value(data, \"$.courseDefinedByDescriptor\"), '#')[OFFSET(1)] as course_defined_by_descriptor,\n    split(json_value(data, \"$.courseGPAApplicabilityDescriptor\"), '#')[OFFSET(1)] as course_gpa_applicability_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, \"$.dateCourseAdopted\")) as date_course_adopted,\n    cast(json_value(data, \"$.highSchoolCourseRequirement\") as BOOL) as high_school_course_requirement,\n    cast(json_value(data, \"$.maxCompletionsForCredit\") as float64) as max_completions_for_credit,\n    cast(json_value(data, \"$.maximumAvailableCreditConversion\") as float64) as maximum_available_credit_conversion,\n    cast(json_value(data, \"$.maximumAvailableCredits\") as float64) as maximum_available_credits,\n    cast(json_value(data, \"$.minimumAvailableCreditConversion\") as float64) as minimum_available_credit_conversion,\n    cast(json_value(data, \"$.minimumAvailableCredits\") as float64) as minimum_available_credits,\n    cast(json_value(data, \"$.numberOfParts\") as int64) as number_of_parts,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(levels, \"$.competencyLevelDescriptor\"), '#')[OFFSET(1)] as competency_level_descriptor,\n        from unnest(json_query_array(data, \"$.competencyLevels\")) levels \n    ) as competency_levels,\n    array(\n        select as struct \n            split(json_value(codes, \"$.identificationCodes.courseIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as course_identification_system_descriptor,\n            split(json_value(codes, \"$.identificationCodes.assigningOrganizationIdentificationCode\"), '#')[OFFSET(1)] as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCodes.courseCatalogURL\") as course_catalog_url,\n            json_value(codes, \"$.identificationCodes.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_courses"], ["staging", "base_edfi_courses"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_courses"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_courses.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_courses`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_courses` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    json_value(data, '$.courseCode') as course_code,\n    json_value(data, '$.courseTitle') as course_title,\n    json_value(data, '$.courseDescription') as course_description,\n    split(json_value(data, \"$.academicSubjectDescriptor\"), '#')[OFFSET(1)] as academic_subject_descriptor,\n    split(json_value(data, \"$.careerPathwayDescriptor\"), '#')[OFFSET(1)] as career_pathway_descriptor,\n    split(json_value(data, \"$.courseDefinedByDescriptor\"), '#')[OFFSET(1)] as course_defined_by_descriptor,\n    split(json_value(data, \"$.courseGPAApplicabilityDescriptor\"), '#')[OFFSET(1)] as course_gpa_applicability_descriptor,\n    parse_date('%Y-%m-%d', json_value(data, \"$.dateCourseAdopted\")) as date_course_adopted,\n    cast(json_value(data, \"$.highSchoolCourseRequirement\") as BOOL) as high_school_course_requirement,\n    cast(json_value(data, \"$.maxCompletionsForCredit\") as float64) as max_completions_for_credit,\n    cast(json_value(data, \"$.maximumAvailableCreditConversion\") as float64) as maximum_available_credit_conversion,\n    cast(json_value(data, \"$.maximumAvailableCredits\") as float64) as maximum_available_credits,\n    cast(json_value(data, \"$.minimumAvailableCreditConversion\") as float64) as minimum_available_credit_conversion,\n    cast(json_value(data, \"$.minimumAvailableCredits\") as float64) as minimum_available_credits,\n    cast(json_value(data, \"$.numberOfParts\") as int64) as number_of_parts,\n    struct(\n        json_value(data, '$.educationOrganizationReference.educationOrganizationId') as education_organization_id\n    ) as education_organization_reference,\n    array(\n        select as struct \n            split(json_value(levels, \"$.competencyLevelDescriptor\"), '#')[OFFSET(1)] as competency_level_descriptor,\n        from unnest(json_query_array(data, \"$.competencyLevels\")) levels \n    ) as competency_levels,\n    array(\n        select as struct \n            split(json_value(codes, \"$.identificationCodes.courseIdentificationSystemDescriptor\"), '#')[OFFSET(1)] as course_identification_system_descriptor,\n            split(json_value(codes, \"$.identificationCodes.assigningOrganizationIdentificationCode\"), '#')[OFFSET(1)] as assigning_organization_identification_code,\n            json_value(codes, \"$.identificationCodes.courseCatalogURL\") as course_catalog_url,\n            json_value(codes, \"$.identificationCodes.identificationCode\") as identification_code\n        from unnest(json_query_array(data, \"$.identificationCodes\")) codes \n    ) as identification_codes\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.project.stg_edfi_grades": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "stg_edfi_grades", "resource_type": "model", "package_name": "project", "path": "staging/edfi/stg_edfi_grades.sql", "original_file_path": "models/staging/edfi/stg_edfi_grades.sql", "unique_id": "model.project.stg_edfi_grades", "fqn": ["project", "staging", "edfi", "stg_edfi_grades"], "alias": "stg_edfi_grades", "checksum": {"name": "sha256", "checksum": "cf7e1a9a82f6c0c0d448b75c74b66fc46fdaa9d6be8c11cb4e173d95ed0b154f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": ["edfi"], "meta": {}, "group": "edfi_staging", "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "labels": {"edfi_version": "5_3"}, "post-hook": [], "pre-hook": []}, "tags": ["edfi"], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "staging", "tags": "edfi", "group": "edfi_staging", "labels": {"edfi_version": "5_3"}}, "created_at": 1699396144.4314835, "relation_name": "`development-323217`.`dagster_dev_staging`.`stg_edfi_grades`", "raw_code": "{{ retrieve_edfi_records_from_data_lake('base_edfi_grades') }}\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    cast(json_value(data, '$.numericGradeEarned') as float64) as numeric_grade_earned,\n    json_value(data, '$.letterGradeEarned') as letter_grade_earned,\n    split(json_value(data, '$.performanceBaseConversionDescriptor'), '#')[OFFSET(1)] as performance_base_conversion_descriptor, \n    split(json_value(data, '$.gradeTypeDescriptor'), '#')[OFFSET(1)] as grade_type_descriptor, \n    json_value(data, '$.diagnosticStatement') as diagnostic_statement,\n    struct(\n        split(json_value(data, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] as grading_period_name,\n        cast(json_value(data, '$.gradingPeriodReference.periodSequence') as int64) as period_sequence,\n        json_value(data, '$.gradingPeriodReference.schoolId') as school_id,\n        cast(json_value(data, '$.gradingPeriodReference.schoolYear') as int64) as school_year\n    ) as grading_period_reference,\n    struct(\n        EXTRACT(DATE from PARSE_TIMESTAMP('%Y-%m-%dT%TZ', json_value(data, '$.studentSectionAssociationReference.beginDate'))) as begin_date,\n        json_value(data, '$.studentSectionAssociationReference.localCourseCode') as local_course_code,\n        json_value(data, '$.studentSectionAssociationReference.schoolId') as school_id,\n        cast(json_value(data, '$.studentSectionAssociationReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.studentSectionAssociationReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.studentSectionAssociationReference.sessionName') as session_name,\n        json_value(data, '$.studentSectionAssociationReference.studentUniqueId') as student_unique_id\n    ) as student_section_association_reference\nfrom records\n\n{{ remove_edfi_deletes_and_duplicates() }}", "language": "sql", "refs": [], "sources": [["staging", "base_edfi_grades"], ["staging", "base_edfi_grades"]], "metrics": [], "depends_on": {"macros": ["macro.project.retrieve_edfi_records_from_data_lake", "macro.project.remove_edfi_deletes_and_duplicates"], "nodes": ["source.project.staging.base_edfi_grades"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi_grades.sql", "compiled": true, "compiled_code": "\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_grades`\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from `development-323217`.`dagster_dev_staging`.`base_edfi_grades` base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n\n\nselect\n    date_extracted                          as date_extracted,\n    school_year                             as school_year,\n    id                                      as id,\n    cast(json_value(data, '$.numericGradeEarned') as float64) as numeric_grade_earned,\n    json_value(data, '$.letterGradeEarned') as letter_grade_earned,\n    split(json_value(data, '$.performanceBaseConversionDescriptor'), '#')[OFFSET(1)] as performance_base_conversion_descriptor, \n    split(json_value(data, '$.gradeTypeDescriptor'), '#')[OFFSET(1)] as grade_type_descriptor, \n    json_value(data, '$.diagnosticStatement') as diagnostic_statement,\n    struct(\n        split(json_value(data, '$.gradingPeriodReference.gradingPeriodDescriptor'), '#')[OFFSET(1)] as grading_period_name,\n        cast(json_value(data, '$.gradingPeriodReference.periodSequence') as int64) as period_sequence,\n        json_value(data, '$.gradingPeriodReference.schoolId') as school_id,\n        cast(json_value(data, '$.gradingPeriodReference.schoolYear') as int64) as school_year\n    ) as grading_period_reference,\n    struct(\n        EXTRACT(DATE from PARSE_TIMESTAMP('%Y-%m-%dT%TZ', json_value(data, '$.studentSectionAssociationReference.beginDate'))) as begin_date,\n        json_value(data, '$.studentSectionAssociationReference.localCourseCode') as local_course_code,\n        json_value(data, '$.studentSectionAssociationReference.schoolId') as school_id,\n        cast(json_value(data, '$.studentSectionAssociationReference.schoolYear') as int64) as school_year,\n        json_value(data, '$.studentSectionAssociationReference.sectionIdentifier') as section_identifier,\n        json_value(data, '$.studentSectionAssociationReference.sessionName') as session_name,\n        json_value(data, '$.studentSectionAssociationReference.studentUniqueId') as student_unique_id\n    ) as student_section_association_reference\nfrom records\n\n\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "resource_type": "test", "package_name": "project", "path": "relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315.sql", "original_file_path": "models/marts/attendance/attendance.yml", "unique_id": "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0", "fqn": ["project", "marts", "attendance", "relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "alias": "relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315"}, "created_at": 1699396144.5435853, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315\") }}", "language": "sql", "refs": [{"name": "dim_local_education_agency", "package": null, "version": null}, {"name": "fct_student_attendance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.fct_student_attendance"]}, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/relationships_fct_student_atte_ea95d16954be969d7d4d1cb3ebf85315.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `development-323217`.`dagster_dev_attendance`.`fct_student_attendance`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "local_education_agency_key", "file_key_name": "models.fct_student_attendance", "attached_node": "model.project.fct_student_attendance"}, "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_fct_student_attendance_school_key__school_key__ref_dim_school_", "resource_type": "test", "package_name": "project", "path": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823.sql", "original_file_path": "models/marts/attendance/attendance.yml", "unique_id": "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "fqn": ["project", "marts", "attendance", "relationships_fct_student_attendance_school_key__school_key__ref_dim_school_"], "alias": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823"}, "created_at": 1699396144.553235, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823\") }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}, {"name": "fct_student_attendance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.fct_student_attendance"]}, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/relationships_fct_student_atte_89f0134bdd72be3d225343748fa5e823.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `development-323217`.`dagster_dev_attendance`.`fct_student_attendance`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_key", "file_key_name": "models.fct_student_attendance", "attached_node": "model.project.fct_student_attendance"}, "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_fct_student_attendance_student_key__student_key__ref_dim_student_", "resource_type": "test", "package_name": "project", "path": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885.sql", "original_file_path": "models/marts/attendance/attendance.yml", "unique_id": "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a", "fqn": ["project", "marts", "attendance", "relationships_fct_student_attendance_student_key__student_key__ref_dim_student_"], "alias": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885"}, "created_at": 1699396144.5576873, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885\") }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}, {"name": "fct_student_attendance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.fct_student_attendance"]}, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/relationships_fct_student_atte_97f050ce2f6cd6a21383bb14e9543885.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `development-323217`.`dagster_dev_attendance`.`fct_student_attendance`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "student_key", "file_key_name": "models.fct_student_attendance", "attached_node": "model.project.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_school_year.c69c139be1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_fct_student_attendance_school_year", "resource_type": "test", "package_name": "project", "path": "not_null_fct_student_attendance_school_year.sql", "original_file_path": "models/marts/attendance/attendance.yml", "unique_id": "test.project.not_null_fct_student_attendance_school_year.c69c139be1", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_school_year"], "alias": "not_null_fct_student_attendance_school_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.5620184, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_student_attendance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendance_school_year.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect school_year\nfrom `development-323217`.`dagster_dev_attendance`.`fct_student_attendance`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_year", "file_key_name": "models.fct_student_attendance", "attached_node": "model.project.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_date.1c7057eb63": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_fct_student_attendance_date", "resource_type": "test", "package_name": "project", "path": "not_null_fct_student_attendance_date.sql", "original_file_path": "models/marts/attendance/attendance.yml", "unique_id": "test.project.not_null_fct_student_attendance_date.1c7057eb63", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_date"], "alias": "not_null_fct_student_attendance_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.564054, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_student_attendance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendance_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `development-323217`.`dagster_dev_attendance`.`fct_student_attendance`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date", "file_key_name": "models.fct_student_attendance", "attached_node": "model.project.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_attendance_event_category_descriptor", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_fct_student_attendance_school_attendance_event_category_descriptor", "resource_type": "test", "package_name": "project", "path": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061.sql", "original_file_path": "models/marts/attendance/attendance.yml", "unique_id": "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_school_attendance_event_category_descriptor"], "alias": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061"}, "created_at": 1699396144.565843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061\") }}", "language": "sql", "refs": [{"name": "fct_student_attendance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendanc_d9a013f35bc62a03a0069287b90a3061.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect school_attendance_event_category_descriptor\nfrom `development-323217`.`dagster_dev_attendance`.`fct_student_attendance`\nwhere school_attendance_event_category_descriptor is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_attendance_event_category_descriptor", "file_key_name": "models.fct_student_attendance", "attached_node": "model.project.fct_student_attendance"}, "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_duration", "model": "{{ get_where_subquery(ref('fct_student_attendance')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_fct_student_attendance_event_duration", "resource_type": "test", "package_name": "project", "path": "not_null_fct_student_attendance_event_duration.sql", "original_file_path": "models/marts/attendance/attendance.yml", "unique_id": "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51", "fqn": ["project", "marts", "attendance", "not_null_fct_student_attendance_event_duration"], "alias": "not_null_fct_student_attendance_event_duration", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.567598, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_student_attendance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.fct_student_attendance"]}, "compiled_path": "target/compiled/project/models/marts/attendance/attendance.yml/not_null_fct_student_attendance_event_duration.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_duration\nfrom `development-323217`.`dagster_dev_attendance`.`fct_student_attendance`\nwhere event_duration is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "event_duration", "file_key_name": "models.fct_student_attendance", "attached_node": "model.project.fct_student_attendance"}, "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('rls_user_student_data_authorization')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_", "resource_type": "test", "package_name": "project", "path": "relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed.sql", "original_file_path": "models/marts/row_level_security/row_level_security.yml", "unique_id": "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6", "fqn": ["project", "marts", "row_level_security", "relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_"], "alias": "relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed"}, "created_at": 1699396144.5707603, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed\") }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}, {"name": "rls_user_student_data_authorization", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.rls_user_student_data_authorization"]}, "compiled_path": "target/compiled/project/models/marts/row_level_security/row_level_security.yml/relationships_rls_user_student_95bbd76f907cc43c4b9d27cc2096f3ed.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `development-323217`.`dagster_dev_row_level_security`.`rls_user_student_data_authorization`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "student_key", "file_key_name": "models.rls_user_student_data_authorization", "attached_node": "model.project.rls_user_student_data_authorization"}, "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "staff_group_key || '-' || staff_key", "model": "{{ get_where_subquery(ref('bridge_staff_group')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_bridge_staff_group_staff_group_key_staff_key", "resource_type": "test", "package_name": "project", "path": "unique_bridge_staff_group_staff_group_key_staff_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2", "fqn": ["project", "marts", "core", "unique_bridge_staff_group_staff_group_key_staff_key"], "alias": "unique_bridge_staff_group_staff_group_key_staff_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.5967448, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bridge_staff_group", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.bridge_staff_group"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_bridge_staff_group_staff_group_key_staff_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select staff_group_key || '-' || staff_key as unique_field\n  from `development-323217`.`dagster_dev_core`.`bridge_staff_group`\n  where staff_group_key || '-' || staff_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.bridge_staff_group", "attached_node": "model.project.bridge_staff_group"}, "test.project.unique_dim_date_date.dd069a8d31": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_date_date", "resource_type": "test", "package_name": "project", "path": "unique_dim_date_date.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_date_date.dd069a8d31", "fqn": ["project", "marts", "core", "unique_dim_date_date"], "alias": "unique_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.598693, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_date"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_date_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select date as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_date`\n  where date is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date", "file_key_name": "models.dim_date", "attached_node": "model.project.dim_date"}, "test.project.not_null_dim_date_date.78f11e7735": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('dim_date')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_date_date", "resource_type": "test", "package_name": "project", "path": "not_null_dim_date_date.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_date_date.78f11e7735", "fqn": ["project", "marts", "core", "not_null_dim_date_date"], "alias": "not_null_dim_date_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6004708, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_date"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_date_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom `development-323217`.`dagster_dev_core`.`dim_date`\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "date", "file_key_name": "models.dim_date", "attached_node": "model.project.dim_date"}, "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "grading_period_key", "model": "{{ get_where_subquery(ref('dim_grading_period')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_grading_period_grading_period_key", "resource_type": "test", "package_name": "project", "path": "unique_dim_grading_period_grading_period_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec", "fqn": ["project", "marts", "core", "unique_dim_grading_period_grading_period_key"], "alias": "unique_dim_grading_period_grading_period_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.602249, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_grading_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_grading_period"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_grading_period_grading_period_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select grading_period_key as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_grading_period`\n  where grading_period_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "grading_period_key", "file_key_name": "models.dim_grading_period", "attached_node": "model.project.dim_grading_period"}, "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "grading_period_key", "model": "{{ get_where_subquery(ref('dim_grading_period')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_grading_period_grading_period_key", "resource_type": "test", "package_name": "project", "path": "not_null_dim_grading_period_grading_period_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d", "fqn": ["project", "marts", "core", "not_null_dim_grading_period_grading_period_key"], "alias": "not_null_dim_grading_period_grading_period_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6040142, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_grading_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_grading_period"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_grading_period_grading_period_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect grading_period_key\nfrom `development-323217`.`dagster_dev_core`.`dim_grading_period`\nwhere grading_period_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "grading_period_key", "file_key_name": "models.dim_grading_period", "attached_node": "model.project.dim_grading_period"}, "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_grading_period')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_dim_grading_period_school_key__school_key__ref_dim_school_", "resource_type": "test", "package_name": "project", "path": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "fqn": ["project", "marts", "core", "relationships_dim_grading_period_school_key__school_key__ref_dim_school_"], "alias": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681"}, "created_at": 1699396144.6058178, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681\") }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}, {"name": "dim_grading_period", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_grading_period"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_grading_peri_bf5f9244b2f4169cae483073263d2681.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `development-323217`.`dagster_dev_core`.`dim_grading_period`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_key", "file_key_name": "models.dim_grading_period", "attached_node": "model.project.dim_grading_period"}, "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_local_education_agency_local_education_agency_key", "resource_type": "test", "package_name": "project", "path": "unique_dim_local_education_agency_local_education_agency_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69", "fqn": ["project", "marts", "core", "unique_dim_local_education_agency_local_education_agency_key"], "alias": "unique_dim_local_education_agency_local_education_agency_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6104167, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_local_education_agency", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_local_education_agency_local_education_agency_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select local_education_agency_key as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_local_education_agency`\n  where local_education_agency_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "local_education_agency_key", "file_key_name": "models.dim_local_education_agency", "attached_node": "model.project.dim_local_education_agency"}, "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_local_education_agency_local_education_agency_key", "resource_type": "test", "package_name": "project", "path": "not_null_dim_local_education_agency_local_education_agency_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d", "fqn": ["project", "marts", "core", "not_null_dim_local_education_agency_local_education_agency_key"], "alias": "not_null_dim_local_education_agency_local_education_agency_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6122816, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_local_education_agency", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_local_education_agency_local_education_agency_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect local_education_agency_key\nfrom `development-323217`.`dagster_dev_core`.`dim_local_education_agency`\nwhere local_education_agency_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "local_education_agency_key", "file_key_name": "models.dim_local_education_agency", "attached_node": "model.project.dim_local_education_agency"}, "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "local_education_agency_id", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_local_education_agency_local_education_agency_id", "resource_type": "test", "package_name": "project", "path": "unique_dim_local_education_agency_local_education_agency_id.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627", "fqn": ["project", "marts", "core", "unique_dim_local_education_agency_local_education_agency_id"], "alias": "unique_dim_local_education_agency_local_education_agency_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6140406, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_local_education_agency", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_local_education_agency_local_education_agency_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select local_education_agency_id as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_local_education_agency`\n  where local_education_agency_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "local_education_agency_id", "file_key_name": "models.dim_local_education_agency", "attached_node": "model.project.dim_local_education_agency"}, "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "local_education_agency_id", "model": "{{ get_where_subquery(ref('dim_local_education_agency')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_local_education_agency_local_education_agency_id", "resource_type": "test", "package_name": "project", "path": "not_null_dim_local_education_agency_local_education_agency_id.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9", "fqn": ["project", "marts", "core", "not_null_dim_local_education_agency_local_education_agency_id"], "alias": "not_null_dim_local_education_agency_local_education_agency_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6160758, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_local_education_agency", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_local_education_agency_local_education_agency_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect local_education_agency_id\nfrom `development-323217`.`dagster_dev_core`.`dim_local_education_agency`\nwhere local_education_agency_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "local_education_agency_id", "file_key_name": "models.dim_local_education_agency", "attached_node": "model.project.dim_local_education_agency"}, "test.project.unique_dim_school_school_key.64ec309207": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_school_school_key", "resource_type": "test", "package_name": "project", "path": "unique_dim_school_school_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_school_school_key.64ec309207", "fqn": ["project", "marts", "core", "unique_dim_school_school_key"], "alias": "unique_dim_school_school_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6178584, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_school_school_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select school_key as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_school`\n  where school_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_key", "file_key_name": "models.dim_school", "attached_node": "model.project.dim_school"}, "test.project.not_null_dim_school_school_key.209ee6078e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_school_school_key", "resource_type": "test", "package_name": "project", "path": "not_null_dim_school_school_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_school_school_key.209ee6078e", "fqn": ["project", "marts", "core", "not_null_dim_school_school_key"], "alias": "not_null_dim_school_school_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6196377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_school_school_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect school_key\nfrom `development-323217`.`dagster_dev_core`.`dim_school`\nwhere school_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_key", "file_key_name": "models.dim_school", "attached_node": "model.project.dim_school"}, "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "resource_type": "test", "package_name": "project", "path": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "fqn": ["project", "marts", "core", "relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "alias": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c"}, "created_at": 1699396144.6214468, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c\") }}", "language": "sql", "refs": [{"name": "dim_local_education_agency", "package": null, "version": null}, {"name": "dim_school", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.dim_school"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_school_16176f352783ef9dbd2a61f8b08f167c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `development-323217`.`dagster_dev_core`.`dim_school`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "local_education_agency_key", "file_key_name": "models.dim_school", "attached_node": "model.project.dim_school"}, "test.project.unique_dim_school_school_id.d10cafcd76": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_school_school_id", "resource_type": "test", "package_name": "project", "path": "unique_dim_school_school_id.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_school_school_id.d10cafcd76", "fqn": ["project", "marts", "core", "unique_dim_school_school_id"], "alias": "unique_dim_school_school_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6259599, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_school_school_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select school_id as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_school`\n  where school_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_id", "file_key_name": "models.dim_school", "attached_node": "model.project.dim_school"}, "test.project.not_null_dim_school_school_id.36d55ce30b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_id", "model": "{{ get_where_subquery(ref('dim_school')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_school_school_id", "resource_type": "test", "package_name": "project", "path": "not_null_dim_school_school_id.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_school_school_id.36d55ce30b", "fqn": ["project", "marts", "core", "not_null_dim_school_school_id"], "alias": "not_null_dim_school_school_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6278343, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_school_school_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect school_id\nfrom `development-323217`.`dagster_dev_core`.`dim_school`\nwhere school_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_id", "file_key_name": "models.dim_school", "attached_node": "model.project.dim_school"}, "test.project.unique_dim_section_section_key.4b442b173b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "section_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_section_section_key", "resource_type": "test", "package_name": "project", "path": "unique_dim_section_section_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_section_section_key.4b442b173b", "fqn": ["project", "marts", "core", "unique_dim_section_section_key"], "alias": "unique_dim_section_section_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6295795, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_section", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_section"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_section_section_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select section_key as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_section`\n  where section_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "section_key", "file_key_name": "models.dim_section", "attached_node": "model.project.dim_section"}, "test.project.not_null_dim_section_section_key.d763cc8042": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "section_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_section_section_key", "resource_type": "test", "package_name": "project", "path": "not_null_dim_section_section_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_section_section_key.d763cc8042", "fqn": ["project", "marts", "core", "not_null_dim_section_section_key"], "alias": "not_null_dim_section_section_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6312602, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_section", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_section"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_section_section_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect section_key\nfrom `development-323217`.`dagster_dev_core`.`dim_section`\nwhere section_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "section_key", "file_key_name": "models.dim_section", "attached_node": "model.project.dim_section"}, "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_dim_section_school_key__school_key__ref_dim_school_", "resource_type": "test", "package_name": "project", "path": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "fqn": ["project", "marts", "core", "relationships_dim_section_school_key__school_key__ref_dim_school_"], "alias": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e"}, "created_at": 1699396144.6332035, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e\") }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}, {"name": "dim_section", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_section"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_section_2e38f2c339276c08217f35f5dfd68b0e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `development-323217`.`dagster_dev_core`.`dim_section`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_key", "file_key_name": "models.dim_section", "attached_node": "model.project.dim_section"}, "test.project.not_null_dim_section_section_identifier.5aa4059a37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "section_identifier", "model": "{{ get_where_subquery(ref('dim_section')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_section_section_identifier", "resource_type": "test", "package_name": "project", "path": "not_null_dim_section_section_identifier.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_section_section_identifier.5aa4059a37", "fqn": ["project", "marts", "core", "not_null_dim_section_section_identifier"], "alias": "not_null_dim_section_section_identifier", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6371515, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_section", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_section"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_section_section_identifier.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect section_identifier\nfrom `development-323217`.`dagster_dev_core`.`dim_section`\nwhere section_identifier is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "section_identifier", "file_key_name": "models.dim_section", "attached_node": "model.project.dim_section"}, "test.project.unique_dim_session_session_key.b5230e3fd3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "session_key", "model": "{{ get_where_subquery(ref('dim_session')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_session_session_key", "resource_type": "test", "package_name": "project", "path": "unique_dim_session_session_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_session_session_key.b5230e3fd3", "fqn": ["project", "marts", "core", "unique_dim_session_session_key"], "alias": "unique_dim_session_session_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6387691, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_session"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_session_session_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select session_key as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_session`\n  where session_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "session_key", "file_key_name": "models.dim_session", "attached_node": "model.project.dim_session"}, "test.project.not_null_dim_session_session_key.2c2f8e6dac": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_key", "model": "{{ get_where_subquery(ref('dim_session')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_session_session_key", "resource_type": "test", "package_name": "project", "path": "not_null_dim_session_session_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_session_session_key.2c2f8e6dac", "fqn": ["project", "marts", "core", "not_null_dim_session_session_key"], "alias": "not_null_dim_session_session_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.641015, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_session"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_session_session_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect session_key\nfrom `development-323217`.`dagster_dev_core`.`dim_session`\nwhere session_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "session_key", "file_key_name": "models.dim_session", "attached_node": "model.project.dim_session"}, "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('dim_session')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_dim_session_school_key__school_key__ref_dim_school_", "resource_type": "test", "package_name": "project", "path": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "fqn": ["project", "marts", "core", "relationships_dim_session_school_key__school_key__ref_dim_school_"], "alias": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040"}, "created_at": 1699396144.6430387, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040\") }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}, {"name": "dim_session", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.dim_session"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_dim_session_3e72575c9101ef44f48695ee6d2b0040.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `development-323217`.`dagster_dev_core`.`dim_session`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_key", "file_key_name": "models.dim_session", "attached_node": "model.project.dim_session"}, "test.project.unique_dim_staff_staff_key.eebb0d941a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "staff_key", "model": "{{ get_where_subquery(ref('dim_staff')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_staff_staff_key", "resource_type": "test", "package_name": "project", "path": "unique_dim_staff_staff_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_staff_staff_key.eebb0d941a", "fqn": ["project", "marts", "core", "unique_dim_staff_staff_key"], "alias": "unique_dim_staff_staff_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6470013, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_staff", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_staff"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_staff_staff_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select staff_key as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_staff`\n  where staff_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "staff_key", "file_key_name": "models.dim_staff", "attached_node": "model.project.dim_staff"}, "test.project.not_null_dim_staff_staff_key.b7dc3eb451": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "staff_key", "model": "{{ get_where_subquery(ref('dim_staff')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_staff_staff_key", "resource_type": "test", "package_name": "project", "path": "not_null_dim_staff_staff_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_staff_staff_key.b7dc3eb451", "fqn": ["project", "marts", "core", "not_null_dim_staff_staff_key"], "alias": "not_null_dim_staff_staff_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6488547, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_staff", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_staff"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_staff_staff_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect staff_key\nfrom `development-323217`.`dagster_dev_core`.`dim_staff`\nwhere staff_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "staff_key", "file_key_name": "models.dim_staff", "attached_node": "model.project.dim_staff"}, "test.project.unique_dim_student_student_key.45ef646b54": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_student_student_key", "resource_type": "test", "package_name": "project", "path": "unique_dim_student_student_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.unique_dim_student_student_key.45ef646b54", "fqn": ["project", "marts", "core", "unique_dim_student_student_key"], "alias": "unique_dim_student_student_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6504927, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/unique_dim_student_student_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select student_key as unique_field\n  from `development-323217`.`dagster_dev_core`.`dim_student`\n  where student_key is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "student_key", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.not_null_dim_student_student_key.67ab09a6e6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_key", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_student_student_key", "resource_type": "test", "package_name": "project", "path": "not_null_dim_student_student_key.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_student_student_key.67ab09a6e6", "fqn": ["project", "marts", "core", "not_null_dim_student_student_key"], "alias": "not_null_dim_student_student_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.652183, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect student_key\nfrom `development-323217`.`dagster_dev_core`.`dim_student`\nwhere student_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "student_key", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.not_null_dim_student_school_year.cb1c50e460": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_student_school_year", "resource_type": "test", "package_name": "project", "path": "not_null_dim_student_school_year.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_student_school_year.cb1c50e460", "fqn": ["project", "marts", "core", "not_null_dim_student_school_year"], "alias": "not_null_dim_student_school_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.65383, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_school_year.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect school_year\nfrom `development-323217`.`dagster_dev_core`.`dim_student`\nwhere school_year is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_year", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.not_null_dim_student_student_unique_id.8a392fc4ab": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_unique_id", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_student_student_unique_id", "resource_type": "test", "package_name": "project", "path": "not_null_dim_student_student_unique_id.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_student_student_unique_id.8a392fc4ab", "fqn": ["project", "marts", "core", "not_null_dim_student_student_unique_id"], "alias": "not_null_dim_student_student_unique_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6555302, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_unique_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect student_unique_id\nfrom `development-323217`.`dagster_dev_core`.`dim_student`\nwhere student_unique_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "student_unique_id", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.not_null_dim_student_student_first_name.f007907dff": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_first_name", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_student_student_first_name", "resource_type": "test", "package_name": "project", "path": "not_null_dim_student_student_first_name.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_student_student_first_name.f007907dff", "fqn": ["project", "marts", "core", "not_null_dim_student_student_first_name"], "alias": "not_null_dim_student_student_first_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.657527, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_first_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect student_first_name\nfrom `development-323217`.`dagster_dev_core`.`dim_student`\nwhere student_first_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "student_first_name", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.not_null_dim_student_student_middle_name.eaf7fc7f0e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_middle_name", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_student_student_middle_name", "resource_type": "test", "package_name": "project", "path": "not_null_dim_student_student_middle_name.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_student_student_middle_name.eaf7fc7f0e", "fqn": ["project", "marts", "core", "not_null_dim_student_student_middle_name"], "alias": "not_null_dim_student_student_middle_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6595087, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_middle_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect student_middle_name\nfrom `development-323217`.`dagster_dev_core`.`dim_student`\nwhere student_middle_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "student_middle_name", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.not_null_dim_student_student_last_surname.329ae57d5b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_last_surname", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_student_student_last_surname", "resource_type": "test", "package_name": "project", "path": "not_null_dim_student_student_last_surname.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_student_student_last_surname.329ae57d5b", "fqn": ["project", "marts", "core", "not_null_dim_student_student_last_surname"], "alias": "not_null_dim_student_student_last_surname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6612906, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_student_last_surname.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect student_last_surname\nfrom `development-323217`.`dagster_dev_core`.`dim_student`\nwhere student_last_surname is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "student_last_surname", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_english_language_learner", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_student_is_english_language_learner", "resource_type": "test", "package_name": "project", "path": "not_null_dim_student_is_english_language_learner.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d", "fqn": ["project", "marts", "core", "not_null_dim_student_is_english_language_learner"], "alias": "not_null_dim_student_is_english_language_learner", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.663082, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_is_english_language_learner.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_english_language_learner\nfrom `development-323217`.`dagster_dev_core`.`dim_student`\nwhere is_english_language_learner is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "is_english_language_learner", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "is_english_language_learner", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "accepted_values_dim_student_is_english_language_learner__Yes__No", "resource_type": "test", "package_name": "project", "path": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1", "fqn": ["project", "marts", "core", "accepted_values_dim_student_is_english_language_learner__Yes__No"], "alias": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c"}, "created_at": 1699396144.6648557, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c\") }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/accepted_values_dim_student_d65f910897a9da528bf85f0612b68a4c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_english_language_learner as value_field,\n        count(*) as n_records\n\n    from `development-323217`.`dagster_dev_core`.`dim_student`\n    group by is_english_language_learner\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "is_english_language_learner", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "in_special_education_program", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_student_in_special_education_program", "resource_type": "test", "package_name": "project", "path": "not_null_dim_student_in_special_education_program.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3", "fqn": ["project", "marts", "core", "not_null_dim_student_in_special_education_program"], "alias": "not_null_dim_student_in_special_education_program", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6728323, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_in_special_education_program.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect in_special_education_program\nfrom `development-323217`.`dagster_dev_core`.`dim_student`\nwhere in_special_education_program is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "in_special_education_program", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "in_special_education_program", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "accepted_values_dim_student_in_special_education_program__Yes__No", "resource_type": "test", "package_name": "project", "path": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1", "fqn": ["project", "marts", "core", "accepted_values_dim_student_in_special_education_program__Yes__No"], "alias": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_dim_student_d099d9227794d242725afeb04495f96c"}, "created_at": 1699396144.674707, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_student_d099d9227794d242725afeb04495f96c\") }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/accepted_values_dim_student_d099d9227794d242725afeb04495f96c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        in_special_education_program as value_field,\n        count(*) as n_records\n\n    from `development-323217`.`dagster_dev_core`.`dim_student`\n    group by in_special_education_program\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "in_special_education_program", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.not_null_dim_student_is_hispanic.2f36046142": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_hispanic", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_student_is_hispanic", "resource_type": "test", "package_name": "project", "path": "not_null_dim_student_is_hispanic.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.not_null_dim_student_is_hispanic.2f36046142", "fqn": ["project", "marts", "core", "not_null_dim_student_is_hispanic"], "alias": "not_null_dim_student_is_hispanic", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.6788545, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/not_null_dim_student_is_hispanic.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_hispanic\nfrom `development-323217`.`dagster_dev_core`.`dim_student`\nwhere is_hispanic is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "is_hispanic", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "is_hispanic", "model": "{{ get_where_subquery(ref('dim_student')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "accepted_values_dim_student_is_hispanic__Yes__No", "resource_type": "test", "package_name": "project", "path": "accepted_values_dim_student_is_hispanic__Yes__No.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221", "fqn": ["project", "marts", "core", "accepted_values_dim_student_is_hispanic__Yes__No"], "alias": "accepted_values_dim_student_is_hispanic__Yes__No", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.68063, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/accepted_values_dim_student_is_hispanic__Yes__No.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        is_hispanic as value_field,\n        count(*) as n_records\n\n    from `development-323217`.`dagster_dev_core`.`dim_student`\n    group by is_hispanic\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "is_hispanic", "file_key_name": "models.dim_student", "attached_node": "model.project.dim_student"}, "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_school')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_fct_student_school_student_key__student_key__ref_dim_student_", "resource_type": "test", "package_name": "project", "path": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5", "fqn": ["project", "marts", "core", "relationships_fct_student_school_student_key__student_key__ref_dim_student_"], "alias": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee"}, "created_at": 1699396144.6842597, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee\") }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}, {"name": "fct_student_school", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student", "model.project.fct_student_school"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_fct_student_scho_9205f868dbd4bb0a6c9f832723697eee.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select student_key as from_field\n    from `development-323217`.`dagster_dev_core`.`fct_student_school`\n    where student_key is not null\n),\n\nparent as (\n    select student_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_student`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "student_key", "file_key_name": "models.fct_student_school", "attached_node": "model.project.fct_student_school"}, "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_local_education_agency')", "field": "local_education_agency_key", "column_name": "local_education_agency_key", "model": "{{ get_where_subquery(ref('fct_student_school')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_", "resource_type": "test", "package_name": "project", "path": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "fqn": ["project", "marts", "core", "relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_"], "alias": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788"}, "created_at": 1699396144.6882567, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788\") }}", "language": "sql", "refs": [{"name": "dim_local_education_agency", "package": null, "version": null}, {"name": "fct_student_school", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_local_education_agency", "model.project.fct_student_school"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_fct_student_scho_441bae172a53ed8d01418f52d72d6788.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select local_education_agency_key as from_field\n    from `development-323217`.`dagster_dev_core`.`fct_student_school`\n    where local_education_agency_key is not null\n),\n\nparent as (\n    select local_education_agency_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_local_education_agency`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "local_education_agency_key", "file_key_name": "models.fct_student_school", "attached_node": "model.project.fct_student_school"}, "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('fct_student_school')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_fct_student_school_school_key__school_key__ref_dim_school_", "resource_type": "test", "package_name": "project", "path": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f.sql", "original_file_path": "models/marts/core/core.yml", "unique_id": "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae", "fqn": ["project", "marts", "core", "relationships_fct_student_school_school_key__school_key__ref_dim_school_"], "alias": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_amt", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f"}, "created_at": 1699396144.6928422, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f\") }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}, {"name": "fct_student_school", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school", "model.project.fct_student_school"]}, "compiled_path": "target/compiled/project/models/marts/core/core.yml/relationships_fct_student_scho_a506ff10ff57a9f497f3d8065cbd010f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select school_key as from_field\n    from `development-323217`.`dagster_dev_core`.`fct_student_school`\n    where school_key is not null\n),\n\nparent as (\n    select school_key as to_field\n    from `development-323217`.`dagster_dev_core`.`dim_school`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_key", "file_key_name": "models.fct_student_school", "attached_node": "model.project.fct_student_school"}, "test.project.unique_dim_assessment_assessment_key.d45cb819a0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "assessment_key", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_dim_assessment_assessment_key", "resource_type": "test", "package_name": "project", "path": "unique_dim_assessment_assessment_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.unique_dim_assessment_assessment_key.d45cb819a0", "fqn": ["project", "marts", "assessments", "unique_dim_assessment_assessment_key"], "alias": "unique_dim_assessment_assessment_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.7048757, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "assessment_key", "file_key_name": "models.dim_assessment", "attached_node": "model.project.dim_assessment"}, "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "assessment_key", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_assessment_assessment_key", "resource_type": "test", "package_name": "project", "path": "not_null_dim_assessment_assessment_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_assessment_key"], "alias": "not_null_dim_assessment_assessment_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.7066803, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "assessment_key", "file_key_name": "models.dim_assessment", "attached_node": "model.project.dim_assessment"}, "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "education_organization_key", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_assessment_education_organization_key", "resource_type": "test", "package_name": "project", "path": "not_null_dim_assessment_education_organization_key.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_education_organization_key"], "alias": "not_null_dim_assessment_education_organization_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.7085085, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "education_organization_key", "file_key_name": "models.dim_assessment", "attached_node": "model.project.dim_assessment"}, "test.project.not_null_dim_assessment_school_year.6f50975711": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_assessment_school_year", "resource_type": "test", "package_name": "project", "path": "not_null_dim_assessment_school_year.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.not_null_dim_assessment_school_year.6f50975711", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_school_year"], "alias": "not_null_dim_assessment_school_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.7104416, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "school_year", "file_key_name": "models.dim_assessment", "attached_node": "model.project.dim_assessment"}, "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "assessment_identifier", "model": "{{ get_where_subquery(ref('dim_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_dim_assessment_assessment_identifier", "resource_type": "test", "package_name": "project", "path": "not_null_dim_assessment_assessment_identifier.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef", "fqn": ["project", "marts", "assessments", "not_null_dim_assessment_assessment_identifier"], "alias": "not_null_dim_assessment_assessment_identifier", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.7121792, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "assessment_identifier", "file_key_name": "models.dim_assessment", "attached_node": "model.project.dim_assessment"}, "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_assessment')", "field": "assessment_key", "column_name": "assessment_key", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_", "resource_type": "test", "package_name": "project", "path": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd", "fqn": ["project", "marts", "assessments", "relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_"], "alias": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6"}, "created_at": 1699396144.713987, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_asse_c16262d75cc7e4af113f86e2ae48fff6\") }}", "language": "sql", "refs": [{"name": "dim_assessment", "package": null, "version": null}, {"name": "fct_student_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "assessment_key", "file_key_name": "models.fct_student_assessment", "attached_node": "model.project.fct_student_assessment"}, "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_student')", "field": "student_key", "column_name": "student_key", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_fct_student_assessment_student_key__student_key__ref_dim_student_", "resource_type": "test", "package_name": "project", "path": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72", "fqn": ["project", "marts", "assessments", "relationships_fct_student_assessment_student_key__student_key__ref_dim_student_"], "alias": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1"}, "created_at": 1699396144.7186742, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_asse_5f28d9db6a23ff4d20abda5e94c218b1\") }}", "language": "sql", "refs": [{"name": "dim_student", "package": null, "version": null}, {"name": "fct_student_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_student"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "student_key", "file_key_name": "models.fct_student_assessment", "attached_node": "model.project.fct_student_assessment"}, "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_school')", "field": "school_key", "column_name": "school_key", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_fct_student_assessment_school_key__school_key__ref_dim_school_", "resource_type": "test", "package_name": "project", "path": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49", "fqn": ["project", "marts", "assessments", "relationships_fct_student_assessment_school_key__school_key__ref_dim_school_"], "alias": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c"}, "created_at": 1699396144.7231374, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fct_student_asse_d76a607ab7d091529cb39a304297bf1c\") }}", "language": "sql", "refs": [{"name": "dim_school", "package": null, "version": null}, {"name": "fct_student_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.dim_school"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "school_key", "file_key_name": "models.fct_student_assessment", "attached_node": "model.project.fct_student_assessment"}, "test.project.not_null_fct_student_assessment_school_year.d353cc4178": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "school_year", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_fct_student_assessment_school_year", "resource_type": "test", "package_name": "project", "path": "not_null_fct_student_assessment_school_year.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.not_null_fct_student_assessment_school_year.d353cc4178", "fqn": ["project", "marts", "assessments", "not_null_fct_student_assessment_school_year"], "alias": "not_null_fct_student_assessment_school_year", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.727887, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_student_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "school_year", "file_key_name": "models.fct_student_assessment", "attached_node": "model.project.fct_student_assessment"}, "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "student_assessment_identifier", "model": "{{ get_where_subquery(ref('fct_student_assessment')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "not_null_fct_student_assessment_student_assessment_identifier", "resource_type": "test", "package_name": "project", "path": "not_null_fct_student_assessment_student_assessment_identifier.sql", "original_file_path": "models/marts/assessments/assessments.yml", "unique_id": "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748", "fqn": ["project", "marts", "assessments", "not_null_fct_student_assessment_student_assessment_identifier"], "alias": "not_null_fct_student_assessment_student_assessment_identifier", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.7296476, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_student_assessment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "student_assessment_identifier", "file_key_name": "models.fct_student_assessment", "attached_node": "model.project.fct_student_assessment"}, "test.project.unique_stg_edfi_local_education_agencies_concat_school_year_local_education_agency_id_.231d86e41d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "concat(school_year, '-', local_education_agency_id)", "model": "{{ get_where_subquery(ref('stg_edfi_local_education_agencies')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_stg_edfi_local_education_agencies_concat_school_year_local_education_agency_id_", "resource_type": "test", "package_name": "project", "path": "unique_stg_edfi_local_educatio_a0da8733befe7b86397f2a4fef9dba8b.sql", "original_file_path": "models/staging/edfi/stg_edfi.yml", "unique_id": "test.project.unique_stg_edfi_local_education_agencies_concat_school_year_local_education_agency_id_.231d86e41d", "fqn": ["project", "staging", "edfi", "unique_stg_edfi_local_education_agencies_concat_school_year_local_education_agency_id_"], "alias": "unique_stg_edfi_local_educatio_a0da8733befe7b86397f2a4fef9dba8b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_edfi_local_educatio_a0da8733befe7b86397f2a4fef9dba8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_edfi_local_educatio_a0da8733befe7b86397f2a4fef9dba8b"}, "created_at": 1699396144.7340243, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_edfi_local_educatio_a0da8733befe7b86397f2a4fef9dba8b\") }}", "language": "sql", "refs": [{"name": "stg_edfi_local_education_agencies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_edfi_local_education_agencies"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi.yml/unique_stg_edfi_local_educatio_a0da8733befe7b86397f2a4fef9dba8b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select concat(school_year, '-', local_education_agency_id) as unique_field\n  from `development-323217`.`dagster_dev_staging`.`stg_edfi_local_education_agencies`\n  where concat(school_year, '-', local_education_agency_id) is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_edfi_local_education_agencies", "attached_node": "model.project.stg_edfi_local_education_agencies"}, "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('stg_edfi_sessions')", "field": "school_reference.school_id", "column_name": "school_id", "model": "{{ get_where_subquery(ref('stg_edfi_schools')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_", "resource_type": "test", "package_name": "project", "path": "relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b.sql", "original_file_path": "models/staging/edfi/stg_edfi.yml", "unique_id": "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d", "fqn": ["project", "staging", "edfi", "relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_"], "alias": "relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b"}, "created_at": 1699396144.735971, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b\") }}", "language": "sql", "refs": [{"name": "stg_edfi_sessions", "package": null, "version": null}, {"name": "stg_edfi_schools", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_edfi_sessions", "model.project.stg_edfi_schools"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi.yml/relationships_stg_edfi_schools_645314044c3e64b6ef667c07a9323a4b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select school_id as from_field\n    from `development-323217`.`dagster_dev_staging`.`stg_edfi_schools`\n    where school_id is not null\n),\n\nparent as (\n    select school_reference.school_id as to_field\n    from `development-323217`.`dagster_dev_staging`.`stg_edfi_sessions`\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": "school_id", "file_key_name": "models.stg_edfi_schools", "attached_node": "model.project.stg_edfi_schools"}, "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "school_year || '-' || student_unique_id", "model": "{{ get_where_subquery(ref('stg_edfi_students')) }}"}, "namespace": null}, "database": "development-323217", "schema": "dagster_dev_dbt_test__audit", "name": "unique_stg_edfi_students_school_year_student_unique_id", "resource_type": "test", "package_name": "project", "path": "unique_stg_edfi_students_school_year_student_unique_id.sql", "original_file_path": "models/staging/edfi/stg_edfi.yml", "unique_id": "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48", "fqn": ["project", "staging", "edfi", "unique_stg_edfi_students_school_year_student_unique_id"], "alias": "unique_stg_edfi_students_school_year_student_unique_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "edfi_staging", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1699396144.741192, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_edfi_students", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.project.stg_edfi_students"]}, "compiled_path": "target/compiled/project/models/staging/edfi/stg_edfi.yml/unique_stg_edfi_students_school_year_student_unique_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select school_year || '-' || student_unique_id as unique_field\n  from `development-323217`.`dagster_dev_staging`.`stg_edfi_students`\n  where school_year || '-' || student_unique_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "checksum": null}, "column_name": null, "file_key_name": "models.stg_edfi_students", "attached_node": "model.project.stg_edfi_students"}}, "sources": {"source.project.staging.base_edfi_calendars": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_calendars", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_calendars", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_calendars"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_calendars", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_calendars/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_calendars"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_calendars`", "created_at": 1699396144.8327324}, "source.project.staging.base_edfi_calendar_dates": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_calendar_dates", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_calendar_dates", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_calendar_dates"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_calendar_dates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_calendar_dates/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_calendar_dates"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_calendar_dates`", "created_at": 1699396144.8329225}, "source.project.staging.base_edfi_courses": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_courses", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_courses", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_courses"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_courses", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_courses/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_courses"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_courses`", "created_at": 1699396144.8330898}, "source.project.staging.base_edfi_course_offerings": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_course_offerings", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_course_offerings", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_course_offerings"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_course_offerings", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_course_offerings/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_course_offerings"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_course_offerings`", "created_at": 1699396144.8332543}, "source.project.staging.base_edfi_grades": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_grades", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_grades", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_grades"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grades", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_grades/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_grades"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_grades`", "created_at": 1699396144.833398}, "source.project.staging.base_edfi_grading_periods": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_grading_periods", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_grading_periods", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_grading_periods"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_grading_periods", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_grading_periods/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_grading_periods"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_grading_periods`", "created_at": 1699396144.8335366}, "source.project.staging.base_edfi_local_education_agencies": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_local_education_agencies", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_local_education_agencies", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_local_education_agencies"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_local_education_agencies", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_local_education_agencies/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_local_education_agencies"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_local_education_agencies`", "created_at": 1699396144.8336966}, "source.project.staging.base_edfi_programs": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_programs", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_programs", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_programs"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_programs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_programs/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_programs"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_programs`", "created_at": 1699396144.833845}, "source.project.staging.base_edfi_schools": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_schools", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_schools", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_schools"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_schools", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_schools/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_schools"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_schools`", "created_at": 1699396144.8339782}, "source.project.staging.base_edfi_school_year_types": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_school_year_types", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_school_year_types", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_school_year_types"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_school_year_types", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_school_year_types/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_school_year_types"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_school_year_types`", "created_at": 1699396144.8341303}, "source.project.staging.base_edfi_sections": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_sections", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_sections", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_sections"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_sections", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_sections/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_sections"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_sections`", "created_at": 1699396144.8342626}, "source.project.staging.base_edfi_sessions": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_sessions", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_sessions", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_sessions"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_sessions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_sessions/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_sessions"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_sessions`", "created_at": 1699396144.8343897}, "source.project.staging.base_edfi_staffs": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_staffs", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_staffs", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_staffs"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staffs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_staffs/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_staffs"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_staffs`", "created_at": 1699396144.8345163}, "source.project.staging.base_edfi_staff_education_organization_assignment_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_staff_education_organization_assignment_associations", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_staff_education_organization_assignment_associations", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_education_organization_assignment_associations"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_education_organization_assignment_associations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_staff_education_organization_assignment_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_staff_education_organization_assignment_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_staff_education_organization_assignment_associations`", "created_at": 1699396144.8346434}, "source.project.staging.base_edfi_staff_school_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_staff_school_associations", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_staff_school_associations", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_school_associations"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_school_associations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_staff_school_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_staff_school_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_staff_school_associations`", "created_at": 1699396144.83477}, "source.project.staging.base_edfi_staff_section_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_staff_section_associations", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_staff_section_associations", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_staff_section_associations"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_staff_section_associations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_staff_section_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_staff_section_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_staff_section_associations`", "created_at": 1699396144.8349974}, "source.project.staging.base_edfi_students": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_students", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_students", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_students"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_students", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_students/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_students"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_students`", "created_at": 1699396144.835165}, "source.project.staging.base_edfi_student_education_organization_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_student_education_organization_associations", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_student_education_organization_associations", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_education_organization_associations"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_education_organization_associations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_education_organization_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_education_organization_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_student_education_organization_associations`", "created_at": 1699396144.835299}, "source.project.staging.base_edfi_student_program_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_student_program_associations", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_student_program_associations", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_program_associations"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_program_associations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_program_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_program_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_student_program_associations`", "created_at": 1699396144.8354304}, "source.project.staging.base_edfi_student_school_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_student_school_associations", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_student_school_associations", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_school_associations"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_school_associations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_school_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_school_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_student_school_associations`", "created_at": 1699396144.8355575}, "source.project.staging.base_edfi_student_school_attendance_events": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_student_school_attendance_events", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_student_school_attendance_events", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_school_attendance_events"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_school_attendance_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_school_attendance_events/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_school_attendance_events"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_student_school_attendance_events`", "created_at": 1699396144.8356848}, "source.project.staging.base_edfi_student_section_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_student_section_associations", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_student_section_associations", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_section_associations"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_section_associations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_section_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_section_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_student_section_associations`", "created_at": 1699396144.835809}, "source.project.staging.base_edfi_student_section_attendance_events": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_student_section_attendance_events", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_student_section_attendance_events", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_section_attendance_events"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_section_attendance_events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_section_attendance_events/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_section_attendance_events"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_student_section_attendance_events`", "created_at": 1699396144.8359313}, "source.project.staging.base_edfi_student_special_education_program_associations": {"database": "development-323217", "schema": "dagster_dev_staging", "name": "base_edfi_student_special_education_program_associations", "resource_type": "source", "package_name": "project", "path": "models/staging/edfi/src_edfi.yml", "original_file_path": "models/staging/edfi/src_edfi.yml", "unique_id": "source.project.staging.base_edfi_student_special_education_program_associations", "fqn": ["project", "staging", "edfi", "staging", "base_edfi_student_special_education_program_associations"], "source_name": "staging", "source_description": "", "loader": "", "identifier": "base_edfi_student_special_education_program_associations", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_special_education_program_associations/*", "file_format": null, "row_format": null, "tbl_properties": null, "partitions": [{"name": "api_version", "data_type": "string"}, {"name": "school_year", "data_type": "integer"}, {"name": "date_extracted", "data_type": "timestamp"}, {"name": "extract_type", "data_type": "string"}], "options": {"format": "NEWLINE_DELIMITED_JSON", "hive_partition_uri_prefix": "gs://dagster-dev-development-323217/edfi_api/base_edfi_student_special_education_program_associations"}}, "description": "", "columns": {"is_complete_extract": {"name": "is_complete_extract", "description": "", "meta": {}, "data_type": "boolean", "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`development-323217`.`dagster_dev_staging`.`base_edfi_student_special_education_program_associations`", "created_at": 1699396144.8360543}}, "macros": {"macro.project.convert_grade_level_to_short_label": {"name": "convert_grade_level_to_short_label", "resource_type": "macro", "package_name": "project", "path": "macros/convert_grade_level_to_short_label.sql", "original_file_path": "macros/convert_grade_level_to_short_label.sql", "unique_id": "macro.project.convert_grade_level_to_short_label", "macro_sql": "{% macro convert_grade_level_to_short_label(grade_level) %}\n    case {{ grade_level }}\n        when 'Infant/toddler'            then 'Infant'\n        when 'Preschool/Prekindergarten' then 'PreK'\n        when 'Transitional Kindergarten' then 'TK'\n        when 'Kindergarten'              then 'K'\n        when 'First grade'               then '1'\n        when 'Second grade'              then '2'\n        when 'Third grade'               then '3'\n        when 'Fourth grade'              then '4'\n        when 'Fifth grade'               then '5'\n        when 'Sixth grade'               then '6'\n        when 'Seventh grade'             then '7'\n        when 'Eighth grade'              then '8'\n        when 'Ninth grade'               then '9'\n        when 'Tenth grade'               then '10'\n        when 'Eleventh grade'            then '11'\n        when 'Twelfth grade'             then '12'\n        else '999999999'\n    end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro converts grade level descriptors to shorter, often numeric grade levels (ie. Fifth grade -> 5 )\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "project://macros/macros.yml", "arguments": [{"name": "grade_level", "type": "string", "description": "Ed-Fi grade level descriptor"}], "created_at": 1699396144.831242, "supported_languages": null}, "macro.project.remove_edfi_deletes_and_duplicates": {"name": "remove_edfi_deletes_and_duplicates", "resource_type": "macro", "package_name": "project", "path": "macros/remove_edfi_deletes_and_duplicates.sql", "original_file_path": "macros/remove_edfi_deletes_and_duplicates.sql", "unique_id": "macro.project.remove_edfi_deletes_and_duplicates", "macro_sql": "{% macro remove_edfi_deletes_and_duplicates() %}\n\nwhere\n    extract_type = 'records'\n    and id not in (select id from records where extract_type = 'deletes') \nqualify row_number() over (\n        partition by id\n        order by date_extracted DESC) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1634436, "supported_languages": null}, "macro.project.convert_grade_level_to_id": {"name": "convert_grade_level_to_id", "resource_type": "macro", "package_name": "project", "path": "macros/convert_grade_level_to_id.sql", "original_file_path": "macros/convert_grade_level_to_id.sql", "unique_id": "macro.project.convert_grade_level_to_id", "macro_sql": "{% macro convert_grade_level_to_id(grade_level) %}\n    case {{ grade_level }}\n        when 'Infant/toddler'            then -3\n        when 'Preschool/Prekindergarten' then -2\n        when 'Transitional Kindergarten' then -1\n        when 'Kindergarten'              then 0\n        when 'First grade'               then 1\n        when 'Second grade'              then 2\n        when 'Third grade'               then 3\n        when 'Fourth grade'              then 4\n        when 'Fifth grade'               then 5\n        when 'Sixth grade'               then 6\n        when 'Seventh grade'             then 7\n        when 'Eighth grade'              then 8\n        when 'Ninth grade'               then 9\n        when 'Tenth grade'               then 10\n        when 'Eleventh grade'            then 11\n        when 'Twelfth grade'             then 12\n        else 999999999\n    end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro converts grade level descriptors to a numeric value for use in sorting in a bi tool\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "project://macros/macros.yml", "arguments": [{"name": "grade_level", "type": "string", "description": "Ed-Fi grade level descriptor"}], "created_at": 1699396144.8306925, "supported_languages": null}, "macro.project.retrieve_edfi_records_from_data_lake": {"name": "retrieve_edfi_records_from_data_lake", "resource_type": "macro", "package_name": "project", "path": "macros/retrieve_edfi_records_from_data_lake.sql", "original_file_path": "macros/retrieve_edfi_records_from_data_lake.sql", "unique_id": "macro.project.retrieve_edfi_records_from_data_lake", "macro_sql": "{% macro retrieve_edfi_records_from_data_lake(table_name) %}\n\nwith latest_extract as (\n\n    select\n        school_year,\n        max(date_extracted) as date_extracted\n    from {{ source('staging', table_name) }}\n    where is_complete_extract is true\n    group by 1\n\n),\n\nrecords as (\n\n    select base_table.*\n    from {{ source('staging', table_name) }} base_table\n    left join latest_extract on base_table.school_year = latest_extract.school_year\n    where\n        id is not null\n        and (\n            latest_extract.date_extracted is null\n            or base_table.date_extracted >= latest_extract.date_extracted)\n\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1645098, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1711237, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.171854, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1725295, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1729932, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.176263, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.176765, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1775806, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1778464, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.178205, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.178471, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1787555, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1790223, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1793504, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.179866, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1801493, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1804264, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1813145, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.182021, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1832201, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.183534, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1840496, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1845431, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1849144, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1853995, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    table_options as (\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            JSON_VALUE(option_value) as table_comment\n\n        from {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }}\n        where option_name = 'description'\n    ),\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n        table_options.table_comment,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join table_options using (relation_id)\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1904397, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.190905, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1919022, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1923416, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1928008, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1932847, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.19353, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1939304, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1952245, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1963134, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1966255, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1974604, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.197658, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1980019, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1983483, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1988876, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1991673, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1995533, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.1997018, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2003667, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2012954, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2016816, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2020009, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2023451, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2026658, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.202994, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.203315, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.204098, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2044168, "supported_languages": null}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2091346, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"direct\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2096715, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2102041, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2105165, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2117755, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2124195, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.212697, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2129388, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.213784, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2149332, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2169344, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2204719, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2209542, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2222023, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.223275, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2301536, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.23055, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.230794, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2342937, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2362986, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.237288, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2390254, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {# We run temp table creation in a separated script to move to partitions copy #}\n  {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n    {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n  }}\n  {%- endcall %}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2402053, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2421777, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2436967, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2455099, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2462668, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2467186, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2478557, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2485, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2492588, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.251487, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2517679, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.253149, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2538815, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2549496, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2557821, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2559333, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2591326, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2594984, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2599053, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.260576, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2609904, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2615862, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2619104, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.26221, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2625875, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2630851, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2635396, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2645233, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2649229, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2651806, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.265552, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.26784, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.268056, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.268386, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2685943, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.269233, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.269612, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2698095, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2702003, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2705643, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2709546, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2713196, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2717526, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2729356, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2733154, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2738104, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2744071, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2763903, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2775283, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2777767, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.278052, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2787602, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2791016, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2793853, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2796633, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.279886, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.280611, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2808757, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2811284, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2814205, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2817209, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2818651, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2821474, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2824643, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2852423, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2855277, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.28606, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2864504, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2868047, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2871337, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2884297, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2891545, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2895062, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2901173, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2905102, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2915313, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2919598, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.293352, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.294165, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2945006, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2947419, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2954323, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2961469, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2979887, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2984803, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2988048, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2991233, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2994668, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.2999005, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3002923, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3008301, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3012168, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3015153, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3024724, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3027787, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3031433, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3034556, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3039033, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3048916, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3053946, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3057969, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3064322, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.306756, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3070369, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3073857, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.308575, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {%- if relation.is_table -%}\n            {{- drop_table(relation) -}}\n        {%- elif relation.is_view -%}\n            {{- drop_view(relation) -}}\n        {%- elif relation.is_materialized_view -%}\n            {{- drop_materialized_view(relation) -}}\n        {%- else -%}\n            drop {{ relation.type }} if exists {{ relation }} cascade\n        {%- endif -%}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.drop_table", "macro.dbt.drop_view", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.309382, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n  {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3096957, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3098848, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n  {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3102186, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.310411, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n  {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.310712, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/drop_relation.sql", "original_file_path": "macros/adapters/drop_relation.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3109236, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3113534, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.311636, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3120468, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3122623, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3127332, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.312974, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.313397, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3135512, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3140066, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.314303, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3147085, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.314895, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.315487, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.315768, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.316211, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3164072, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3169136, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3172314, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3178244, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3182764, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3191648, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3198817, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.320668, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3209612, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3213801, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.32193, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3224025, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3226607, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.323226, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3235257, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3239017, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.324046, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3244982, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.32478, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3252554, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3255217, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3259277, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.326182, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3266547, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3269, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3275075, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3277516, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.328301, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.328595, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3290012, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3292334, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3305452, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.330813, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3311093, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.331386, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3316648, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.331932, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3322453, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3325517, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3328307, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3330996, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3333936, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3336477, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3339214, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3342054, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.334679, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.334933, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3354905, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.335983, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.336415, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3373473, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3391366, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3395064, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3397615, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.340027, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.340308, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3408506, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.341404, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3419304, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.346908, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3523786, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3539581, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3543983, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3553147, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.355661, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3559122, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3561983, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.356422, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.356706, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3569198, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3577733, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3581204, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3603976, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3652024, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3664443, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3667583, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3675094, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3686404, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3694663, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.369793, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3701491, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.371529, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3717394, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3726723, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.372964, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.373234, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3754323, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3761785, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.376783, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3773017, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.377546, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3779294, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3781652, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {{ create_or_replace_clone(target_relation, defer_relation) }}\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3830113, "supported_languages": ["sql"]}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3837104, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3839974, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3843508, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3850803, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3894136, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3899245, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3903756, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3927834, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3933737, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/create_materialized_view.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3936322, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_as_sql": {"name": "get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.get_replace_materialized_view_as_sql", "macro_sql": "{% macro get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{- log('Applying REPLACE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_replace_materialized_view_as_sql', 'dbt')(relation, sql, existing_relation, backup_relation, intermediate_relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3943229, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_as_sql": {"name": "default__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/replace_materialized_view.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_as_sql", "macro_sql": "{% macro default__get_replace_materialized_view_as_sql(relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3946655, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.395189, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/refresh_materialized_view.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.3954418, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.401317, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4019935, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4024596, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_materialized_view_as_sql(target_relation, sql, existing_relation, backup_relation, intermediate_relation) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_materialized_view_as_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.404819, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4052634, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4064302, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4071295, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "original_file_path": "macros/materializations/models/materialized_view/get_materialized_view_configuration_changes.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4074094, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.408206, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view/alter_materialized_view.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4085937, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4153714, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.418473, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4189427, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.420805, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4213006, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.422447, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4235215, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.425775, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4267786, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4279916, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4284322, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4296951, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4353755, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4371517, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4389174, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4403062, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.447181, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4482656, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4486122, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4488876, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4493496, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4496295, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4500616, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4503675, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4507594, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4510393, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.451315, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4517443, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4523668, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4527867, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.46102, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4654522, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.465968, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.466301, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4664764, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4667726, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4669924, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4673877, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.468921, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4693, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4697597, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4705346, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4754632, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.47577, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.476204, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4775004, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4777994, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.478123, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4805455, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4829326, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4861867, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.486777, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4874768, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4881465, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.488681, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.490978, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4930205, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4943435, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4947498, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.497086, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4980664, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4985945, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4992256, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.4996817, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5004933, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5009537, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.501481, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5021267, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5027697, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5035727, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5039723, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.504488, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5049853, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5054667, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.505706, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5061295, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.506506, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5138555, "supported_languages": null}, "macro.dbt_external_tables.create_external_schema": {"name": "create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.create_external_schema", "macro_sql": "{%- macro create_external_schema(source_node) -%}\n    {{ adapter.dispatch('create_external_schema', 'dbt_external_tables')(source_node) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_external_tables.bigquery__create_external_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5144832, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_schema": {"name": "default__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.default__create_external_schema", "macro_sql": "{%- macro default__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            {{ source_node.database }}.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set ddl -%}\n        create schema if not exists {{ fqn }}\n    {%- endset -%}\n\n    {{ return(ddl) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5151014, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5155425, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5157845, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5162232, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5164547, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5168438, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5170527, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% if not dbt_external_tables.create_external_schema(source_node)|length %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% endif %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5189986, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n    {% if options is mapping and options.get('connection_name', none) %}\n        {% set connection_name = options.pop('connection_name') %}\n    {% endif %}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        {% if connection_name %}\n            with connection `{{ connection_name }}`\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.524178, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_schema": {"name": "bigquery__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_schema.sql", "original_file_path": "macros/plugins/bigquery/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_schema", "macro_sql": "{%- macro bigquery__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            `{{ source_node.database }}`.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set schema_exists_query %}\n        select * from {{ source_node.database }}.INFORMATION_SCHEMA.SCHEMATA where schema_name = '{{ source_node.schema }}' limit 1\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}  \n\n    {%- if not schema_exists -%}\n        {%- set ddl -%}\n            create schema if not exists {{ fqn }}\n        {%- endset -%}\n        {{ return(ddl) }}\n    {%- else -%}\n        {{ return('') }}\n    {% endif %} \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.526031, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"name": "sqlserver__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5276027, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_table": {"name": "sqlserver__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5301476, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__create_external_schema": {"name": "sqlserver__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_schema.sql", "original_file_path": "macros/plugins/sqlserver/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.sqlserver__create_external_schema", "macro_sql": "{% macro sqlserver__create_external_schema(source_node) %}\n    {# https://learn.microsoft.com/en-us/sql/t-sql/statements/create-schema-transact-sql?view=sql-server-ver16 #}\n\n    {% set ddl %}\n        IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ source_node.schema }}')\n        BEGIN\n        EXEC('CREATE SCHEMA [{{ source_node.schema }}]')\n        END \n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5307438, "supported_languages": null}, "macro.dbt_external_tables.sqlserver__dropif": {"name": "sqlserver__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5314152, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5340557, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set infer_schema = external.infer_schema -%}\n\n    {% if infer_schema %}\n        {% set query_infer_schema %}\n            select * from table( infer_schema( location=>'{{external.location}}', file_format=>'{{external.file_format}}') )\n        {% endset %}\n        {% if execute %}\n            {% set columns_infer = run_query(query_infer_schema) %}\n        {% endif %}\n    {% endif %}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions or infer_schema -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 or infer_schema -}}\n        {%- endfor -%}{%- endif -%}\n        {%- if not infer_schema -%}\n            {%- for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {%- set col_expression -%}\n                    {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {% else %}\n        {%- for column in columns_infer %}\n                {%- set col_expression -%}\n                    {%- set col_id = 'value:' ~ column[0] -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column[0]}} {{column[1]}} as ({{col_expression}}::{{column[1]}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {%- endif -%}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5406845, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_schema": {"name": "snowflake__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_schema.sql", "original_file_path": "macros/plugins/snowflake/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_schema", "macro_sql": "{% macro snowflake__create_external_schema(source_node) %}\n\n    {% set schema_exists_query %}\n        show terse schemas like '{{ source_node.schema }}' in database {{ source_node.database }} limit 1;\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}    \n\n    {% if schema_exists %}\n        {% set ddl %}\n            select 'Schema {{ source_node.schema }} exists' from dual;\n        {% endset %}\n    {% else %}\n        {% set fqn %}\n            {% if source_node.database %}\n                {{ source_node.database }}.{{ source_node.schema }}\n            {% else %}\n                {{ source_node.schema }}\n            {% endif %}\n        {% endset %}\n\n        {% set ddl %}\n            create schema if not exists {{ fqn }};\n        {% endset %}\n    {% endif %}\n\n    {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5428748, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.544539, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5487037, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5496993, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5511372, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5523412, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5548785, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5568407, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n    {%- set columns_and_partitions = columns | list -%}\n    {%- if partitions -%}\n        {%- for i in partitions -%}\n            {%- if i.name not in columns_and_partitions | list | map(attribute='name') -%}\n                {%- do columns_and_partitions.append(i) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns | length > 0 %} (\n        {% for column in columns_and_partitions %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5607371, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5613613, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5624273, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.562758, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5630674, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5635953, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not dbt_external_tables.redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5648522, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5672927, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5739708, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.57579, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5785174, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5801861, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5807033, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5812783, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5816329, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5819712, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5822716, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5841599, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.587004, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5875454, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5881357, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5888708, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5901752, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5908635, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5919998, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.592626, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5930288, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.593985, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5954542, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5960588, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.5969894, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.598614, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6000972, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.600735, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6017158, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6037245, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6043746, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6056645, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6065648, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6070342, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6073031, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6082673, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6098719, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.613606, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6197379, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6214688, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6239703, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6250236, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6254249, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.625767, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6261225, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.626428, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.626732, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6274552, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.627702, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6279705, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6282418, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6297188, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6324182, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.633062, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.634096, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6346416, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.63525, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6357095, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6361623, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6371222, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.638126, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6386847, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.639341, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6399786, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6404943, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6412194, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.642476, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6434987, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6443613, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6446998, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.646024, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6466048, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.647632, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.649086, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.650283, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6510184, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6513824, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6523304, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.65313, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6537445, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6548052, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.65629, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6574547, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6593251, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6631982, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6661286, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.667079, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6685023, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6697588, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.671436, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6723833, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.673819, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6747506, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6759324, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6769571, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6786532, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.679584, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6804583, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6817899, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6835127, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.684223, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6846986, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6854267, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.686065, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6866448, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6872413, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6878564, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.688586, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6893923, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6898942, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6902835, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6905396, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6913311, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.691662, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6925895, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6933188, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6938212, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6940691, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6952856, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.695739, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6962333, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6968045, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6977558, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6982396, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1699396143.6990128, "supported_languages": null}}, "docs": {"doc.project.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "project", "path": "overview.md", "original_file_path": "models/overview.md", "unique_id": "doc.project.__overview__", "block_contents": "# Ed-Fi data marts\n\nThe data marts and models found in this documentation largely reflect Ed-Fi's Analytics Middle Tier. There are some places where additional columns or entirely new data models were added. The documentation will always note when this is the case. This documentation should serve as a companion guide to Ed-Fi's [official documentation](https://techdocs.ed-fi.org/display/EDFITOOLS/AMT+User+Guide)."}, "doc.project.fct_student_attendance": {"name": "fct_student_attendance", "resource_type": "doc", "package_name": "project", "path": "marts/attendance/attendance.md", "original_file_path": "models/marts/attendance/attendance.md", "unique_id": "doc.project.fct_student_attendance", "block_contents": "# Student attendance fact\n\nGrain: one row per student per school year per school per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance by day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date."}, "doc.project.rpt_student_attendance": {"name": "rpt_student_attendance", "resource_type": "doc", "package_name": "project", "path": "marts/attendance/attendance.md", "original_file_path": "models/marts/attendance/attendance.md", "unique_id": "doc.project.rpt_student_attendance", "block_contents": "# Report student attendance\n\nGrain: one row per student per school year per school per instructional day they hold an enrollment\n\nUsed for looking at a student's attendance by day. This fact table provides a row for each instructional day the student holds an enrollment up to the previous date."}, "doc.project.rls_user_student_data_authorization": {"name": "rls_user_student_data_authorization", "resource_type": "doc", "package_name": "project", "path": "marts/row_level_security/row_level_security.md", "original_file_path": "models/marts/row_level_security/row_level_security.md", "unique_id": "doc.project.rls_user_student_data_authorization", "block_contents": "# User student data authorization\n\nThis row-level security (RLS) table has a grain size of one row per student key. `authorized_emails` is a repeated field containing all user emails who are allowed access to the respective student's data.\n\nIf a staff member is actively assigned to a school with a classification of Superintendent, School Administrator, or Principal, they are given access.\n\nIf a staff member is actively assigned to a class section where the student has an association, they are given access.\n\nFinally, each student will have their email included for their respective `student_key` record."}, "doc.project.dim_date": {"name": "dim_date", "resource_type": "doc", "package_name": "project", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "unique_id": "doc.project.dim_date", "block_contents": "# Date dim\n\nA date dimension table can be found in almost every dimensional model and allows the analytics engineer to look at student performance across different time periods. An explicit date dimension table can also help store date attributes that are not supported by a SQL date function (ie. month sort order in the context of a school year).\n\nThis dimension table notably lacks the date key found in Ed-Fi's Analytics Middle Tier. This is also counter to what Kimball tells us to do. Instead, fact tables found in the marts that include a date, use the DATE type. Kimball argues that if a fact table does this, it will cause folks to use SQL functions on that date to extract items like month name and avoid the join to the date dimension when they need to retrieve such information. You should use the date if you need the date and join on the date dimension if you need more."}, "doc.project.dim_grading_period": {"name": "dim_grading_period", "resource_type": "doc", "package_name": "project", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "unique_id": "doc.project.dim_grading_period", "block_contents": "# Grading period dim\n\nGrain: one row per school per grading period"}, "doc.project.dim_local_education_agency": {"name": "dim_local_education_agency", "resource_type": "doc", "package_name": "project", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "unique_id": "doc.project.dim_local_education_agency", "block_contents": "# Local education agency dim\n\nGrain: one row per local education agency"}, "doc.project.dim_school": {"name": "dim_school", "resource_type": "doc", "package_name": "project", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "unique_id": "doc.project.dim_school", "block_contents": "# School dim\n\nGrain: one row per school per school year"}, "doc.project.dim_section": {"name": "dim_section", "resource_type": "doc", "package_name": "project", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "unique_id": "doc.project.dim_section", "block_contents": "# Section dim\n\nGrain: one row per section per school"}, "doc.project.dim_session": {"name": "dim_session", "resource_type": "doc", "package_name": "project", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "unique_id": "doc.project.dim_session", "block_contents": "# Session dim\n\nGrain: one row per school per session"}, "doc.project.dim_staff": {"name": "dim_staff", "resource_type": "doc", "package_name": "project", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "unique_id": "doc.project.dim_staff", "block_contents": "# Staff dim\n\nGrain: one row per staff member per school year"}, "doc.project.dim_student": {"name": "dim_student", "resource_type": "doc", "package_name": "project", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "unique_id": "doc.project.dim_student", "block_contents": "# Student dim\n\nGrain: one record per student per school year\n\nEd-Fi's Analytics Middle Tier provides two student dims related to the student's LEA association and the student's school association. This dim combines those two dims to provide one student dim that can be used downstream. If a student has multiple school enrollments, only their most recent will show in this dim."}, "doc.project.fct_student_section": {"name": "fct_student_section", "resource_type": "doc", "package_name": "project", "path": "marts/core/core.md", "original_file_path": "models/marts/core/core.md", "unique_id": "doc.project.fct_student_section", "block_contents": "# Student section fact\n\nGrain: a row per student section per section enrollment. The `teachers` column is a concatenation of all teachers currently assigned to the class section."}, "doc.project.dim_assessment": {"name": "dim_assessment", "resource_type": "doc", "package_name": "project", "path": "marts/assessments/assessments.md", "original_file_path": "models/marts/assessments/assessments.md", "unique_id": "doc.project.dim_assessment", "block_contents": "# Assessments dim\n\nGrain size: a row per assessment and objective assessment"}, "doc.project.fct_student_assessment": {"name": "fct_student_assessment", "resource_type": "doc", "package_name": "project", "path": "marts/assessments/assessments.md", "original_file_path": "models/marts/assessments/assessments.md", "unique_id": "doc.project.fct_student_assessment", "block_contents": "# Student assessments fact\n\nGrain size: one row per assessment measure per student assessment"}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {"group.project.edfi_amt": {"name": "edfi_amt", "resource_type": "group", "package_name": "project", "path": "marts/marts.yml", "original_file_path": "models/marts/marts.yml", "unique_id": "group.project.edfi_amt", "owner": {"email": null, "name": "edfi_amt"}}, "group.project.edfi_staging": {"name": "edfi_staging", "resource_type": "group", "package_name": "project", "path": "staging/edfi/stg_edfi.yml", "original_file_path": "models/staging/edfi/stg_edfi.yml", "unique_id": "group.project.edfi_staging", "owner": {"email": null, "name": "edfi_staging"}}}, "selectors": {}, "disabled": {"model.project.fct_student_assessment": [{"database": "development-323217", "schema": "dagster_dev", "name": "fct_student_assessment", "resource_type": "model", "package_name": "project", "path": "marts/assessments/fct_student_assessment.sql", "original_file_path": "models/marts/assessments/fct_student_assessment.sql", "unique_id": "model.project.fct_student_assessment", "fqn": ["project", "marts", "assessments", "fct_student_assessment"], "alias": "fct_student_assessment", "checksum": {"name": "sha256", "checksum": "0147e75ba1f4249bbb5a1d31f5ec6d51c7b13a3ff2e765d84fcf33cc0d38c4d6"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "{{ doc(\"fct_student_assessment\") }}", "columns": {"assessment_key": {"name": "assessment_key", "description": "Foreign key to `dim_assessment`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objective_assessment_key": {"name": "objective_assessment_key", "description": "Foreign key to `dim_objective_assessment`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_key": {"name": "student_key", "description": "Foreign key to `dim_student`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_key": {"name": "school_key", "description": "Foreign key to `dim_school`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_assessment_identifier": {"name": "student_assessment_identifier", "description": "Unique identifier for student assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "administration_date": {"name": "administration_date", "description": "Date the assessment was administered", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assessed_grade_level": {"name": "assessed_grade_level", "description": "Grade level of student when assessment was administered", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reporting_method": {"name": "reporting_method", "description": "Describes how the results of the assessment are reported.  This will create multiple records if there are multiple reporting methods associated with the assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_result_data_type": {"name": "student_result_data_type", "description": "Describes what format the results for the assessment are reported", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "student_result": {"name": "student_result", "description": "The documented score for the student for the corresponding assessment or objective assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/assessments/assessments.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "enabled": false}, "created_at": 1699396144.7040865, "config_call_dict": {"enabled": false}, "relation_name": "`development-323217`.`dagster_dev`.`fct_student_assessment`", "raw_code": "{{ config(\n  enabled=false\n) }}\n-- student assessment score results\nselect distinct\n    {{ dbt_utils.generate_surrogate_key([\n        'student_assessments.assessment_reference.assessment_identifier',\n        'student_assessments.assessment_reference.namespace'\n    ]) }}                                                                           as assessment_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'student_assessments.student_reference.student_unique_id',\n        'student_assessments.school_year'\n    ]) }}                                                                           as student_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'student_school_associations.school_reference.school_id',\n        'student_assessments.school_year'\n    ]) }}                                                                           as school_key,\n    student_assessments.school_year                                                 as school_year,\n    student_assessments.student_assessment_identifier                               as student_assessment_identifier,\n    student_assessments.administration_date                                         as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                        as assessed_grade_level,\n    score_results.assessment_reporting_method_descriptor                            as reporting_method,\n    score_results.result_datatype_type_descriptor                                   as student_result_data_type,\n    score_results.result                                                            as student_result\nfrom {{ ref('stg_edfi_student_assessments') }} student_assessments\nleft join unnest(student_assessments.score_results) as score_results\nleft join unnest(student_assessments.performance_levels) as performance_levels\nleft join {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        or student_school_associations.exit_withdraw_date is null\n    )\n\n\nunion all\n\n\n--student assessment performance levels\nselect distinct\n    {{ dbt_utils.generate_surrogate_key([\n        'student_assessments.assessment_reference.assessment_identifier',\n        'student_assessments.assessment_reference.namespace'\n    ]) }}                                                                           as assessment_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'student_assessments.student_reference.student_unique_id',\n        'student_assessments.school_year'\n    ]) }}                                                                           as student_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'student_school_associations.school_reference.school_id',\n        'student_assessments.school_year'\n    ]) }}                                                                           as school_key,\n    student_assessments.school_year                                                 as school_year,\n    student_assessments.student_assessment_identifier                               as student_assessment_identifier,\n    student_assessments.administration_date                                         as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                        as assessed_grade_level,\n    performance_levels.assessment_reporting_method_descriptor                       as reporting_method,\n    'Performance Level'                                                             as student_result_data_type,\n    performance_levels.performance_level_descriptor                                 as student_result\nfrom {{ ref('stg_edfi_student_assessments') }} student_assessments\nleft join unnest(student_assessments.performance_levels) as performance_levels\nleft join {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        or student_school_associations.exit_withdraw_date is null\n    )\n\n\nunion all\n\n\n-- student objective assessment score results\nselect distinct\n    {{ dbt_utils.generate_surrogate_key([\n        'student_assessments.assessment_reference.assessment_identifier',\n        'student_assessments.assessment_reference.namespace',\n        'student_objective_assessments.objective_assessment_reference.identification_code'\n    ]) }}                                                                                as assessment_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'student_assessments.student_reference.student_unique_id',\n        'student_assessments.school_year'\n    ]) }}                                                                                as student_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'student_school_associations.school_reference.school_id',\n        'student_assessments.school_year'\n    ]) }}                                                                                as school_key,\n    student_assessments.school_year                                                      as school_year,\n    student_assessments.student_assessment_identifier                                    as student_assessment_identifier,\n    student_assessments.administration_date                                              as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                             as assessed_grade_level,\n    student_objective_assessments_score_results.assessment_reporting_method_descriptor   as reporting_method,\n    student_objective_assessments_score_results.result_datatype_type_descriptor          as student_result_data_type,\n    student_objective_assessments_score_results.result                                   as student_result\nfrom {{ ref('stg_edfi_student_assessments') }} student_assessments\nleft join unnest(student_assessments.student_objective_assessments) as student_objective_assessments\nleft join unnest(student_objective_assessments.score_results) as student_objective_assessments_score_results\nleft join {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        or student_school_associations.exit_withdraw_date is null\n    )\n\n\nunion all\n\n\n-- student objective assessment performance levels\nselect distinct\n    {{ dbt_utils.generate_surrogate_key([\n        'student_assessments.assessment_reference.assessment_identifier',\n        'student_assessments.assessment_reference.namespace',\n        'student_objective_assessments.objective_assessment_reference.identification_code'\n    ]) }}                                                                                     as assessment_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'student_assessments.student_reference.student_unique_id',\n        'student_assessments.school_year'\n    ]) }}                                                                                     as student_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'student_school_associations.school_reference.school_id',\n        'student_assessments.school_year'\n    ]) }}                                                                                     as school_key,\n    student_assessments.school_year                                                           as school_year,\n    student_assessments.student_assessment_identifier                                         as student_assessment_identifier,\n    student_assessments.administration_date                                                   as administration_date,\n    student_assessments.when_assessed_grade_level_descriptor                                  as assessed_grade_level,\n    student_objective_assessments_performance_levels.assessment_reporting_method_descriptor   as reporting_method,\n    'Performance Level'                                                                       as student_result_data_type,\n    student_objective_assessments_performance_levels.performance_level_descriptor             as student_result\nfrom {{ ref('stg_edfi_student_assessments') }} student_assessments\nleft join unnest(student_assessments.student_objective_assessments) as student_objective_assessments\nleft join unnest(student_objective_assessments.performance_levels) as student_objective_assessments_performance_levels\nleft join {{ ref('stg_edfi_student_school_associations') }} student_school_associations\n    on student_assessments.school_year = student_school_associations.school_year\n    and student_assessments.student_reference.student_unique_id = student_school_associations.student_reference.student_unique_id\n    and student_assessments.administration_date >= student_school_associations.entry_date\n    and (\n        student_assessments.administration_date <= student_school_associations.exit_withdraw_date\n        or student_school_associations.exit_withdraw_date is null\n    )", "language": "sql", "refs": [{"name": "stg_edfi_student_assessments", "package": null, "version": null}, {"name": "stg_edfi_student_school_associations", "package": null, "version": null}, {"name": "stg_edfi_student_assessments", "package": null, "version": null}, {"name": "stg_edfi_student_school_associations", "package": null, "version": null}, {"name": "stg_edfi_student_assessments", "package": null, "version": null}, {"name": "stg_edfi_student_school_associations", "package": null, "version": null}, {"name": "stg_edfi_student_assessments", "package": null, "version": null}, {"name": "stg_edfi_student_school_associations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.project.dim_assessment": [{"database": "development-323217", "schema": "dagster_dev", "name": "dim_assessment", "resource_type": "model", "package_name": "project", "path": "marts/assessments/dim_assessment.sql", "original_file_path": "models/marts/assessments/dim_assessment.sql", "unique_id": "model.project.dim_assessment", "fqn": ["project", "marts", "assessments", "dim_assessment"], "alias": "dim_assessment", "checksum": {"name": "sha256", "checksum": "b7ed9c9bebaaad708a848c969c6c1f3fb1e71d6e287c60e99d522693c545bc05"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "{{ doc(\"dim_assessment\") }}", "columns": {"assessment_key": {"name": "assessment_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "education_organization_key": {"name": "education_organization_key", "description": "Primary key for dimension table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "school_year": {"name": "school_year", "description": "School year", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assessment_identifier": {"name": "assessment_identifier", "description": "The unique identifier that describes the assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "assessment_family": {"name": "assessment_family", "description": "Assessment family", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "namespace": {"name": "namespace", "description": "Typically defines the vendor who sent the assessment data", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "The title description of the assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "version": {"name": "version", "description": "Describes what version the assessment or objective assessment focuses on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "Describes what category the assessment or objective assessment focuses on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "form": {"name": "form", "description": "This is the minimum score that can be achieved for this assessment or objective assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adaptive_assessment": {"name": "adaptive_assessment", "description": "This is the maximum score that can be achieved for this assessment or objective assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objective_assessment_identification_code": {"name": "objective_assessment_identification_code", "description": "Unique identifier for objective assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objective_assessment_academic_subject": {"name": "objective_assessment_academic_subject", "description": "Academic subject for objective assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "objective_assessment_description": {"name": "objective_assessment_description", "description": "Description for objective assessment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "project://models/marts/assessments/assessments.yml", "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "enabled": false}, "created_at": 1699396144.7011228, "config_call_dict": {"enabled": false}, "relation_name": "`development-323217`.`dagster_dev`.`dim_assessment`", "raw_code": "{{ config(\n  enabled=false\n) }}\nselect\n    {{ dbt_utils.generate_surrogate_key([\n        'assessments.assessment_identifier',\n        'assessments.namespace',\n    ]) }}                                               as assessment_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'education_organization_reference.education_organization_id',\n        'assessments.school_year'\n    ]) }}                                               as education_organization_key,\n    assessments.school_year                             as school_year,\n    assessments.assessment_identifier                   as assessment_identifier,\n    assessments.assessment_family                       as assessment_family,\n    assessments.namespace                               as namespace,\n    assessments.assessment_title                        as title,\n    ifnull(assessments.assessment_version, 0)           as version,\n    assessments.assessment_category_descriptor\t        as category,\n    assessment_form                                     as form,\n    if(adaptive_assessment is true, 'Yes', 'No')        as adaptive_assessment,\n    NULL                                                as objective_assessment_identification_code,\n    NULL                                                as objective_assessment_academic_subject,\n    NULL                                                as objective_assessment_description\nfrom {{ ref('stg_edfi_assessments') }} assessments\n\n\nunion all\n\n\nselect\n    {{ dbt_utils.generate_surrogate_key([\n        'assessments.assessment_identifier',\n        'assessments.namespace',\n        'objective_assessments.identification_code'\n    ]) }}                                               as assessment_key,\n    {{ dbt_utils.generate_surrogate_key([\n        'education_organization_reference.education_organization_id',\n        'assessments.school_year'\n    ]) }}                                               as education_organization_key,\n    assessments.school_year                             as school_year,\n    assessments.assessment_identifier                   as assessment_identifier,\n    assessments.assessment_family                       as assessment_family,\n    assessments.namespace                               as namespace,\n    assessments.assessment_title                        as title,\n    ifnull(assessments.assessment_version, 0)           as version,\n    assessments.assessment_category_descriptor\t        as category,\n    assessment_form                                     as form,\n    if(adaptive_assessment is true, 'Yes', 'No')        as adaptive_assessment,\n    objective_assessments.identification_code           as objective_assessment_identification_code,\n    objective_assessments.academic_subject_descriptor   as objective_assessment_academic_subject,\n    objective_assessments.description                   as objective_assessment_description\nfrom {{ ref('stg_edfi_assessments') }} assessments\nleft join {{ ref('stg_edfi_objective_assessments') }} objective_assessments\n    on assessments.assessment_identifier = objective_assessments.assessment_reference.assessment_identifier\n    and assessments.namespace = objective_assessments.assessment_reference.namespace\n    and assessments.school_year = objective_assessments.school_year", "language": "sql", "refs": [{"name": "stg_edfi_assessments", "package": null, "version": null}, {"name": "stg_edfi_assessments", "package": null, "version": null}, {"name": "stg_edfi_objective_assessments", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.project.rpt_student_assessment": [{"database": "development-323217", "schema": "dagster_dev", "name": "rpt_student_assessment", "resource_type": "model", "package_name": "project", "path": "marts/assessments/rpt_student_assessment.sql", "original_file_path": "models/marts/assessments/rpt_student_assessment.sql", "unique_id": "model.project.rpt_student_assessment", "fqn": ["project", "marts", "assessments", "rpt_student_assessment"], "alias": "rpt_student_assessment", "checksum": {"name": "sha256", "checksum": "114e2202d67b88b481512bf0e2c3064552273f5bb13b3fdf6a72bc9a7cce35fa"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"persist_docs": {"relation": true, "columns": true}, "materialized": "table", "enabled": false}, "created_at": 1699396144.3073535, "config_call_dict": {"enabled": false}, "relation_name": "`development-323217`.`dagster_dev`.`rpt_student_assessment`", "raw_code": "{{ config(\n  enabled=false\n) }}\nwith assessments as (\n\n    select\n        fct_student_assessment.school_year,\n        fct_student_assessment.student_assessment_identifier,\n        ARRAY_AGG(\n            struct(\n                fct_student_assessment.reporting_method                    as reporting_method,\n                fct_student_assessment.student_result                      as student_result\n            )\n        ) as assessment_student_score\n    from {{ ref('fct_student_assessment') }} fct_student_assessment\n    left join {{ ref('dim_assessment') }} dim_assessment\n        on fct_student_assessment.assessment_key = dim_assessment.assessment_key\n    where dim_assessment.objective_assessment_identification_code is null\n    group by 1, 2\n\n),\n\nobjective_assessments as (\n\n    select\n        fct_student_assessment.school_year,\n        fct_student_assessment.student_assessment_identifier,\n        ARRAY_AGG(\n            struct(\n                dim_assessment.objective_assessment_identification_code              as identification_code,\n                dim_assessment.objective_assessment_description                      as description,\n                fct_student_assessment.reporting_method                                        as reporting_method,\n                fct_student_assessment.student_result                                          as student_result\n            )\n        ) as objective_assessment_student_score\n    from {{ ref('fct_student_assessment') }} fct_student_assessment\n    left join {{ ref('dim_assessment') }} dim_assessment\n        on fct_student_assessment.assessment_key = dim_assessment.assessment_key\n    where dim_assessment.objective_assessment_identification_code is not null\n    group by 1, 2\n\n)\n\nselect\n    fct_student_assessment.school_year                          as school_year,\n    dim_school.school_name                                      as school_name,\n    dim_student.student_unique_id                               as student_unique_id,\n    dim_student.student_last_surname                            as student_last_surname,\n    dim_student.student_first_name                              as student_first_name,\n    dim_student.student_display_name                            as student_display_name,\n    dim_student.is_actively_enrolled_in_school                  as is_actively_enrolled_in_school,\n    dim_student.grade_level                                     as grade_level,\n    dim_student.grade_level_id                                  as grade_level_id,\n    dim_student.gender                                          as gender,\n    dim_student.limited_english_proficiency                     as limited_english_proficiency,\n    dim_student.is_english_language_learner                     as is_english_language_learner,\n    dim_student.in_special_education_program                    as in_special_education_program,\n    dim_student.is_hispanic                                     as is_hispanic,\n    dim_student.race_and_ethnicity_roll_up                      as race_and_ethnicity_roll_up,\n    dim_assessment.assessment_identifier                        as assessment_identifier,\n    dim_assessment.title                                        as title,\n    dim_assessment.namespace                                    as namespace,\n    fct_student_assessment.student_assessment_identifier        as student_assessment_identifier,\n    objective_assessments.objective_assessment_student_score    as objective_assessment_student_score,\n    assessments.assessment_student_score                        as assessment_student_score\nfrom {{ ref('fct_student_assessment') }} fct_student_assessment\nleft join {{ ref('dim_assessment') }} dim_assessment\n    on fct_student_assessment.assessment_key = dim_assessment.assessment_key\nleft join assessments\n    on fct_student_assessment.student_assessment_identifier = assessments.student_assessment_identifier\nleft join objective_assessments\n    on fct_student_assessment.student_assessment_identifier = objective_assessments.student_assessment_identifier\nleft join {{ ref('dim_student') }} dim_student\n    on fct_student_assessment.student_key = dim_student.student_key\nleft join {{ ref('dim_school') }} dim_school\n    on fct_student_assessment.school_key = dim_school.school_key\nwhere \n    dim_assessment.objective_assessment_identification_code is null\n    and dim_student.student_unique_id is not null", "language": "sql", "refs": [{"name": "fct_student_assessment", "package": null, "version": null}, {"name": "dim_assessment", "package": null, "version": null}, {"name": "fct_student_assessment", "package": null, "version": null}, {"name": "dim_assessment", "package": null, "version": null}, {"name": "fct_student_assessment", "package": null, "version": null}, {"name": "dim_assessment", "package": null, "version": null}, {"name": "dim_student", "package": null, "version": null}, {"name": "dim_school", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}]}, "parent_map": {"model.project.fct_student_attendance": ["model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_schools", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_school_attendance_events", "model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_student_section_attendance_events", "model.project.stg_edfi_students"], "model.project.rpt_student_attendance": ["model.project.dim_date", "model.project.dim_school", "model.project.dim_student", "model.project.fct_student_attendance", "model.project.rls_user_student_data_authorization"], "model.project.rls_user_student_data_authorization": ["model.project.bridge_staff_group", "model.project.dim_staff", "model.project.dim_student", "model.project.fct_staff_school", "model.project.fct_student_school", "model.project.fct_student_section"], "model.project.dim_student": ["model.project.stg_edfi_programs", "model.project.stg_edfi_sessions", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_students"], "model.project.dim_local_education_agency": ["model.project.stg_edfi_local_education_agencies"], "model.project.fct_staff_school": ["model.project.stg_edfi_schools", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_staff_school_associations"], "model.project.dim_staff": ["model.project.stg_edfi_staffs"], "model.project.fct_student_school": ["model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_schools", "model.project.stg_edfi_student_school_associations"], "model.project.dim_session": ["model.project.stg_edfi_school_year_types", "model.project.stg_edfi_sessions"], "model.project.dim_grading_period": ["model.project.stg_edfi_grades", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_school_year_types", "model.project.stg_edfi_sessions"], "model.project.dim_section": ["model.project.stg_edfi_course_offerings", "model.project.stg_edfi_courses", "model.project.stg_edfi_schools", "model.project.stg_edfi_sections", "model.project.stg_edfi_sessions"], "model.project.bridge_staff_group": ["model.project.stg_edfi_course_offerings", "model.project.stg_edfi_sections", "model.project.stg_edfi_sessions", "model.project.stg_edfi_staff_section_associations"], "model.project.dim_school": ["model.project.stg_edfi_local_education_agencies", "model.project.stg_edfi_schools"], "model.project.fct_student_section": ["model.project.stg_edfi_course_offerings", "model.project.stg_edfi_student_section_associations"], "model.project.dim_date": ["model.project.stg_edfi_calendar_dates"], "model.project.stg_edfi_programs": ["source.project.staging.base_edfi_programs"], "model.project.stg_edfi_staff_education_organization_assignment_associations": ["source.project.staging.base_edfi_staff_education_organization_assignment_associations"], "model.project.stg_edfi_course_offerings": ["source.project.staging.base_edfi_course_offerings"], "model.project.stg_edfi_student_program_associations": ["source.project.staging.base_edfi_student_program_associations"], "model.project.stg_edfi_school_year_types": ["source.project.staging.base_edfi_school_year_types"], "model.project.stg_edfi_grading_periods": ["source.project.staging.base_edfi_grading_periods"], "model.project.stg_edfi_student_special_education_program_associations": ["source.project.staging.base_edfi_student_special_education_program_associations"], "model.project.stg_edfi_students": ["source.project.staging.base_edfi_students"], "model.project.stg_edfi_staffs": ["source.project.staging.base_edfi_staffs"], "model.project.stg_edfi_calendar_dates": ["source.project.staging.base_edfi_calendar_dates"], "model.project.stg_edfi_staff_school_associations": ["source.project.staging.base_edfi_staff_school_associations"], "model.project.stg_edfi_calendars": ["source.project.staging.base_edfi_calendars"], "model.project.stg_edfi_sessions": ["source.project.staging.base_edfi_sessions"], "model.project.stg_edfi_staff_section_associations": ["source.project.staging.base_edfi_staff_section_associations"], "model.project.stg_edfi_student_section_attendance_events": ["source.project.staging.base_edfi_student_section_attendance_events"], "model.project.stg_edfi_local_education_agencies": ["source.project.staging.base_edfi_local_education_agencies"], "model.project.stg_edfi_sections": ["source.project.staging.base_edfi_sections"], "model.project.stg_edfi_student_education_organization_associations": ["source.project.staging.base_edfi_student_education_organization_associations"], "model.project.stg_edfi_student_school_attendance_events": ["source.project.staging.base_edfi_student_school_attendance_events"], "model.project.stg_edfi_student_school_associations": ["source.project.staging.base_edfi_student_school_associations"], "model.project.stg_edfi_schools": ["source.project.staging.base_edfi_schools"], "model.project.stg_edfi_student_section_associations": ["source.project.staging.base_edfi_student_section_associations"], "model.project.stg_edfi_courses": ["source.project.staging.base_edfi_courses"], "model.project.stg_edfi_grades": ["source.project.staging.base_edfi_grades"], "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0": ["model.project.dim_local_education_agency", "model.project.fct_student_attendance"], "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7": ["model.project.dim_school", "model.project.fct_student_attendance"], "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a": ["model.project.dim_student", "model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_school_year.c69c139be1": ["model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_date.1c7057eb63": ["model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8": ["model.project.fct_student_attendance"], "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51": ["model.project.fct_student_attendance"], "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6": ["model.project.dim_student", "model.project.rls_user_student_data_authorization"], "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2": ["model.project.bridge_staff_group"], "test.project.unique_dim_date_date.dd069a8d31": ["model.project.dim_date"], "test.project.not_null_dim_date_date.78f11e7735": ["model.project.dim_date"], "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec": ["model.project.dim_grading_period"], "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d": ["model.project.dim_grading_period"], "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34": ["model.project.dim_grading_period", "model.project.dim_school"], "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69": ["model.project.dim_local_education_agency"], "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d": ["model.project.dim_local_education_agency"], "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627": ["model.project.dim_local_education_agency"], "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9": ["model.project.dim_local_education_agency"], "test.project.unique_dim_school_school_key.64ec309207": ["model.project.dim_school"], "test.project.not_null_dim_school_school_key.209ee6078e": ["model.project.dim_school"], "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b": ["model.project.dim_local_education_agency", "model.project.dim_school"], "test.project.unique_dim_school_school_id.d10cafcd76": ["model.project.dim_school"], "test.project.not_null_dim_school_school_id.36d55ce30b": ["model.project.dim_school"], "test.project.unique_dim_section_section_key.4b442b173b": ["model.project.dim_section"], "test.project.not_null_dim_section_section_key.d763cc8042": ["model.project.dim_section"], "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93": ["model.project.dim_school", "model.project.dim_section"], "test.project.not_null_dim_section_section_identifier.5aa4059a37": ["model.project.dim_section"], "test.project.unique_dim_session_session_key.b5230e3fd3": ["model.project.dim_session"], "test.project.not_null_dim_session_session_key.2c2f8e6dac": ["model.project.dim_session"], "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7": ["model.project.dim_school", "model.project.dim_session"], "test.project.unique_dim_staff_staff_key.eebb0d941a": ["model.project.dim_staff"], "test.project.not_null_dim_staff_staff_key.b7dc3eb451": ["model.project.dim_staff"], "test.project.unique_dim_student_student_key.45ef646b54": ["model.project.dim_student"], "test.project.not_null_dim_student_student_key.67ab09a6e6": ["model.project.dim_student"], "test.project.not_null_dim_student_school_year.cb1c50e460": ["model.project.dim_student"], "test.project.not_null_dim_student_student_unique_id.8a392fc4ab": ["model.project.dim_student"], "test.project.not_null_dim_student_student_first_name.f007907dff": ["model.project.dim_student"], "test.project.not_null_dim_student_student_middle_name.eaf7fc7f0e": ["model.project.dim_student"], "test.project.not_null_dim_student_student_last_surname.329ae57d5b": ["model.project.dim_student"], "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d": ["model.project.dim_student"], "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1": ["model.project.dim_student"], "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3": ["model.project.dim_student"], "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1": ["model.project.dim_student"], "test.project.not_null_dim_student_is_hispanic.2f36046142": ["model.project.dim_student"], "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221": ["model.project.dim_student"], "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5": ["model.project.dim_student", "model.project.fct_student_school"], "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4": ["model.project.dim_local_education_agency", "model.project.fct_student_school"], "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae": ["model.project.dim_school", "model.project.fct_student_school"], "test.project.unique_dim_assessment_assessment_key.d45cb819a0": [], "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf": [], "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2": [], "test.project.not_null_dim_assessment_school_year.6f50975711": [], "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef": [], "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd": [], "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72": ["model.project.dim_student"], "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49": ["model.project.dim_school"], "test.project.not_null_fct_student_assessment_school_year.d353cc4178": [], "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748": [], "test.project.unique_stg_edfi_local_education_agencies_concat_school_year_local_education_agency_id_.231d86e41d": ["model.project.stg_edfi_local_education_agencies"], "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d": ["model.project.stg_edfi_schools", "model.project.stg_edfi_sessions"], "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48": ["model.project.stg_edfi_students"], "source.project.staging.base_edfi_calendars": [], "source.project.staging.base_edfi_calendar_dates": [], "source.project.staging.base_edfi_courses": [], "source.project.staging.base_edfi_course_offerings": [], "source.project.staging.base_edfi_grades": [], "source.project.staging.base_edfi_grading_periods": [], "source.project.staging.base_edfi_local_education_agencies": [], "source.project.staging.base_edfi_programs": [], "source.project.staging.base_edfi_schools": [], "source.project.staging.base_edfi_school_year_types": [], "source.project.staging.base_edfi_sections": [], "source.project.staging.base_edfi_sessions": [], "source.project.staging.base_edfi_staffs": [], "source.project.staging.base_edfi_staff_education_organization_assignment_associations": [], "source.project.staging.base_edfi_staff_school_associations": [], "source.project.staging.base_edfi_staff_section_associations": [], "source.project.staging.base_edfi_students": [], "source.project.staging.base_edfi_student_education_organization_associations": [], "source.project.staging.base_edfi_student_program_associations": [], "source.project.staging.base_edfi_student_school_associations": [], "source.project.staging.base_edfi_student_school_attendance_events": [], "source.project.staging.base_edfi_student_section_associations": [], "source.project.staging.base_edfi_student_section_attendance_events": [], "source.project.staging.base_edfi_student_special_education_program_associations": []}, "child_map": {"model.project.fct_student_attendance": ["model.project.rpt_student_attendance", "test.project.not_null_fct_student_attendance_date.1c7057eb63", "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51", "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8", "test.project.not_null_fct_student_attendance_school_year.c69c139be1", "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0", "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a"], "model.project.rpt_student_attendance": [], "model.project.rls_user_student_data_authorization": ["model.project.rpt_student_attendance", "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6"], "model.project.dim_student": ["model.project.rls_user_student_data_authorization", "model.project.rpt_student_attendance", "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1", "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1", "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221", "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3", "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d", "test.project.not_null_dim_student_is_hispanic.2f36046142", "test.project.not_null_dim_student_school_year.cb1c50e460", "test.project.not_null_dim_student_student_first_name.f007907dff", "test.project.not_null_dim_student_student_key.67ab09a6e6", "test.project.not_null_dim_student_student_last_surname.329ae57d5b", "test.project.not_null_dim_student_student_middle_name.eaf7fc7f0e", "test.project.not_null_dim_student_student_unique_id.8a392fc4ab", "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72", "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a", "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5", "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6", "test.project.unique_dim_student_student_key.45ef646b54"], "model.project.dim_local_education_agency": ["test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9", "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d", "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0", "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627", "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69"], "model.project.fct_staff_school": ["model.project.rls_user_student_data_authorization"], "model.project.dim_staff": ["model.project.rls_user_student_data_authorization", "test.project.not_null_dim_staff_staff_key.b7dc3eb451", "test.project.unique_dim_staff_staff_key.eebb0d941a"], "model.project.fct_student_school": ["model.project.rls_user_student_data_authorization", "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae", "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5"], "model.project.dim_session": ["test.project.not_null_dim_session_session_key.2c2f8e6dac", "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "test.project.unique_dim_session_session_key.b5230e3fd3"], "model.project.dim_grading_period": ["test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d", "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec"], "model.project.dim_section": ["test.project.not_null_dim_section_section_identifier.5aa4059a37", "test.project.not_null_dim_section_section_key.d763cc8042", "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "test.project.unique_dim_section_section_key.4b442b173b"], "model.project.bridge_staff_group": ["model.project.rls_user_student_data_authorization", "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2"], "model.project.dim_school": ["model.project.rpt_student_attendance", "test.project.not_null_dim_school_school_id.36d55ce30b", "test.project.not_null_dim_school_school_key.209ee6078e", "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49", "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae", "test.project.unique_dim_school_school_id.d10cafcd76", "test.project.unique_dim_school_school_key.64ec309207"], "model.project.fct_student_section": ["model.project.rls_user_student_data_authorization"], "model.project.dim_date": ["model.project.rpt_student_attendance", "test.project.not_null_dim_date_date.78f11e7735", "test.project.unique_dim_date_date.dd069a8d31"], "model.project.stg_edfi_programs": ["model.project.dim_student"], "model.project.stg_edfi_staff_education_organization_assignment_associations": ["model.project.fct_staff_school"], "model.project.stg_edfi_course_offerings": ["model.project.bridge_staff_group", "model.project.dim_section", "model.project.fct_student_section"], "model.project.stg_edfi_student_program_associations": [], "model.project.stg_edfi_school_year_types": ["model.project.dim_grading_period", "model.project.dim_session"], "model.project.stg_edfi_grading_periods": ["model.project.dim_grading_period"], "model.project.stg_edfi_student_special_education_program_associations": ["model.project.dim_student"], "model.project.stg_edfi_students": ["model.project.dim_student", "model.project.fct_student_attendance", "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48"], "model.project.stg_edfi_staffs": ["model.project.dim_staff"], "model.project.stg_edfi_calendar_dates": ["model.project.dim_date", "model.project.fct_student_attendance", "model.project.fct_student_school"], "model.project.stg_edfi_staff_school_associations": ["model.project.fct_staff_school"], "model.project.stg_edfi_calendars": [], "model.project.stg_edfi_sessions": ["model.project.bridge_staff_group", "model.project.dim_grading_period", "model.project.dim_section", "model.project.dim_session", "model.project.dim_student", "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d"], "model.project.stg_edfi_staff_section_associations": ["model.project.bridge_staff_group"], "model.project.stg_edfi_student_section_attendance_events": ["model.project.fct_student_attendance"], "model.project.stg_edfi_local_education_agencies": ["model.project.dim_local_education_agency", "model.project.dim_school", "test.project.unique_stg_edfi_local_education_agencies_concat_school_year_local_education_agency_id_.231d86e41d"], "model.project.stg_edfi_sections": ["model.project.bridge_staff_group", "model.project.dim_section"], "model.project.stg_edfi_student_education_organization_associations": ["model.project.dim_student"], "model.project.stg_edfi_student_school_attendance_events": ["model.project.fct_student_attendance"], "model.project.stg_edfi_student_school_associations": ["model.project.dim_student", "model.project.fct_student_attendance", "model.project.fct_student_school"], "model.project.stg_edfi_schools": ["model.project.dim_school", "model.project.dim_section", "model.project.fct_staff_school", "model.project.fct_student_attendance", "model.project.fct_student_school", "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d"], "model.project.stg_edfi_student_section_associations": ["model.project.fct_student_attendance", "model.project.fct_student_section"], "model.project.stg_edfi_courses": ["model.project.dim_section"], "model.project.stg_edfi_grades": ["model.project.dim_grading_period"], "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0": [], "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7": [], "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a": [], "test.project.not_null_fct_student_attendance_school_year.c69c139be1": [], "test.project.not_null_fct_student_attendance_date.1c7057eb63": [], "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8": [], "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51": [], "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6": [], "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2": [], "test.project.unique_dim_date_date.dd069a8d31": [], "test.project.not_null_dim_date_date.78f11e7735": [], "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec": [], "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d": [], "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34": [], "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69": [], "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d": [], "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627": [], "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9": [], "test.project.unique_dim_school_school_key.64ec309207": [], "test.project.not_null_dim_school_school_key.209ee6078e": [], "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b": [], "test.project.unique_dim_school_school_id.d10cafcd76": [], "test.project.not_null_dim_school_school_id.36d55ce30b": [], "test.project.unique_dim_section_section_key.4b442b173b": [], "test.project.not_null_dim_section_section_key.d763cc8042": [], "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93": [], "test.project.not_null_dim_section_section_identifier.5aa4059a37": [], "test.project.unique_dim_session_session_key.b5230e3fd3": [], "test.project.not_null_dim_session_session_key.2c2f8e6dac": [], "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7": [], "test.project.unique_dim_staff_staff_key.eebb0d941a": [], "test.project.not_null_dim_staff_staff_key.b7dc3eb451": [], "test.project.unique_dim_student_student_key.45ef646b54": [], "test.project.not_null_dim_student_student_key.67ab09a6e6": [], "test.project.not_null_dim_student_school_year.cb1c50e460": [], "test.project.not_null_dim_student_student_unique_id.8a392fc4ab": [], "test.project.not_null_dim_student_student_first_name.f007907dff": [], "test.project.not_null_dim_student_student_middle_name.eaf7fc7f0e": [], "test.project.not_null_dim_student_student_last_surname.329ae57d5b": [], "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d": [], "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1": [], "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3": [], "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1": [], "test.project.not_null_dim_student_is_hispanic.2f36046142": [], "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221": [], "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5": [], "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4": [], "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae": [], "test.project.unique_dim_assessment_assessment_key.d45cb819a0": [], "test.project.not_null_dim_assessment_assessment_key.1ee4792dcf": [], "test.project.not_null_dim_assessment_education_organization_key.e46eded9e2": [], "test.project.not_null_dim_assessment_school_year.6f50975711": [], "test.project.not_null_dim_assessment_assessment_identifier.b01a1c84ef": [], "test.project.relationships_fct_student_assessment_assessment_key__assessment_key__ref_dim_assessment_.fb7625afbd": [], "test.project.relationships_fct_student_assessment_student_key__student_key__ref_dim_student_.505c0cae72": [], "test.project.relationships_fct_student_assessment_school_key__school_key__ref_dim_school_.6d4121ee49": [], "test.project.not_null_fct_student_assessment_school_year.d353cc4178": [], "test.project.not_null_fct_student_assessment_student_assessment_identifier.bf72913748": [], "test.project.unique_stg_edfi_local_education_agencies_concat_school_year_local_education_agency_id_.231d86e41d": [], "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d": [], "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48": [], "source.project.staging.base_edfi_calendars": ["model.project.stg_edfi_calendars"], "source.project.staging.base_edfi_calendar_dates": ["model.project.stg_edfi_calendar_dates"], "source.project.staging.base_edfi_courses": ["model.project.stg_edfi_courses"], "source.project.staging.base_edfi_course_offerings": ["model.project.stg_edfi_course_offerings"], "source.project.staging.base_edfi_grades": ["model.project.stg_edfi_grades"], "source.project.staging.base_edfi_grading_periods": ["model.project.stg_edfi_grading_periods"], "source.project.staging.base_edfi_local_education_agencies": ["model.project.stg_edfi_local_education_agencies"], "source.project.staging.base_edfi_programs": ["model.project.stg_edfi_programs"], "source.project.staging.base_edfi_schools": ["model.project.stg_edfi_schools"], "source.project.staging.base_edfi_school_year_types": ["model.project.stg_edfi_school_year_types"], "source.project.staging.base_edfi_sections": ["model.project.stg_edfi_sections"], "source.project.staging.base_edfi_sessions": ["model.project.stg_edfi_sessions"], "source.project.staging.base_edfi_staffs": ["model.project.stg_edfi_staffs"], "source.project.staging.base_edfi_staff_education_organization_assignment_associations": ["model.project.stg_edfi_staff_education_organization_assignment_associations"], "source.project.staging.base_edfi_staff_school_associations": ["model.project.stg_edfi_staff_school_associations"], "source.project.staging.base_edfi_staff_section_associations": ["model.project.stg_edfi_staff_section_associations"], "source.project.staging.base_edfi_students": ["model.project.stg_edfi_students"], "source.project.staging.base_edfi_student_education_organization_associations": ["model.project.stg_edfi_student_education_organization_associations"], "source.project.staging.base_edfi_student_program_associations": ["model.project.stg_edfi_student_program_associations"], "source.project.staging.base_edfi_student_school_associations": ["model.project.stg_edfi_student_school_associations"], "source.project.staging.base_edfi_student_school_attendance_events": ["model.project.stg_edfi_student_school_attendance_events"], "source.project.staging.base_edfi_student_section_associations": ["model.project.stg_edfi_student_section_associations"], "source.project.staging.base_edfi_student_section_attendance_events": ["model.project.stg_edfi_student_section_attendance_events"], "source.project.staging.base_edfi_student_special_education_program_associations": ["model.project.stg_edfi_student_special_education_program_associations"]}, "group_map": {"edfi_amt": ["model.project.fct_student_attendance", "model.project.rpt_student_attendance", "model.project.rls_user_student_data_authorization", "model.project.dim_student", "model.project.dim_local_education_agency", "model.project.fct_staff_school", "model.project.dim_staff", "model.project.fct_student_school", "model.project.dim_session", "model.project.dim_grading_period", "model.project.dim_section", "model.project.bridge_staff_group", "model.project.dim_school", "model.project.fct_student_section", "model.project.dim_date", "test.project.relationships_fct_student_attendance_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.1058409cf0", "test.project.relationships_fct_student_attendance_school_key__school_key__ref_dim_school_.a425d4b0e7", "test.project.relationships_fct_student_attendance_student_key__student_key__ref_dim_student_.902b20eb5a", "test.project.not_null_fct_student_attendance_school_year.c69c139be1", "test.project.not_null_fct_student_attendance_date.1c7057eb63", "test.project.not_null_fct_student_attendance_school_attendance_event_category_descriptor.be3ab06fa8", "test.project.not_null_fct_student_attendance_event_duration.7405fc5f51", "test.project.relationships_rls_user_student_data_authorization_student_key__student_key__ref_dim_student_.2b38b50db6", "test.project.unique_bridge_staff_group_staff_group_key_staff_key.71682839f2", "test.project.unique_dim_date_date.dd069a8d31", "test.project.not_null_dim_date_date.78f11e7735", "test.project.unique_dim_grading_period_grading_period_key.2c941ffbec", "test.project.not_null_dim_grading_period_grading_period_key.a9c6847f9d", "test.project.relationships_dim_grading_period_school_key__school_key__ref_dim_school_.fff5503f34", "test.project.unique_dim_local_education_agency_local_education_agency_key.2cf2d58a69", "test.project.not_null_dim_local_education_agency_local_education_agency_key.3f6251750d", "test.project.unique_dim_local_education_agency_local_education_agency_id.1a30878627", "test.project.not_null_dim_local_education_agency_local_education_agency_id.6ba737bcd9", "test.project.unique_dim_school_school_key.64ec309207", "test.project.not_null_dim_school_school_key.209ee6078e", "test.project.relationships_dim_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.c40f28107b", "test.project.unique_dim_school_school_id.d10cafcd76", "test.project.not_null_dim_school_school_id.36d55ce30b", "test.project.unique_dim_section_section_key.4b442b173b", "test.project.not_null_dim_section_section_key.d763cc8042", "test.project.relationships_dim_section_school_key__school_key__ref_dim_school_.b29c32ae93", "test.project.not_null_dim_section_section_identifier.5aa4059a37", "test.project.unique_dim_session_session_key.b5230e3fd3", "test.project.not_null_dim_session_session_key.2c2f8e6dac", "test.project.relationships_dim_session_school_key__school_key__ref_dim_school_.d4064049b7", "test.project.unique_dim_staff_staff_key.eebb0d941a", "test.project.not_null_dim_staff_staff_key.b7dc3eb451", "test.project.unique_dim_student_student_key.45ef646b54", "test.project.not_null_dim_student_student_key.67ab09a6e6", "test.project.not_null_dim_student_school_year.cb1c50e460", "test.project.not_null_dim_student_student_unique_id.8a392fc4ab", "test.project.not_null_dim_student_student_first_name.f007907dff", "test.project.not_null_dim_student_student_middle_name.eaf7fc7f0e", "test.project.not_null_dim_student_student_last_surname.329ae57d5b", "test.project.not_null_dim_student_is_english_language_learner.55a5cd929d", "test.project.accepted_values_dim_student_is_english_language_learner__Yes__No.d5a7434ec1", "test.project.not_null_dim_student_in_special_education_program.f8695e7bf3", "test.project.accepted_values_dim_student_in_special_education_program__Yes__No.7a967caab1", "test.project.not_null_dim_student_is_hispanic.2f36046142", "test.project.accepted_values_dim_student_is_hispanic__Yes__No.28cf24b221", "test.project.relationships_fct_student_school_student_key__student_key__ref_dim_student_.ce63ab9df5", "test.project.relationships_fct_student_school_local_education_agency_key__local_education_agency_key__ref_dim_local_education_agency_.bdd6a57ac4", "test.project.relationships_fct_student_school_school_key__school_key__ref_dim_school_.7a675bb6ae"], "edfi_staging": ["model.project.stg_edfi_programs", "model.project.stg_edfi_staff_education_organization_assignment_associations", "model.project.stg_edfi_course_offerings", "model.project.stg_edfi_student_program_associations", "model.project.stg_edfi_school_year_types", "model.project.stg_edfi_grading_periods", "model.project.stg_edfi_student_special_education_program_associations", "model.project.stg_edfi_students", "model.project.stg_edfi_staffs", "model.project.stg_edfi_calendar_dates", "model.project.stg_edfi_staff_school_associations", "model.project.stg_edfi_calendars", "model.project.stg_edfi_sessions", "model.project.stg_edfi_staff_section_associations", "model.project.stg_edfi_student_section_attendance_events", "model.project.stg_edfi_local_education_agencies", "model.project.stg_edfi_sections", "model.project.stg_edfi_student_education_organization_associations", "model.project.stg_edfi_student_school_attendance_events", "model.project.stg_edfi_student_school_associations", "model.project.stg_edfi_schools", "model.project.stg_edfi_student_section_associations", "model.project.stg_edfi_courses", "model.project.stg_edfi_grades", "test.project.unique_stg_edfi_local_education_agencies_concat_school_year_local_education_agency_id_.231d86e41d", "test.project.relationships_stg_edfi_schools_school_id__school_reference_school_id__ref_stg_edfi_sessions_.621576b37d", "test.project.unique_stg_edfi_students_school_year_student_unique_id.3a33c30a48"]}, "semantic_models": {}}